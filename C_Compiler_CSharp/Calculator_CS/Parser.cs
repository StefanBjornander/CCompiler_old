// This code was generated by the Gardens Point Parser Generator
// Copyright (c) Wayne Kelly, John Gough, QUT 2005-2014
// (see accompanying GPPGcopyright.rtf)

// GPPG version 1.5.2
// Machine:  STEFAN1968
// DateTime: 2020-10-11 17:11:49
// UserName: Stefan
// Input file <Parser.gppg - 2020-10-11 17:11:46>

// options: lines gplex

using System;
using System.Collections.Generic;
using System.CodeDom.Compiler;
using System.Globalization;
using System.Text;
using QUT.Gppg;

namespace Calculator
{
public enum Tokens {error=2,EOF=3,ASSIGN=4,READ=5,WRITE=6,
    NEWLINE=7,EQUAL=8,PLUS=9,MINUS=10,TIMES=11,DIVIDE=12,
    SIN=13,COS=14,TAN=15,LOG=16,EXP=17,LOG10=18,
    EXP10=19,SQRT=20,LEFT_PAREN=21,RIGHT_PAREN=22,COMMA=23,SEMICOLON=24,
    TEXT=25,NAME=26,VALUE=27};

public partial struct ValueType
#line 10 "Parser.gppg"
       {
  public string name;
  public string text;
  public double value;
  public List<string> nameList;
  public List<double> valueList;
}
#line default
// Abstract base class for GPLEX scanners
[GeneratedCodeAttribute( "Gardens Point Parser Generator", "1.5.2")]
public abstract class ScanBase : AbstractScanner<ValueType,LexLocation> {
  private LexLocation __yylloc = new LexLocation();
  public override LexLocation yylloc { get { return __yylloc; } set { __yylloc = value; } }
  protected virtual bool yywrap() { return true; }
}

// Utility class for encapsulating token information
[GeneratedCodeAttribute( "Gardens Point Parser Generator", "1.5.2")]
public class ScanObj {
  public int token;
  public ValueType yylval;
  public LexLocation yylloc;
  public ScanObj( int t, ValueType val, LexLocation loc ) {
    this.token = t; this.yylval = val; this.yylloc = loc;
  }
}

[GeneratedCodeAttribute( "Gardens Point Parser Generator", "1.5.2")]
public partial class Parser: ShiftReduceParser<ValueType, LexLocation>
{
  // Verbatim content from Parser.gppg - 2020-10-11 17:11:46
#line 5 "Parser.gppg"
  // Empty.
#line default
  // End verbatim content from Parser.gppg - 2020-10-11 17:11:46

#pragma warning disable 649
  private static Dictionary<int, string> aliases;
#pragma warning restore 649
  private static Rule[] rules = new Rule[33];
  private static State[] states = new State[65];
  private static string[] nonTerms = new string[] {
      "name_list", "expression_list", "expression", "statement_list", "$accept", 
      "statement", "optional_output", };

  static Parser() {
    states[0] = new State(new int[]{4,5,5,47,6,56,7,63},new int[]{-4,1,-6,3});
    states[1] = new State(new int[]{3,2});
    states[2] = new State(-1);
    states[3] = new State(new int[]{4,5,5,47,6,56,7,63,3,-2},new int[]{-4,4,-6,3});
    states[4] = new State(-3);
    states[5] = new State(new int[]{26,6});
    states[6] = new State(new int[]{8,7});
    states[7] = new State(new int[]{9,18,10,20,11,22,12,24,13,26,14,28,15,30,16,32,17,34,18,36,19,38,20,40,21,42,26,45,27,46},new int[]{-3,8});
    states[8] = new State(new int[]{24,9,9,10,10,12,11,14,12,16});
    states[9] = new State(-4);
    states[10] = new State(new int[]{9,18,10,20,11,22,12,24,13,26,14,28,15,30,16,32,17,34,18,36,19,38,20,40,21,42,26,45,27,46},new int[]{-3,11});
    states[11] = new State(new int[]{9,-14,10,-14,11,14,12,16,24,-14,22,-14,23,-14});
    states[12] = new State(new int[]{9,18,10,20,11,22,12,24,13,26,14,28,15,30,16,32,17,34,18,36,19,38,20,40,21,42,26,45,27,46},new int[]{-3,13});
    states[13] = new State(new int[]{9,-15,10,-15,11,14,12,16,24,-15,22,-15,23,-15});
    states[14] = new State(new int[]{9,18,10,20,11,22,12,24,13,26,14,28,15,30,16,32,17,34,18,36,19,38,20,40,21,42,26,45,27,46},new int[]{-3,15});
    states[15] = new State(-16);
    states[16] = new State(new int[]{9,18,10,20,11,22,12,24,13,26,14,28,15,30,16,32,17,34,18,36,19,38,20,40,21,42,26,45,27,46},new int[]{-3,17});
    states[17] = new State(-17);
    states[18] = new State(new int[]{9,18,10,20,11,22,12,24,13,26,14,28,15,30,16,32,17,34,18,36,19,38,20,40,21,42,26,45,27,46},new int[]{-3,19});
    states[19] = new State(new int[]{9,-18,10,-18,11,14,12,16,24,-18,22,-18,23,-18});
    states[20] = new State(new int[]{9,18,10,20,11,22,12,24,13,26,14,28,15,30,16,32,17,34,18,36,19,38,20,40,21,42,26,45,27,46},new int[]{-3,21});
    states[21] = new State(new int[]{9,-19,10,-19,11,14,12,16,24,-19,22,-19,23,-19});
    states[22] = new State(new int[]{9,18,10,20,11,22,12,24,13,26,14,28,15,30,16,32,17,34,18,36,19,38,20,40,21,42,26,45,27,46},new int[]{-3,23});
    states[23] = new State(-20);
    states[24] = new State(new int[]{9,18,10,20,11,22,12,24,13,26,14,28,15,30,16,32,17,34,18,36,19,38,20,40,21,42,26,45,27,46},new int[]{-3,25});
    states[25] = new State(-21);
    states[26] = new State(new int[]{9,18,10,20,11,22,12,24,13,26,14,28,15,30,16,32,17,34,18,36,19,38,20,40,21,42,26,45,27,46},new int[]{-3,27});
    states[27] = new State(-22);
    states[28] = new State(new int[]{9,18,10,20,11,22,12,24,13,26,14,28,15,30,16,32,17,34,18,36,19,38,20,40,21,42,26,45,27,46},new int[]{-3,29});
    states[29] = new State(-23);
    states[30] = new State(new int[]{9,18,10,20,11,22,12,24,13,26,14,28,15,30,16,32,17,34,18,36,19,38,20,40,21,42,26,45,27,46},new int[]{-3,31});
    states[31] = new State(-24);
    states[32] = new State(new int[]{9,18,10,20,11,22,12,24,13,26,14,28,15,30,16,32,17,34,18,36,19,38,20,40,21,42,26,45,27,46},new int[]{-3,33});
    states[33] = new State(-25);
    states[34] = new State(new int[]{9,18,10,20,11,22,12,24,13,26,14,28,15,30,16,32,17,34,18,36,19,38,20,40,21,42,26,45,27,46},new int[]{-3,35});
    states[35] = new State(-26);
    states[36] = new State(new int[]{9,18,10,20,11,22,12,24,13,26,14,28,15,30,16,32,17,34,18,36,19,38,20,40,21,42,26,45,27,46},new int[]{-3,37});
    states[37] = new State(-27);
    states[38] = new State(new int[]{9,18,10,20,11,22,12,24,13,26,14,28,15,30,16,32,17,34,18,36,19,38,20,40,21,42,26,45,27,46},new int[]{-3,39});
    states[39] = new State(-28);
    states[40] = new State(new int[]{9,18,10,20,11,22,12,24,13,26,14,28,15,30,16,32,17,34,18,36,19,38,20,40,21,42,26,45,27,46},new int[]{-3,41});
    states[41] = new State(-29);
    states[42] = new State(new int[]{9,18,10,20,11,22,12,24,13,26,14,28,15,30,16,32,17,34,18,36,19,38,20,40,21,42,26,45,27,46},new int[]{-3,43});
    states[43] = new State(new int[]{22,44,9,10,10,12,11,14,12,16});
    states[44] = new State(-30);
    states[45] = new State(-31);
    states[46] = new State(-32);
    states[47] = new State(new int[]{25,54,26,-8},new int[]{-7,48});
    states[48] = new State(new int[]{26,53},new int[]{-1,49});
    states[49] = new State(new int[]{24,50,23,51});
    states[50] = new State(-5);
    states[51] = new State(new int[]{26,52});
    states[52] = new State(-11);
    states[53] = new State(-10);
    states[54] = new State(new int[]{23,55});
    states[55] = new State(-9);
    states[56] = new State(new int[]{25,54,9,-8,10,-8,11,-8,12,-8,13,-8,14,-8,15,-8,16,-8,17,-8,18,-8,19,-8,20,-8,21,-8,26,-8,27,-8},new int[]{-7,57});
    states[57] = new State(new int[]{9,18,10,20,11,22,12,24,13,26,14,28,15,30,16,32,17,34,18,36,19,38,20,40,21,42,26,45,27,46},new int[]{-2,58,-3,62});
    states[58] = new State(new int[]{24,59,23,60});
    states[59] = new State(-6);
    states[60] = new State(new int[]{9,18,10,20,11,22,12,24,13,26,14,28,15,30,16,32,17,34,18,36,19,38,20,40,21,42,26,45,27,46},new int[]{-3,61});
    states[61] = new State(new int[]{9,10,10,12,11,14,12,16,24,-13,23,-13});
    states[62] = new State(new int[]{9,10,10,12,11,14,12,16,24,-12,23,-12});
    states[63] = new State(new int[]{24,64});
    states[64] = new State(-7);

    for (int sNo = 0; sNo < states.Length; sNo++) states[sNo].number = sNo;

    rules[1] = new Rule(-5, new int[]{-4,3});
    rules[2] = new Rule(-4, new int[]{-6});
    rules[3] = new Rule(-4, new int[]{-6,-4});
    rules[4] = new Rule(-6, new int[]{4,26,8,-3,24});
    rules[5] = new Rule(-6, new int[]{5,-7,-1,24});
    rules[6] = new Rule(-6, new int[]{6,-7,-2,24});
    rules[7] = new Rule(-6, new int[]{7,24});
    rules[8] = new Rule(-7, new int[]{});
    rules[9] = new Rule(-7, new int[]{25,23});
    rules[10] = new Rule(-1, new int[]{26});
    rules[11] = new Rule(-1, new int[]{-1,23,26});
    rules[12] = new Rule(-2, new int[]{-3});
    rules[13] = new Rule(-2, new int[]{-2,23,-3});
    rules[14] = new Rule(-3, new int[]{-3,9,-3});
    rules[15] = new Rule(-3, new int[]{-3,10,-3});
    rules[16] = new Rule(-3, new int[]{-3,11,-3});
    rules[17] = new Rule(-3, new int[]{-3,12,-3});
    rules[18] = new Rule(-3, new int[]{9,-3});
    rules[19] = new Rule(-3, new int[]{10,-3});
    rules[20] = new Rule(-3, new int[]{11,-3});
    rules[21] = new Rule(-3, new int[]{12,-3});
    rules[22] = new Rule(-3, new int[]{13,-3});
    rules[23] = new Rule(-3, new int[]{14,-3});
    rules[24] = new Rule(-3, new int[]{15,-3});
    rules[25] = new Rule(-3, new int[]{16,-3});
    rules[26] = new Rule(-3, new int[]{17,-3});
    rules[27] = new Rule(-3, new int[]{18,-3});
    rules[28] = new Rule(-3, new int[]{19,-3});
    rules[29] = new Rule(-3, new int[]{20,-3});
    rules[30] = new Rule(-3, new int[]{21,-3,22});
    rules[31] = new Rule(-3, new int[]{26});
    rules[32] = new Rule(-3, new int[]{27});
  }

  protected override void Initialize() {
    this.InitSpecialTokens((int)Tokens.error, (int)Tokens.EOF);
    this.InitStates(states);
    this.InitRules(rules);
    this.InitNonTerminals(nonTerms);
  }

  protected override void DoAction(int action)
  {
#pragma warning disable 162, 1522
    switch (action)
    {
      case 4: // statement -> ASSIGN, NAME, EQUAL, expression, SEMICOLON
#line 37 "Parser.gppg"
                                           {
      MainX.VariableMap[ValueStack[ValueStack.Depth-4].name] = ValueStack[ValueStack.Depth-2].value;
    }
#line default
        break;
      case 5: // statement -> READ, optional_output, name_list, SEMICOLON
#line 41 "Parser.gppg"
                                             {
      try {
        string buffer = Console.In.ReadLine();
        string[] textArray = buffer.Split(',');

        if (ValueStack[ValueStack.Depth-2].nameList.Count != textArray.Length) {
          Console.Error.WriteLine("Invalid number of values.");
          Environment.Exit(-1);
        }
      
        for (int index = 0; index < ValueStack[ValueStack.Depth-2].nameList.Count; ++index) {
          string name = ValueStack[ValueStack.Depth-2].nameList[index], text = textArray[index];
          double value = double.Parse(text);
//          double value = double.Parse(text, NumberStyles.Any, CultureInfo.InvariantCulture);
          MainX.VariableMap[name] = value;
        }
      }
      catch (Exception exception) {
        Console.Error.WriteLine("Invalid input: " + exception.ToString());
        Environment.Exit(-1);
      }
    }
#line default
        break;
      case 6: // statement -> WRITE, optional_output, expression_list, SEMICOLON
#line 64 "Parser.gppg"
                                                    {
      bool first = true;
      foreach (double value in ValueStack[ValueStack.Depth-2].valueList) {
        Console.Out.Write((first ? "" : ", ") + value);
        first = false;
      }

      Console.Out.WriteLine();
    }
#line default
        break;
      case 7: // statement -> NEWLINE, SEMICOLON
#line 74 "Parser.gppg"
                      {
      Console.Out.WriteLine();
    }
#line default
        break;
      case 9: // optional_output -> TEXT, COMMA
#line 80 "Parser.gppg"
               {
      Console.Out.Write(ValueStack[ValueStack.Depth-2].text);
    }
#line default
        break;
      case 10: // name_list -> NAME
#line 85 "Parser.gppg"
         {
      CurrentSemanticValue.nameList = new List<string>();
      CurrentSemanticValue.nameList.Add(ValueStack[ValueStack.Depth-1].name);
    }
#line default
        break;
      case 11: // name_list -> name_list, COMMA, NAME
#line 89 "Parser.gppg"
                         {
      CurrentSemanticValue.nameList = ValueStack[ValueStack.Depth-3].nameList;
      CurrentSemanticValue.nameList.Add(ValueStack[ValueStack.Depth-1].name);
    }
#line default
        break;
      case 12: // expression_list -> expression
#line 95 "Parser.gppg"
               {
      CurrentSemanticValue.valueList = new List<double>();
      CurrentSemanticValue.valueList.Add(ValueStack[ValueStack.Depth-1].value);
    }
#line default
        break;
      case 13: // expression_list -> expression_list, COMMA, expression
#line 99 "Parser.gppg"
                                     {
      CurrentSemanticValue.valueList = ValueStack[ValueStack.Depth-3].valueList;
      CurrentSemanticValue.valueList.Add(ValueStack[ValueStack.Depth-1].value);
    }
#line default
        break;
      case 14: // expression -> expression, PLUS, expression
#line 105 "Parser.gppg"
                               {
      CurrentSemanticValue.value = ValueStack[ValueStack.Depth-3].value + ValueStack[ValueStack.Depth-1].value;
    }
#line default
        break;
      case 15: // expression -> expression, MINUS, expression
#line 108 "Parser.gppg"
                                {
      CurrentSemanticValue.value = ValueStack[ValueStack.Depth-3].value - ValueStack[ValueStack.Depth-1].value;
    }
#line default
        break;
      case 16: // expression -> expression, TIMES, expression
#line 111 "Parser.gppg"
                                {
      CurrentSemanticValue.value = ValueStack[ValueStack.Depth-3].value * ValueStack[ValueStack.Depth-1].value;
    }
#line default
        break;
      case 17: // expression -> expression, DIVIDE, expression
#line 114 "Parser.gppg"
                                 {
      if (ValueStack[ValueStack.Depth-1].value == 0) {
        Console.Error.WriteLine("Division by Zero.");
        Environment.Exit(-1);
      }

      CurrentSemanticValue.value = ValueStack[ValueStack.Depth-3].value / ValueStack[ValueStack.Depth-1].value;
    }
#line default
        break;
      case 18: // expression -> PLUS, expression
#line 122 "Parser.gppg"
                    {
      CurrentSemanticValue.value = ValueStack[ValueStack.Depth-1].value;
    }
#line default
        break;
      case 19: // expression -> MINUS, expression
#line 125 "Parser.gppg"
                     {
      CurrentSemanticValue.value = -ValueStack[ValueStack.Depth-1].value;
    }
#line default
        break;
      case 20: // expression -> TIMES, expression
#line 128 "Parser.gppg"
                     {
      CurrentSemanticValue.value = ValueStack[ValueStack.Depth-1].value;
    }
#line default
        break;
      case 21: // expression -> DIVIDE, expression
#line 131 "Parser.gppg"
                      {
      CurrentSemanticValue.value = -ValueStack[ValueStack.Depth-1].value;
    }
#line default
        break;
      case 22: // expression -> SIN, expression
#line 134 "Parser.gppg"
                   {
      CurrentSemanticValue.value = Math.Sin(ValueStack[ValueStack.Depth-1].value);
    }
#line default
        break;
      case 23: // expression -> COS, expression
#line 137 "Parser.gppg"
                   {
      CurrentSemanticValue.value = Math.Cos(ValueStack[ValueStack.Depth-1].value);
    }
#line default
        break;
      case 24: // expression -> TAN, expression
#line 140 "Parser.gppg"
                   {
      CurrentSemanticValue.value = Math.Tan(ValueStack[ValueStack.Depth-1].value);
    }
#line default
        break;
      case 25: // expression -> LOG, expression
#line 143 "Parser.gppg"
                   {
      if (ValueStack[ValueStack.Depth-1].value <= 0) {
        Console.Error.WriteLine("Logarithm of Non-Positive Value.");
        Environment.Exit(-1);
      }

      CurrentSemanticValue.value = Math.Log(ValueStack[ValueStack.Depth-1].value);
    }
#line default
        break;
      case 26: // expression -> EXP, expression
#line 151 "Parser.gppg"
                   {
      CurrentSemanticValue.value = Math.Exp(ValueStack[ValueStack.Depth-1].value);
    }
#line default
        break;
      case 27: // expression -> LOG10, expression
#line 154 "Parser.gppg"
                     {
      if (ValueStack[ValueStack.Depth-1].value <= 0) {
        Console.Error.WriteLine("Logarithm of Non-Positive Value.");
        Environment.Exit(-1);
      }

      CurrentSemanticValue.value = Math.Log10(ValueStack[ValueStack.Depth-1].value);
    }
#line default
        break;
      case 28: // expression -> EXP10, expression
#line 162 "Parser.gppg"
                     {
      CurrentSemanticValue.value = Math.Pow(10, ValueStack[ValueStack.Depth-1].value);
    }
#line default
        break;
      case 29: // expression -> SQRT, expression
#line 165 "Parser.gppg"
                    {
      if (ValueStack[ValueStack.Depth-1].value < 0) {
        Console.Error.WriteLine("Square Root of Negativ Value.");
        Environment.Exit(-1);
      }

      CurrentSemanticValue.value = Math.Sqrt(ValueStack[ValueStack.Depth-1].value);
    }
#line default
        break;
      case 30: // expression -> LEFT_PAREN, expression, RIGHT_PAREN
#line 173 "Parser.gppg"
                                      {
      CurrentSemanticValue.value = ValueStack[ValueStack.Depth-2].value;
    }
#line default
        break;
      case 31: // expression -> NAME
#line 176 "Parser.gppg"
         {
      if (MainX.VariableMap.ContainsKey(ValueStack[ValueStack.Depth-1].name)) {
        CurrentSemanticValue.value = MainX.VariableMap[ValueStack[ValueStack.Depth-1].name];
      }
      else {
        Console.Error.WriteLine("Unknown Name: \"" + ValueStack[ValueStack.Depth-1].name + "\".");
        Environment.Exit(-1);
      }
    }
#line default
        break;
      case 32: // expression -> VALUE
#line 185 "Parser.gppg"
          {
      CurrentSemanticValue.value = ValueStack[ValueStack.Depth-1].value;
    }
#line default
        break;
    }
#pragma warning restore 162, 1522
  }

  protected override string TerminalToString(int terminal)
  {
    if (aliases != null && aliases.ContainsKey(terminal))
        return aliases[terminal];
    else if (((Tokens)terminal).ToString() != terminal.ToString(CultureInfo.InvariantCulture))
        return ((Tokens)terminal).ToString();
    else
        return CharToString((char)terminal);
  }

#line 190 "Parser.gppg"
#line default
}
}
