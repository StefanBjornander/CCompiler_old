// This code was generated by the Gardens Point Parser Generator
// Copyright (c) Wayne Kelly, John Gough, QUT 2005-2014
// (see accompanying GPPGcopyright.rtf)

// GPPG version 1.5.2
// Machine:  STEFAN1968
// DateTime: 2021-03-06 23:12:55
// UserName: Stefan
// Input file <MainParser.gppg - 2021-03-06 21:32:29>

// options: lines gplex

using System;
using System.Collections.Generic;
using System.CodeDom.Compiler;
using System.Globalization;
using System.Text;
using QUT.Gppg;
using CCompiler;
using System.Numerics;

namespace CCompiler_Main
{
public enum Tokens {error=2,EOF=3,AUTO=4,REGISTER=5,STATIC=6,
    EXTERN=7,TYPEDEF=8,CONSTANT=9,VOLATILE=10,SIGNED=11,UNSIGNED=12,
    CHAR=13,SHORT=14,INT=15,LONG=16,FLOAT=17,DOUBLE=18,
    VOID=19,ENUM=20,STRUCT=21,UNION=22,PLUS=23,MINUS=24,
    DIVIDE=25,MODULO=26,INCREMENT=27,DECREMENT=28,EQUAL=29,NOT_EQUAL=30,
    LESS_THAN=31,LESS_THAN_EQUAL=32,GREATER_THAN=33,GREATER_THAN_EQUAL=34,LEFT_SHIFT=35,RIGHT_SHIFT=36,
    ASSIGN=37,ADD_ASSIGN=38,SUBTRACT_ASSIGN=39,MULTIPLY_ASSIGN=40,DIVIDE_ASSIGN=41,MODULO_ASSIGN=42,
    LEFT_SHIFT_ASSIGN=43,RIGHT_SHIFT_ASSIGN=44,AND_ASSIGN=45,OR_ASSIGN=46,XOR_ASSIGN=47,COLON=48,
    COMMA=49,SEMICOLON=50,ELLIPSE=51,DOT=52,ARROW=53,ASTERRISK=54,
    AMPERSAND=55,LEFT_PARENTHESIS=56,RIGHT_PARENTHESIS=57,LEFT_BLOCK=58,RIGHT_BLOCK=59,LEFT_SQUARE=60,
    RIGHT_SQUARE=61,SIZEOF=62,LOGICAL_OR=63,LOGICAL_AND=64,LOGICAL_NOT=65,BITWISE_XOR=66,
    BITWISE_OR=67,BITWISE_NOT=68,QUESTION_MARK=69,IF=70,ELSE=71,SWITCH=72,
    CASE=73,DEFAULT=74,FOR=75,WHILE=76,DO=77,CONTINUE=78,
    BREAK=79,RETURN=80,GOTO=81,INTERRUPT=82,JUMP_REGISTER=83,SYSCALL=84,
    CARRY_FLAG=85,STACK_TOP=86,NAME=87,REGISTER_NAME=88,TYPEDEF_NAME=89,VALUE=90};

public partial struct ValueType
#line 29 "MainParser.gppg"
       {
  public string name;
  public Register register;
  public CCompiler.Type type;
  public List<CCompiler.Type> type_list;
  public Sort sort;
  public Symbol symbol;
  public IDictionary<string,Symbol> symbol_map;
  public List<Symbol> symbol_list;
  public ISet<Symbol> symbol_set;
  public List<string> string_list;
  public Declarator declarator;
  public List<Declarator> declarator_list;
  public List<Declarator> optional_declarator_list;
  public MiddleOperator middleOperator;
  public Expression expression;
  public List<Expression> expression_list;
  public Statement statement;
  public Pair<List<Symbol>,Boolean> parameter_pair;
  public List<MiddleCode> middle_code_list;
  public object obj;
  public List<object> object_list;
  public List<Mask> mask_list;
  public Mask mask;
}
#line default
// Abstract base class for GPLEX scanners
[GeneratedCodeAttribute( "Gardens Point Parser Generator", "1.5.2")]
public abstract class ScanBase : AbstractScanner<ValueType,LexLocation> {
  private LexLocation __yylloc = new LexLocation();
  public override LexLocation yylloc { get { return __yylloc; } set { __yylloc = value; } }
  protected virtual bool yywrap() { return true; }
}

// Utility class for encapsulating token information
[GeneratedCodeAttribute( "Gardens Point Parser Generator", "1.5.2")]
public class ScanObj {
  public int token;
  public ValueType yylval;
  public LexLocation yylloc;
  public ScanObj( int t, ValueType val, LexLocation loc ) {
    this.token = t; this.yylval = val; this.yylloc = loc;
  }
}

[GeneratedCodeAttribute( "Gardens Point Parser Generator", "1.5.2")]
public partial class Parser: ShiftReduceParser<ValueType, LexLocation>
{
  // Verbatim content from MainParser.gppg - 2021-03-06 21:32:29
#line 8 "MainParser.gppg"
  public static Stack<Specifier> SpecifierStack = new Stack<Specifier>();
  public static Stack<Scope> ScopeStack = new Stack<Scope>();
#line default
  // End verbatim content from MainParser.gppg - 2021-03-06 21:32:29

#pragma warning disable 649
  private static Dictionary<int, string> aliases;
#pragma warning restore 649
  private static Rule[] rules = new Rule[223];
  private static State[] states = new State[417];
  private static string[] nonTerms = new string[] {
      "declaration_specifier", "declaration_specifier_list_x", "declaration_specifier_list", 
      "optional_name", "struct_or_union_specifier", "struct_or_union", "enum_specifier", 
      "enum_list", "enum", "declarator_list", "declaration", "declaration_list", 
      "optional_declaration_list", "initialization_bitfield_simple_declarator", 
      "optional_simple_declarator", "declarator", "direct_declarator", "optional_pointer_list", 
      "pointer_list", "pointer_marker", "optional_qualifier_list", "qualifier", 
      "optional_parameter_ellipse_list", "parameter_ellipse_list", "parameter_list", 
      "parameter_declaration", "optional_name_list", "name_list", "initializer_list", 
      "initializer", "type_name", "abstract_declarator", "direct_abstract_declarator", 
      "assignment_operator", "equality_operator", "relation_operator", "shift_operator", 
      "multiply_operator", "prefix_unary_operator", "increment_operator", "optional_constant_integral_expression", 
      "constant_integral_expression", "optional_expression", "expression", "assignment_expression", 
      "condition_expression", "logical_or_expression", "logical_and_expression", 
      "bitwise_or_expression", "bitwise_xor_expression", "bitwise_and_expression", 
      "equality_expression", "relation_expression", "shift_expression", "add_expression", 
      "multiply_expression", "type_cast_expression", "prefix_expression", "postfix_expression", 
      "primary_expression", "optional_statement_list", "statement", "closed_statement", 
      "opened_statement", "optional_argument_expression_list", "argument_expression_list", 
      "translation_unit", "$accept", "external_declaration", "function_definition", 
      "Anon@1", "Anon@2", "Anon@3", "Anon@4", "Anon@5", "Anon@6", "Anon@7", "Anon@8", 
      "Anon@9", "optional_comma", "switch_header", "loop_header", "Anon@10", 
      "Anon@11", "Anon@12", };

  static Parser() {
    states[0] = new State(new int[]{9,223,10,224,4,225,5,226,6,227,7,228,8,229,19,230,13,231,14,232,15,233,16,234,17,235,18,236,11,237,12,238,21,249,22,250,20,252,89,265,54,174,87,-62,56,-62},new int[]{-67,1,-69,416,-70,4,-2,5,-3,247,-1,221,-5,239,-6,240,-7,251,-16,407,-18,282,-19,314,-20,180,-11,415});
    states[1] = new State(new int[]{3,2,9,223,10,224,4,225,5,226,6,227,7,228,8,229,19,230,13,231,14,232,15,233,16,234,17,235,18,236,11,237,12,238,21,249,22,250,20,252,89,265,54,174,87,-62,56,-62},new int[]{-69,3,-70,4,-2,5,-3,247,-1,221,-5,239,-6,240,-7,251,-16,407,-18,282,-19,314,-20,180,-11,415});
    states[2] = new State(-1);
    states[3] = new State(-3);
    states[4] = new State(-4);
    states[5] = new State(new int[]{54,174,87,-62,56,-62,48,-59},new int[]{-16,6,-10,267,-18,282,-19,314,-20,180,-14,318,-15,315});
    states[6] = new State(new int[]{37,272,50,-56,49,-56,48,-60,9,-6,10,-6,4,-6,5,-6,6,-6,7,-6,8,-6,19,-6,13,-6,14,-6,15,-6,16,-6,17,-6,18,-6,11,-6,12,-6,21,-6,22,-6,20,-6,89,-6,58,-6},new int[]{-71,7});
    states[7] = new State(new int[]{9,223,10,224,4,225,5,226,6,227,7,228,8,229,19,230,13,231,14,232,15,233,16,234,17,235,18,236,11,237,12,238,21,249,22,250,20,252,89,265,58,-12},new int[]{-13,8,-12,406,-11,319,-3,247,-1,221,-5,239,-6,240,-7,251,-2,266});
    states[8] = new State(-7,new int[]{-72,9});
    states[9] = new State(new int[]{58,10});
    states[10] = new State(new int[]{9,223,10,224,4,225,5,226,6,227,7,228,8,229,19,230,13,231,14,232,15,233,16,234,17,235,18,236,11,237,12,238,21,249,22,250,20,252,89,265,59,-12,70,-12,72,-12,73,-12,76,-12,75,-12,87,-12,77,-12,74,-12,78,-12,79,-12,58,-12,81,-12,80,-12,56,-12,90,-12,88,-12,85,-12,86,-12,23,-12,24,-12,68,-12,65,-12,62,-12,55,-12,54,-12,27,-12,28,-12,83,-12,82,-12,84,-12,50,-12},new int[]{-13,11,-12,406,-11,319,-3,247,-1,221,-5,239,-6,240,-7,251,-2,266});
    states[11] = new State(-104,new int[]{-61,12});
    states[12] = new State(new int[]{59,13,70,16,72,25,73,32,76,37,75,44,87,55,77,335,74,344,78,375,79,377,58,379,81,384,80,387,56,146,90,152,88,154,85,155,86,156,23,159,24,160,68,161,65,162,62,164,55,189,54,191,27,199,28,200,83,392,82,397,84,402,50,-134},new int[]{-62,14,-64,15,-63,343,-43,390,-44,87,-45,122,-46,90,-47,91,-48,123,-49,124,-50,125,-51,126,-52,127,-53,130,-54,135,-55,138,-56,188,-57,144,-58,196,-59,113,-60,145,-39,157,-40,193});
    states[13] = new State(-8);
    states[14] = new State(-105);
    states[15] = new State(-106);
    states[16] = new State(new int[]{56,17});
    states[17] = new State(new int[]{56,146,90,152,87,153,88,154,85,155,86,156,23,159,24,160,68,161,65,162,62,164,55,189,54,191,27,199,28,200},new int[]{-44,18,-45,122,-46,90,-47,91,-48,123,-49,124,-50,125,-51,126,-52,127,-53,130,-54,135,-55,138,-56,188,-57,144,-58,196,-59,113,-60,145,-39,157,-40,193});
    states[18] = new State(new int[]{57,19,49,88});
    states[19] = new State(new int[]{70,16,72,25,73,32,76,37,75,44,87,55,77,335,74,344,78,375,79,377,58,379,81,384,80,387,56,146,90,152,88,154,85,155,86,156,23,159,24,160,68,161,65,162,62,164,55,189,54,191,27,199,28,200,83,392,82,397,84,402,50,-134},new int[]{-62,20,-63,21,-64,15,-43,390,-44,87,-45,122,-46,90,-47,91,-48,123,-49,124,-50,125,-51,126,-52,127,-53,130,-54,135,-55,138,-56,188,-57,144,-58,196,-59,113,-60,145,-39,157,-40,193});
    states[20] = new State(-110);
    states[21] = new State(new int[]{71,22,59,-107,70,-107,72,-107,73,-107,76,-107,75,-107,87,-107,77,-107,74,-107,78,-107,79,-107,58,-107,81,-107,80,-107,56,-107,90,-107,88,-107,85,-107,86,-107,23,-107,24,-107,68,-107,65,-107,62,-107,55,-107,54,-107,27,-107,28,-107,83,-107,82,-107,84,-107,50,-107});
    states[22] = new State(new int[]{70,16,72,25,73,32,76,37,75,44,87,55,77,335,74,344,78,375,79,377,58,379,81,384,80,387,56,146,90,152,88,154,85,155,86,156,23,159,24,160,68,161,65,162,62,164,55,189,54,191,27,199,28,200,83,392,82,397,84,402,50,-134},new int[]{-64,23,-63,24,-43,390,-44,87,-45,122,-46,90,-47,91,-48,123,-49,124,-50,125,-51,126,-52,127,-53,130,-54,135,-55,138,-56,188,-57,144,-58,196,-59,113,-60,145,-39,157,-40,193});
    states[23] = new State(-111);
    states[24] = new State(-117);
    states[25] = new State(-108,new int[]{-81,26});
    states[26] = new State(new int[]{56,27});
    states[27] = new State(new int[]{56,146,90,152,87,153,88,154,85,155,86,156,23,159,24,160,68,161,65,162,62,164,55,189,54,191,27,199,28,200},new int[]{-44,28,-45,122,-46,90,-47,91,-48,123,-49,124,-50,125,-51,126,-52,127,-53,130,-54,135,-55,138,-56,188,-57,144,-58,196,-59,113,-60,145,-39,157,-40,193});
    states[28] = new State(new int[]{57,29,49,88});
    states[29] = new State(new int[]{70,16,72,25,73,32,76,37,75,44,87,55,77,335,74,344,78,375,79,377,58,379,81,384,80,387,56,146,90,152,88,154,85,155,86,156,23,159,24,160,68,161,65,162,62,164,55,189,54,191,27,199,28,200,83,392,82,397,84,402,50,-134},new int[]{-64,30,-63,31,-43,390,-44,87,-45,122,-46,90,-47,91,-48,123,-49,124,-50,125,-51,126,-52,127,-53,130,-54,135,-55,138,-56,188,-57,144,-58,196,-59,113,-60,145,-39,157,-40,193});
    states[30] = new State(-112);
    states[31] = new State(-118);
    states[32] = new State(new int[]{56,146,90,152,87,153,88,154,85,155,86,156,23,159,24,160,68,161,65,162,62,164,55,189,54,191,27,199,28,200},new int[]{-42,33,-46,187,-47,91,-48,123,-49,124,-50,125,-51,126,-52,127,-53,130,-54,135,-55,138,-56,188,-57,144,-58,112,-59,113,-60,145,-39,157,-40,193});
    states[33] = new State(new int[]{48,34});
    states[34] = new State(new int[]{70,16,72,25,73,32,76,37,75,44,87,55,77,335,74,344,78,375,79,377,58,379,81,384,80,387,56,146,90,152,88,154,85,155,86,156,23,159,24,160,68,161,65,162,62,164,55,189,54,191,27,199,28,200,83,392,82,397,84,402,50,-134},new int[]{-64,35,-63,36,-43,390,-44,87,-45,122,-46,90,-47,91,-48,123,-49,124,-50,125,-51,126,-52,127,-53,130,-54,135,-55,138,-56,188,-57,144,-58,196,-59,113,-60,145,-39,157,-40,193});
    states[35] = new State(-113);
    states[36] = new State(-122);
    states[37] = new State(-109,new int[]{-82,38});
    states[38] = new State(new int[]{56,39});
    states[39] = new State(new int[]{56,146,90,152,87,153,88,154,85,155,86,156,23,159,24,160,68,161,65,162,62,164,55,189,54,191,27,199,28,200},new int[]{-44,40,-45,122,-46,90,-47,91,-48,123,-49,124,-50,125,-51,126,-52,127,-53,130,-54,135,-55,138,-56,188,-57,144,-58,196,-59,113,-60,145,-39,157,-40,193});
    states[40] = new State(new int[]{57,41,49,88});
    states[41] = new State(new int[]{70,16,72,25,73,32,76,37,75,44,87,55,77,335,74,344,78,375,79,377,58,379,81,384,80,387,56,146,90,152,88,154,85,155,86,156,23,159,24,160,68,161,65,162,62,164,55,189,54,191,27,199,28,200,83,392,82,397,84,402,50,-134},new int[]{-64,42,-63,43,-43,390,-44,87,-45,122,-46,90,-47,91,-48,123,-49,124,-50,125,-51,126,-52,127,-53,130,-54,135,-55,138,-56,188,-57,144,-58,196,-59,113,-60,145,-39,157,-40,193});
    states[42] = new State(-114);
    states[43] = new State(-119);
    states[44] = new State(-109,new int[]{-82,45});
    states[45] = new State(new int[]{56,46});
    states[46] = new State(new int[]{56,146,90,152,87,153,88,154,85,155,86,156,23,159,24,160,68,161,65,162,62,164,55,189,54,191,27,199,28,200,50,-134},new int[]{-43,47,-44,87,-45,122,-46,90,-47,91,-48,123,-49,124,-50,125,-51,126,-52,127,-53,130,-54,135,-55,138,-56,188,-57,144,-58,196,-59,113,-60,145,-39,157,-40,193});
    states[47] = new State(new int[]{50,48});
    states[48] = new State(new int[]{56,146,90,152,87,153,88,154,85,155,86,156,23,159,24,160,68,161,65,162,62,164,55,189,54,191,27,199,28,200,50,-134},new int[]{-43,49,-44,87,-45,122,-46,90,-47,91,-48,123,-49,124,-50,125,-51,126,-52,127,-53,130,-54,135,-55,138,-56,188,-57,144,-58,196,-59,113,-60,145,-39,157,-40,193});
    states[49] = new State(new int[]{50,50});
    states[50] = new State(new int[]{56,146,90,152,87,153,88,154,85,155,86,156,23,159,24,160,68,161,65,162,62,164,55,189,54,191,27,199,28,200,57,-134},new int[]{-43,51,-44,87,-45,122,-46,90,-47,91,-48,123,-49,124,-50,125,-51,126,-52,127,-53,130,-54,135,-55,138,-56,188,-57,144,-58,196,-59,113,-60,145,-39,157,-40,193});
    states[51] = new State(new int[]{57,52});
    states[52] = new State(new int[]{70,16,72,25,73,32,76,37,75,44,87,55,77,335,74,344,78,375,79,377,58,379,81,384,80,387,56,146,90,152,88,154,85,155,86,156,23,159,24,160,68,161,65,162,62,164,55,189,54,191,27,199,28,200,83,392,82,397,84,402,50,-134},new int[]{-64,53,-63,54,-43,390,-44,87,-45,122,-46,90,-47,91,-48,123,-49,124,-50,125,-51,126,-52,127,-53,130,-54,135,-55,138,-56,188,-57,144,-58,196,-59,113,-60,145,-39,157,-40,193});
    states[53] = new State(-115);
    states[54] = new State(-121);
    states[55] = new State(new int[]{48,56,52,-219,53,-219,60,-219,27,-219,28,-219,56,-219,37,-219,38,-219,39,-219,40,-219,41,-219,42,-219,45,-219,46,-219,47,-219,43,-219,44,-219,54,-219,25,-219,26,-219,23,-219,24,-219,35,-219,36,-219,31,-219,32,-219,33,-219,34,-219,29,-219,30,-219,55,-219,66,-219,67,-219,64,-219,63,-219,69,-219,49,-219,50,-219});
    states[56] = new State(new int[]{70,58,72,64,73,69,76,72,75,77,87,86},new int[]{-64,57});
    states[57] = new State(-116);
    states[58] = new State(new int[]{56,59});
    states[59] = new State(new int[]{56,146,90,152,87,153,88,154,85,155,86,156,23,159,24,160,68,161,65,162,62,164,55,189,54,191,27,199,28,200},new int[]{-44,60,-45,122,-46,90,-47,91,-48,123,-49,124,-50,125,-51,126,-52,127,-53,130,-54,135,-55,138,-56,188,-57,144,-58,196,-59,113,-60,145,-39,157,-40,193});
    states[60] = new State(new int[]{57,61,49,88});
    states[61] = new State(new int[]{70,16,72,25,73,32,76,37,75,44,87,55,77,335,74,344,78,375,79,377,58,379,81,384,80,387,56,146,90,152,88,154,85,155,86,156,23,159,24,160,68,161,65,162,62,164,55,189,54,191,27,199,28,200,83,392,82,397,84,402,50,-134},new int[]{-62,20,-63,62,-64,15,-43,390,-44,87,-45,122,-46,90,-47,91,-48,123,-49,124,-50,125,-51,126,-52,127,-53,130,-54,135,-55,138,-56,188,-57,144,-58,196,-59,113,-60,145,-39,157,-40,193});
    states[62] = new State(new int[]{71,63,59,-107,70,-107,72,-107,73,-107,76,-107,75,-107,87,-107,77,-107,74,-107,78,-107,79,-107,58,-107,81,-107,80,-107,56,-107,90,-107,88,-107,85,-107,86,-107,23,-107,24,-107,68,-107,65,-107,62,-107,55,-107,54,-107,27,-107,28,-107,83,-107,82,-107,84,-107,50,-107});
    states[63] = new State(new int[]{70,58,72,64,73,69,76,72,75,77,87,86},new int[]{-64,23});
    states[64] = new State(-108,new int[]{-81,65});
    states[65] = new State(new int[]{56,66});
    states[66] = new State(new int[]{56,146,90,152,87,153,88,154,85,155,86,156,23,159,24,160,68,161,65,162,62,164,55,189,54,191,27,199,28,200},new int[]{-44,67,-45,122,-46,90,-47,91,-48,123,-49,124,-50,125,-51,126,-52,127,-53,130,-54,135,-55,138,-56,188,-57,144,-58,196,-59,113,-60,145,-39,157,-40,193});
    states[67] = new State(new int[]{57,68,49,88});
    states[68] = new State(new int[]{70,58,72,64,73,69,76,72,75,77,87,86},new int[]{-64,30});
    states[69] = new State(new int[]{56,146,90,152,87,153,88,154,85,155,86,156,23,159,24,160,68,161,65,162,62,164,55,189,54,191,27,199,28,200},new int[]{-42,70,-46,187,-47,91,-48,123,-49,124,-50,125,-51,126,-52,127,-53,130,-54,135,-55,138,-56,188,-57,144,-58,112,-59,113,-60,145,-39,157,-40,193});
    states[70] = new State(new int[]{48,71});
    states[71] = new State(new int[]{70,58,72,64,73,69,76,72,75,77,87,86},new int[]{-64,35});
    states[72] = new State(-109,new int[]{-82,73});
    states[73] = new State(new int[]{56,74});
    states[74] = new State(new int[]{56,146,90,152,87,153,88,154,85,155,86,156,23,159,24,160,68,161,65,162,62,164,55,189,54,191,27,199,28,200},new int[]{-44,75,-45,122,-46,90,-47,91,-48,123,-49,124,-50,125,-51,126,-52,127,-53,130,-54,135,-55,138,-56,188,-57,144,-58,196,-59,113,-60,145,-39,157,-40,193});
    states[75] = new State(new int[]{57,76,49,88});
    states[76] = new State(new int[]{70,58,72,64,73,69,76,72,75,77,87,86},new int[]{-64,42});
    states[77] = new State(-109,new int[]{-82,78});
    states[78] = new State(new int[]{56,79});
    states[79] = new State(new int[]{56,146,90,152,87,153,88,154,85,155,86,156,23,159,24,160,68,161,65,162,62,164,55,189,54,191,27,199,28,200,50,-134},new int[]{-43,80,-44,87,-45,122,-46,90,-47,91,-48,123,-49,124,-50,125,-51,126,-52,127,-53,130,-54,135,-55,138,-56,188,-57,144,-58,196,-59,113,-60,145,-39,157,-40,193});
    states[80] = new State(new int[]{50,81});
    states[81] = new State(new int[]{56,146,90,152,87,153,88,154,85,155,86,156,23,159,24,160,68,161,65,162,62,164,55,189,54,191,27,199,28,200,50,-134},new int[]{-43,82,-44,87,-45,122,-46,90,-47,91,-48,123,-49,124,-50,125,-51,126,-52,127,-53,130,-54,135,-55,138,-56,188,-57,144,-58,196,-59,113,-60,145,-39,157,-40,193});
    states[82] = new State(new int[]{50,83});
    states[83] = new State(new int[]{56,146,90,152,87,153,88,154,85,155,86,156,23,159,24,160,68,161,65,162,62,164,55,189,54,191,27,199,28,200,57,-134},new int[]{-43,84,-44,87,-45,122,-46,90,-47,91,-48,123,-49,124,-50,125,-51,126,-52,127,-53,130,-54,135,-55,138,-56,188,-57,144,-58,196,-59,113,-60,145,-39,157,-40,193});
    states[84] = new State(new int[]{57,85});
    states[85] = new State(new int[]{70,58,72,64,73,69,76,72,75,77,87,86},new int[]{-64,53});
    states[86] = new State(new int[]{48,56});
    states[87] = new State(new int[]{49,88,50,-135,57,-135});
    states[88] = new State(new int[]{56,146,90,152,87,153,88,154,85,155,86,156,23,159,24,160,68,161,65,162,62,164,55,189,54,191,27,199,28,200},new int[]{-45,89,-46,90,-47,91,-48,123,-49,124,-50,125,-51,126,-52,127,-53,130,-54,135,-55,138,-56,188,-57,144,-58,196,-59,113,-60,145,-39,157,-40,193});
    states[89] = new State(-137);
    states[90] = new State(-138);
    states[91] = new State(new int[]{63,92,69,331,49,-151,50,-151,57,-151,48,-151,61,-151,59,-151});
    states[92] = new State(new int[]{56,146,90,152,87,153,88,154,85,155,86,156,23,159,24,160,68,161,65,162,62,164,55,189,54,191,27,199,28,200},new int[]{-48,93,-49,124,-50,125,-51,126,-52,127,-53,130,-54,135,-55,138,-56,188,-57,144,-58,112,-59,113,-60,145,-39,157,-40,193});
    states[93] = new State(new int[]{64,94,63,-157,69,-157,49,-157,50,-157,57,-157,48,-157,61,-157,59,-157});
    states[94] = new State(new int[]{56,146,90,152,87,153,88,154,85,155,86,156,23,159,24,160,68,161,65,162,62,164,55,189,54,191,27,199,28,200},new int[]{-49,95,-50,125,-51,126,-52,127,-53,130,-54,135,-55,138,-56,188,-57,144,-58,112,-59,113,-60,145,-39,157,-40,193});
    states[95] = new State(new int[]{67,96,64,-159,63,-159,69,-159,49,-159,50,-159,57,-159,48,-159,61,-159,59,-159});
    states[96] = new State(new int[]{56,146,90,152,87,153,88,154,85,155,86,156,23,159,24,160,68,161,65,162,62,164,55,189,54,191,27,199,28,200},new int[]{-50,97,-51,126,-52,127,-53,130,-54,135,-55,138,-56,188,-57,144,-58,112,-59,113,-60,145,-39,157,-40,193});
    states[97] = new State(new int[]{66,98,67,-161,64,-161,63,-161,69,-161,49,-161,50,-161,57,-161,48,-161,61,-161,59,-161});
    states[98] = new State(new int[]{56,146,90,152,87,153,88,154,85,155,86,156,23,159,24,160,68,161,65,162,62,164,55,189,54,191,27,199,28,200},new int[]{-51,99,-52,127,-53,130,-54,135,-55,138,-56,188,-57,144,-58,112,-59,113,-60,145,-39,157,-40,193});
    states[99] = new State(new int[]{55,100,66,-163,67,-163,64,-163,63,-163,69,-163,49,-163,50,-163,57,-163,48,-163,61,-163,59,-163});
    states[100] = new State(new int[]{56,146,90,152,87,153,88,154,85,155,86,156,23,159,24,160,68,161,65,162,62,164,55,189,54,191,27,199,28,200},new int[]{-52,101,-53,130,-54,135,-55,138,-56,188,-57,144,-58,112,-59,113,-60,145,-39,157,-40,193});
    states[101] = new State(new int[]{29,128,30,129,55,-165,66,-165,67,-165,64,-165,63,-165,69,-165,49,-165,50,-165,57,-165,48,-165,61,-165,59,-165},new int[]{-35,102});
    states[102] = new State(new int[]{56,146,90,152,87,153,88,154,85,155,86,156,23,159,24,160,68,161,65,162,62,164,55,189,54,191,27,199,28,200},new int[]{-53,103,-54,135,-55,138,-56,188,-57,144,-58,112,-59,113,-60,145,-39,157,-40,193});
    states[103] = new State(new int[]{31,131,32,132,33,133,34,134,29,-167,30,-167,55,-167,66,-167,67,-167,64,-167,63,-167,69,-167,49,-167,50,-167,57,-167,48,-167,61,-167,59,-167},new int[]{-36,104});
    states[104] = new State(new int[]{56,146,90,152,87,153,88,154,85,155,86,156,23,159,24,160,68,161,65,162,62,164,55,189,54,191,27,199,28,200},new int[]{-54,105,-55,138,-56,188,-57,144,-58,112,-59,113,-60,145,-39,157,-40,193});
    states[105] = new State(new int[]{35,136,36,137,31,-171,32,-171,33,-171,34,-171,29,-171,30,-171,55,-171,66,-171,67,-171,64,-171,63,-171,69,-171,49,-171,50,-171,57,-171,48,-171,61,-171,59,-171},new int[]{-37,106});
    states[106] = new State(new int[]{56,146,90,152,87,153,88,154,85,155,86,156,23,159,24,160,68,161,65,162,62,164,55,189,54,191,27,199,28,200},new int[]{-55,107,-56,188,-57,144,-58,112,-59,113,-60,145,-39,157,-40,193});
    states[107] = new State(new int[]{23,108,24,139,35,-177,36,-177,31,-177,32,-177,33,-177,34,-177,29,-177,30,-177,55,-177,66,-177,67,-177,64,-177,63,-177,69,-177,49,-177,50,-177,57,-177,48,-177,61,-177,59,-177});
    states[108] = new State(new int[]{56,146,90,152,87,153,88,154,85,155,86,156,23,159,24,160,68,161,65,162,62,164,55,189,54,191,27,199,28,200},new int[]{-56,109,-57,144,-58,112,-59,113,-60,145,-39,157,-40,193});
    states[109] = new State(new int[]{54,141,25,142,26,143,23,-181,24,-181,35,-181,36,-181,31,-181,32,-181,33,-181,34,-181,29,-181,30,-181,55,-181,66,-181,67,-181,64,-181,63,-181,69,-181,49,-181,50,-181,57,-181,48,-181,61,-181,59,-181},new int[]{-38,110});
    states[110] = new State(new int[]{56,146,90,152,87,153,88,154,85,155,86,156,23,159,24,160,68,161,65,162,62,164,55,189,54,191,27,199,28,200},new int[]{-57,111,-58,112,-59,113,-60,145,-39,157,-40,193});
    states[111] = new State(-184);
    states[112] = new State(-188);
    states[113] = new State(new int[]{52,115,53,117,60,119,27,199,28,200,37,-193,38,-193,39,-193,40,-193,41,-193,42,-193,45,-193,46,-193,47,-193,43,-193,44,-193,54,-193,25,-193,26,-193,23,-193,24,-193,35,-193,36,-193,31,-193,32,-193,33,-193,34,-193,29,-193,30,-193,55,-193,66,-193,67,-193,64,-193,63,-193,69,-193,49,-193,50,-193,57,-193,48,-193,61,-193,59,-193,56,-211},new int[]{-40,114,-85,323});
    states[114] = new State(-207);
    states[115] = new State(new int[]{87,116});
    states[116] = new State(-208);
    states[117] = new State(new int[]{87,118});
    states[118] = new State(-209);
    states[119] = new State(new int[]{56,146,90,152,87,153,88,154,85,155,86,156,23,159,24,160,68,161,65,162,62,164,55,189,54,191,27,199,28,200},new int[]{-44,120,-45,122,-46,90,-47,91,-48,123,-49,124,-50,125,-51,126,-52,127,-53,130,-54,135,-55,138,-56,188,-57,144,-58,196,-59,113,-60,145,-39,157,-40,193});
    states[120] = new State(new int[]{61,121,49,88});
    states[121] = new State(-210);
    states[122] = new State(-136);
    states[123] = new State(new int[]{64,94,63,-156,69,-156,49,-156,50,-156,57,-156,48,-156,61,-156,59,-156});
    states[124] = new State(new int[]{67,96,64,-158,63,-158,69,-158,49,-158,50,-158,57,-158,48,-158,61,-158,59,-158});
    states[125] = new State(new int[]{66,98,67,-160,64,-160,63,-160,69,-160,49,-160,50,-160,57,-160,48,-160,61,-160,59,-160});
    states[126] = new State(new int[]{55,100,66,-162,67,-162,64,-162,63,-162,69,-162,49,-162,50,-162,57,-162,48,-162,61,-162,59,-162});
    states[127] = new State(new int[]{29,128,30,129,55,-164,66,-164,67,-164,64,-164,63,-164,69,-164,49,-164,50,-164,57,-164,48,-164,61,-164,59,-164},new int[]{-35,102});
    states[128] = new State(-168);
    states[129] = new State(-169);
    states[130] = new State(new int[]{31,131,32,132,33,133,34,134,29,-166,30,-166,55,-166,66,-166,67,-166,64,-166,63,-166,69,-166,49,-166,50,-166,57,-166,48,-166,61,-166,59,-166},new int[]{-36,104});
    states[131] = new State(-172);
    states[132] = new State(-173);
    states[133] = new State(-174);
    states[134] = new State(-175);
    states[135] = new State(new int[]{35,136,36,137,31,-170,32,-170,33,-170,34,-170,29,-170,30,-170,55,-170,66,-170,67,-170,64,-170,63,-170,69,-170,49,-170,50,-170,57,-170,48,-170,61,-170,59,-170},new int[]{-37,106});
    states[136] = new State(-178);
    states[137] = new State(-179);
    states[138] = new State(new int[]{23,108,24,139,35,-176,36,-176,31,-176,32,-176,33,-176,34,-176,29,-176,30,-176,55,-176,66,-176,67,-176,64,-176,63,-176,69,-176,49,-176,50,-176,57,-176,48,-176,61,-176,59,-176});
    states[139] = new State(new int[]{56,146,90,152,87,153,88,154,85,155,86,156,23,159,24,160,68,161,65,162,62,164,55,189,54,191,27,199,28,200},new int[]{-56,140,-57,144,-58,112,-59,113,-60,145,-39,157,-40,193});
    states[140] = new State(new int[]{54,141,25,142,26,143,23,-182,24,-182,35,-182,36,-182,31,-182,32,-182,33,-182,34,-182,29,-182,30,-182,55,-182,66,-182,67,-182,64,-182,63,-182,69,-182,49,-182,50,-182,57,-182,48,-182,61,-182,59,-182},new int[]{-38,110});
    states[141] = new State(-185);
    states[142] = new State(-186);
    states[143] = new State(-187);
    states[144] = new State(-183);
    states[145] = new State(-206);
    states[146] = new State(new int[]{56,146,90,152,87,153,88,154,85,155,86,156,23,159,24,160,68,161,65,162,62,164,55,189,54,191,27,199,28,200,9,223,10,224,4,225,5,226,6,227,7,228,8,229,19,230,13,231,14,232,15,233,16,234,17,235,18,236,11,237,12,238,21,249,22,250,20,252,89,265},new int[]{-44,147,-31,149,-45,122,-46,90,-47,91,-48,123,-49,124,-50,125,-51,126,-52,127,-53,130,-54,135,-55,138,-56,188,-57,144,-58,196,-59,113,-60,145,-39,157,-40,193,-3,169,-1,221,-5,239,-6,240,-7,251});
    states[147] = new State(new int[]{57,148,49,88});
    states[148] = new State(-217);
    states[149] = new State(new int[]{57,150});
    states[150] = new State(new int[]{56,146,90,152,87,153,88,154,85,155,86,156,23,159,24,160,68,161,65,162,62,164,55,189,54,191,27,199,28,200},new int[]{-57,151,-58,112,-59,113,-60,145,-39,157,-40,193});
    states[151] = new State(-189);
    states[152] = new State(-218);
    states[153] = new State(-219);
    states[154] = new State(-220);
    states[155] = new State(-221);
    states[156] = new State(-222);
    states[157] = new State(new int[]{56,146,90,152,87,153,88,154,85,155,86,156,23,159,24,160,68,161,65,162,62,164,55,189,54,191,27,199,28,200},new int[]{-57,158,-58,112,-59,113,-60,145,-39,157,-40,193});
    states[158] = new State(-194);
    states[159] = new State(-201);
    states[160] = new State(-202);
    states[161] = new State(-203);
    states[162] = new State(new int[]{56,146,90,152,87,153,88,154,85,155,86,156,23,159,24,160,68,161,65,162,62,164,55,189,54,191,27,199,28,200},new int[]{-57,163,-58,112,-59,113,-60,145,-39,157,-40,193});
    states[163] = new State(-195);
    states[164] = new State(new int[]{56,166,90,152,87,153,88,154,85,155,86,156,23,159,24,160,68,161,65,162,62,164,55,189,54,191,27,199,28,200},new int[]{-58,165,-59,113,-60,145,-39,157,-40,193});
    states[165] = new State(-196);
    states[166] = new State(new int[]{9,223,10,224,4,225,5,226,6,227,7,228,8,229,19,230,13,231,14,232,15,233,16,234,17,235,18,236,11,237,12,238,21,249,22,250,20,252,89,265,56,146,90,152,87,153,88,154,85,155,86,156,23,159,24,160,68,161,65,162,62,164,55,189,54,191,27,199,28,200},new int[]{-31,167,-44,147,-3,169,-1,221,-5,239,-6,240,-7,251,-45,122,-46,90,-47,91,-48,123,-49,124,-50,125,-51,126,-52,127,-53,130,-54,135,-55,138,-56,188,-57,144,-58,196,-59,113,-60,145,-39,157,-40,193});
    states[167] = new State(new int[]{57,168});
    states[168] = new State(-197);
    states[169] = new State(new int[]{57,-190,54,-191,56,-191,60,-191},new int[]{-84,170});
    states[170] = new State(new int[]{54,174,56,-62,60,-62},new int[]{-32,171,-19,172,-20,180,-18,181});
    states[171] = new State(-192);
    states[172] = new State(new int[]{54,174,57,-97,49,-97,56,-63,60,-63,87,-63},new int[]{-20,173});
    states[173] = new State(-65);
    states[174] = new State(-67,new int[]{-21,175});
    states[175] = new State(new int[]{9,177,54,-66,87,-66,56,-66,57,-66,60,-66,49,-66},new int[]{-22,176});
    states[176] = new State(-68);
    states[177] = new State(-69,new int[]{-77,178});
    states[178] = new State(new int[]{10,179});
    states[179] = new State(-70);
    states[180] = new State(-64);
    states[181] = new State(new int[]{56,322,60,306},new int[]{-33,182});
    states[182] = new State(new int[]{60,183,56,212,57,-98,49,-98});
    states[183] = new State(new int[]{56,146,90,152,87,153,88,154,85,155,86,156,23,159,24,160,68,161,65,162,62,164,55,189,54,191,27,199,28,200,61,-153},new int[]{-41,184,-42,186,-46,187,-47,91,-48,123,-49,124,-50,125,-51,126,-52,127,-53,130,-54,135,-55,138,-56,188,-57,144,-58,112,-59,113,-60,145,-39,157,-40,193});
    states[184] = new State(new int[]{61,185});
    states[185] = new State(-101);
    states[186] = new State(-154);
    states[187] = new State(-155);
    states[188] = new State(new int[]{54,141,25,142,26,143,23,-180,24,-180,35,-180,36,-180,31,-180,32,-180,33,-180,34,-180,29,-180,30,-180,55,-180,66,-180,67,-180,64,-180,63,-180,69,-180,49,-180,50,-180,57,-180,48,-180,61,-180,59,-180},new int[]{-38,110});
    states[189] = new State(new int[]{56,146,90,152,87,153,88,154,85,155,86,156,23,159,24,160,68,161,65,162,62,164,55,189,54,191,27,199,28,200},new int[]{-57,190,-58,112,-59,113,-60,145,-39,157,-40,193});
    states[190] = new State(-198);
    states[191] = new State(new int[]{56,146,90,152,87,153,88,154,85,155,86,156,23,159,24,160,68,161,65,162,62,164,55,189,54,191,27,199,28,200},new int[]{-57,192,-58,112,-59,113,-60,145,-39,157,-40,193});
    states[192] = new State(-199);
    states[193] = new State(new int[]{56,195,90,152,87,153,88,154,85,155,86,156,23,159,24,160,68,161,65,162,62,164,55,189,54,191,27,199,28,200},new int[]{-58,194,-59,113,-60,145,-39,157,-40,193});
    states[194] = new State(-200);
    states[195] = new State(new int[]{56,146,90,152,87,153,88,154,85,155,86,156,23,159,24,160,68,161,65,162,62,164,55,189,54,191,27,199,28,200},new int[]{-44,147,-45,122,-46,90,-47,91,-48,123,-49,124,-50,125,-51,126,-52,127,-53,130,-54,135,-55,138,-56,188,-57,144,-58,196,-59,113,-60,145,-39,157,-40,193});
    states[196] = new State(new int[]{37,201,38,202,39,203,40,204,41,205,42,206,45,207,46,208,47,209,43,210,44,211,54,-188,25,-188,26,-188,23,-188,24,-188,35,-188,36,-188,31,-188,32,-188,33,-188,34,-188,29,-188,30,-188,55,-188,66,-188,67,-188,64,-188,63,-188,69,-188,49,-188,50,-188,57,-188,61,-188,48,-188,59,-188},new int[]{-34,197});
    states[197] = new State(new int[]{56,146,90,152,87,153,88,154,85,155,86,156,23,159,24,160,68,161,65,162,62,164,55,189,54,191,27,199,28,200},new int[]{-45,198,-46,90,-47,91,-48,123,-49,124,-50,125,-51,126,-52,127,-53,130,-54,135,-55,138,-56,188,-57,144,-58,196,-59,113,-60,145,-39,157,-40,193});
    states[198] = new State(-139);
    states[199] = new State(-204);
    states[200] = new State(-205);
    states[201] = new State(-140);
    states[202] = new State(-141);
    states[203] = new State(-142);
    states[204] = new State(-143);
    states[205] = new State(-144);
    states[206] = new State(-145);
    states[207] = new State(-146);
    states[208] = new State(-147);
    states[209] = new State(-148);
    states[210] = new State(-149);
    states[211] = new State(-150);
    states[212] = new State(new int[]{57,-76,9,-80,10,-80,4,-80,5,-80,6,-80,7,-80,8,-80,19,-80,13,-80,14,-80,15,-80,16,-80,17,-80,18,-80,11,-80,12,-80,21,-80,22,-80,20,-80,89,-80},new int[]{-23,213,-24,215,-25,216,-78,292});
    states[213] = new State(new int[]{57,214});
    states[214] = new State(-103);
    states[215] = new State(-77);
    states[216] = new State(new int[]{49,217,57,-78});
    states[217] = new State(new int[]{51,321,9,-82,10,-82,4,-82,5,-82,6,-82,7,-82,8,-82,19,-82,13,-82,14,-82,15,-82,16,-82,17,-82,18,-82,11,-82,12,-82,21,-82,22,-82,20,-82,89,-82},new int[]{-79,218});
    states[218] = new State(new int[]{9,223,10,224,4,225,5,226,6,227,7,228,8,229,19,230,13,231,14,232,15,233,16,234,17,235,18,236,11,237,12,238,21,249,22,250,20,252,89,265},new int[]{-26,219,-3,220,-1,221,-5,239,-6,240,-7,251,-2,294});
    states[219] = new State(-83);
    states[220] = new State(new int[]{49,-84,57,-84,54,-16,87,-16,56,-16,60,-16});
    states[221] = new State(new int[]{9,223,10,224,4,225,5,226,6,227,7,228,8,229,19,230,13,231,14,232,15,233,16,234,17,235,18,236,11,237,12,238,21,249,22,250,20,252,89,265,50,-17,54,-17,87,-17,56,-17,48,-17,60,-17,57,-17,49,-17},new int[]{-3,222,-1,221,-5,239,-6,240,-7,251});
    states[222] = new State(-18);
    states[223] = new State(-19);
    states[224] = new State(-20);
    states[225] = new State(-21);
    states[226] = new State(-22);
    states[227] = new State(-23);
    states[228] = new State(-24);
    states[229] = new State(-25);
    states[230] = new State(-26);
    states[231] = new State(-27);
    states[232] = new State(-28);
    states[233] = new State(-29);
    states[234] = new State(-30);
    states[235] = new State(-31);
    states[236] = new State(-32);
    states[237] = new State(-33);
    states[238] = new State(-34);
    states[239] = new State(-35);
    states[240] = new State(new int[]{87,320,58,-43},new int[]{-4,241});
    states[241] = new State(-38,new int[]{-75,242});
    states[242] = new State(new int[]{58,243});
    states[243] = new State(new int[]{9,223,10,224,4,225,5,226,6,227,7,228,8,229,19,230,13,231,14,232,15,233,16,234,17,235,18,236,11,237,12,238,21,249,22,250,20,252,89,265},new int[]{-12,244,-11,319,-3,247,-1,221,-5,239,-6,240,-7,251,-2,266});
    states[244] = new State(new int[]{59,245,9,223,10,224,4,225,5,226,6,227,7,228,8,229,19,230,13,231,14,232,15,233,16,234,17,235,18,236,11,237,12,238,21,249,22,250,20,252,89,265},new int[]{-11,246,-3,247,-1,221,-5,239,-6,240,-7,251,-2,266});
    states[245] = new State(-39);
    states[246] = new State(-46);
    states[247] = new State(new int[]{50,248,54,-16,87,-16,56,-16,48,-16});
    states[248] = new State(-14);
    states[249] = new State(-41);
    states[250] = new State(-42);
    states[251] = new State(-36);
    states[252] = new State(new int[]{87,264,58,-43},new int[]{-4,253});
    states[253] = new State(-47,new int[]{-76,254});
    states[254] = new State(new int[]{58,255});
    states[255] = new State(new int[]{87,260},new int[]{-8,256,-9,263});
    states[256] = new State(new int[]{59,257,49,258});
    states[257] = new State(-48);
    states[258] = new State(new int[]{87,260},new int[]{-9,259});
    states[259] = new State(-51);
    states[260] = new State(new int[]{37,261,59,-52,49,-52});
    states[261] = new State(new int[]{56,146,90,152,87,153,88,154,85,155,86,156,23,159,24,160,68,161,65,162,62,164,55,189,54,191,27,199,28,200},new int[]{-42,262,-46,187,-47,91,-48,123,-49,124,-50,125,-51,126,-52,127,-53,130,-54,135,-55,138,-56,188,-57,144,-58,112,-59,113,-60,145,-39,157,-40,193});
    states[262] = new State(-53);
    states[263] = new State(-50);
    states[264] = new State(new int[]{9,-49,10,-49,4,-49,5,-49,6,-49,7,-49,8,-49,19,-49,13,-49,14,-49,15,-49,16,-49,17,-49,18,-49,11,-49,12,-49,21,-49,22,-49,20,-49,89,-49,50,-49,54,-49,87,-49,56,-49,48,-49,60,-49,57,-49,49,-49,58,-44});
    states[265] = new State(-37);
    states[266] = new State(new int[]{54,174,87,-62,56,-62,48,-59},new int[]{-10,267,-14,318,-16,271,-18,282,-19,314,-20,180,-15,315});
    states[267] = new State(new int[]{50,268,49,269});
    states[268] = new State(-15);
    states[269] = new State(new int[]{54,174,87,-62,56,-62,48,-59},new int[]{-14,270,-16,271,-18,282,-19,314,-20,180,-15,315});
    states[270] = new State(-55);
    states[271] = new State(new int[]{37,272,50,-56,49,-56,48,-60});
    states[272] = new State(new int[]{56,146,90,152,87,153,88,154,85,155,86,156,23,159,24,160,68,161,65,162,62,164,55,189,54,191,27,199,28,200,58,275},new int[]{-30,273,-45,274,-46,90,-47,91,-48,123,-49,124,-50,125,-51,126,-52,127,-53,130,-54,135,-55,138,-56,188,-57,144,-58,196,-59,113,-60,145,-39,157,-40,193});
    states[273] = new State(-57);
    states[274] = new State(-91);
    states[275] = new State(new int[]{56,146,90,152,87,153,88,154,85,155,86,156,23,159,24,160,68,161,65,162,62,164,55,189,54,191,27,199,28,200,58,275},new int[]{-29,276,-30,281,-45,274,-46,90,-47,91,-48,123,-49,124,-50,125,-51,126,-52,127,-53,130,-54,135,-55,138,-56,188,-57,144,-58,196,-59,113,-60,145,-39,157,-40,193});
    states[276] = new State(new int[]{49,279,59,-93},new int[]{-80,277});
    states[277] = new State(new int[]{59,278});
    states[278] = new State(-92);
    states[279] = new State(new int[]{56,146,90,152,87,153,88,154,85,155,86,156,23,159,24,160,68,161,65,162,62,164,55,189,54,191,27,199,28,200,58,275,59,-94},new int[]{-30,280,-45,274,-46,90,-47,91,-48,123,-49,124,-50,125,-51,126,-52,127,-53,130,-54,135,-55,138,-56,188,-57,144,-58,196,-59,113,-60,145,-39,157,-40,193});
    states[280] = new State(-96);
    states[281] = new State(-95);
    states[282] = new State(new int[]{87,298,56,313},new int[]{-17,283});
    states[283] = new State(new int[]{60,284,56,287,9,-61,10,-61,4,-61,5,-61,6,-61,7,-61,8,-61,19,-61,13,-61,14,-61,15,-61,16,-61,17,-61,18,-61,11,-61,12,-61,21,-61,22,-61,20,-61,89,-61,58,-61,37,-61,50,-61,49,-61,48,-61,57,-61});
    states[284] = new State(new int[]{56,146,90,152,87,153,88,154,85,155,86,156,23,159,24,160,68,161,65,162,62,164,55,189,54,191,27,199,28,200,61,-153},new int[]{-41,285,-42,186,-46,187,-47,91,-48,123,-49,124,-50,125,-51,126,-52,127,-53,130,-54,135,-55,138,-56,188,-57,144,-58,112,-59,113,-60,145,-39,157,-40,193});
    states[285] = new State(new int[]{61,286});
    states[286] = new State(-73);
    states[287] = new State(new int[]{87,312,9,-80,10,-80,4,-80,5,-80,6,-80,7,-80,8,-80,19,-80,13,-80,14,-80,15,-80,16,-80,17,-80,18,-80,11,-80,12,-80,21,-80,22,-80,20,-80,89,-80,57,-87},new int[]{-24,288,-27,290,-25,216,-78,292,-28,309});
    states[288] = new State(new int[]{57,289});
    states[289] = new State(-74);
    states[290] = new State(new int[]{57,291});
    states[291] = new State(-75);
    states[292] = new State(new int[]{9,223,10,224,4,225,5,226,6,227,7,228,8,229,19,230,13,231,14,232,15,233,16,234,17,235,18,236,11,237,12,238,21,249,22,250,20,252,89,265},new int[]{-26,293,-3,220,-1,221,-5,239,-6,240,-7,251,-2,294});
    states[293] = new State(-81);
    states[294] = new State(new int[]{54,174,87,-62,56,-62,60,-62},new int[]{-16,295,-32,296,-18,297,-19,172,-20,180});
    states[295] = new State(-85);
    states[296] = new State(-86);
    states[297] = new State(new int[]{87,298,56,299,60,306},new int[]{-17,283,-33,182});
    states[298] = new State(-71);
    states[299] = new State(new int[]{54,174,87,-62,56,-62,60,-62,57,-76,9,-80,10,-80,4,-80,5,-80,6,-80,7,-80,8,-80,19,-80,13,-80,14,-80,15,-80,16,-80,17,-80,18,-80,11,-80,12,-80,21,-80,22,-80,20,-80,89,-80},new int[]{-16,300,-32,302,-23,304,-18,297,-19,172,-20,180,-24,215,-25,216,-78,292});
    states[300] = new State(new int[]{57,301});
    states[301] = new State(-72);
    states[302] = new State(new int[]{57,303});
    states[303] = new State(-99);
    states[304] = new State(new int[]{57,305});
    states[305] = new State(-102);
    states[306] = new State(new int[]{56,146,90,152,87,153,88,154,85,155,86,156,23,159,24,160,68,161,65,162,62,164,55,189,54,191,27,199,28,200,61,-153},new int[]{-41,307,-42,186,-46,187,-47,91,-48,123,-49,124,-50,125,-51,126,-52,127,-53,130,-54,135,-55,138,-56,188,-57,144,-58,112,-59,113,-60,145,-39,157,-40,193});
    states[307] = new State(new int[]{61,308});
    states[308] = new State(-100);
    states[309] = new State(new int[]{49,310,57,-88});
    states[310] = new State(new int[]{87,311});
    states[311] = new State(-90);
    states[312] = new State(-89);
    states[313] = new State(new int[]{54,174,87,-62,56,-62},new int[]{-16,300,-18,282,-19,314,-20,180});
    states[314] = new State(new int[]{54,174,87,-63,56,-63},new int[]{-20,173});
    states[315] = new State(new int[]{48,316});
    states[316] = new State(new int[]{56,146,90,152,87,153,88,154,85,155,86,156,23,159,24,160,68,161,65,162,62,164,55,189,54,191,27,199,28,200},new int[]{-42,317,-46,187,-47,91,-48,123,-49,124,-50,125,-51,126,-52,127,-53,130,-54,135,-55,138,-56,188,-57,144,-58,112,-59,113,-60,145,-39,157,-40,193});
    states[317] = new State(-58);
    states[318] = new State(-54);
    states[319] = new State(-45);
    states[320] = new State(new int[]{9,-40,10,-40,4,-40,5,-40,6,-40,7,-40,8,-40,19,-40,13,-40,14,-40,15,-40,16,-40,17,-40,18,-40,11,-40,12,-40,21,-40,22,-40,20,-40,89,-40,50,-40,54,-40,87,-40,56,-40,48,-40,60,-40,57,-40,49,-40,58,-44});
    states[321] = new State(-79);
    states[322] = new State(new int[]{54,174,56,-62,60,-62,57,-76,9,-80,10,-80,4,-80,5,-80,6,-80,7,-80,8,-80,19,-80,13,-80,14,-80,15,-80,16,-80,17,-80,18,-80,11,-80,12,-80,21,-80,22,-80,20,-80,89,-80},new int[]{-32,302,-23,304,-19,172,-20,180,-18,181,-24,215,-25,216,-78,292});
    states[323] = new State(new int[]{56,324});
    states[324] = new State(new int[]{56,146,90,152,87,153,88,154,85,155,86,156,23,159,24,160,68,161,65,162,62,164,55,189,54,191,27,199,28,200,57,-213},new int[]{-65,325,-66,327,-45,330,-46,90,-47,91,-48,123,-49,124,-50,125,-51,126,-52,127,-53,130,-54,135,-55,138,-56,188,-57,144,-58,196,-59,113,-60,145,-39,157,-40,193});
    states[325] = new State(new int[]{57,326});
    states[326] = new State(-212);
    states[327] = new State(new int[]{49,328,57,-214});
    states[328] = new State(new int[]{56,146,90,152,87,153,88,154,85,155,86,156,23,159,24,160,68,161,65,162,62,164,55,189,54,191,27,199,28,200},new int[]{-45,329,-46,90,-47,91,-48,123,-49,124,-50,125,-51,126,-52,127,-53,130,-54,135,-55,138,-56,188,-57,144,-58,196,-59,113,-60,145,-39,157,-40,193});
    states[329] = new State(-216);
    states[330] = new State(-215);
    states[331] = new State(new int[]{56,146,90,152,87,153,88,154,85,155,86,156,23,159,24,160,68,161,65,162,62,164,55,189,54,191,27,199,28,200},new int[]{-44,332,-45,122,-46,90,-47,91,-48,123,-49,124,-50,125,-51,126,-52,127,-53,130,-54,135,-55,138,-56,188,-57,144,-58,196,-59,113,-60,145,-39,157,-40,193});
    states[332] = new State(new int[]{48,333,49,88});
    states[333] = new State(new int[]{56,146,90,152,87,153,88,154,85,155,86,156,23,159,24,160,68,161,65,162,62,164,55,189,54,191,27,199,28,200},new int[]{-46,334,-47,91,-48,123,-49,124,-50,125,-51,126,-52,127,-53,130,-54,135,-55,138,-56,188,-57,144,-58,112,-59,113,-60,145,-39,157,-40,193});
    states[334] = new State(-152);
    states[335] = new State(-109,new int[]{-82,336});
    states[336] = new State(new int[]{70,16,72,25,73,32,76,37,75,44,87,55,77,335,74,344,78,375,79,377,58,379,81,384,80,387,56,146,90,152,88,154,85,155,86,156,23,159,24,160,68,161,65,162,62,164,55,189,54,191,27,199,28,200,83,392,82,397,84,402,50,-134},new int[]{-62,337,-64,15,-63,343,-43,390,-44,87,-45,122,-46,90,-47,91,-48,123,-49,124,-50,125,-51,126,-52,127,-53,130,-54,135,-55,138,-56,188,-57,144,-58,196,-59,113,-60,145,-39,157,-40,193});
    states[337] = new State(new int[]{76,338});
    states[338] = new State(new int[]{56,339});
    states[339] = new State(new int[]{56,146,90,152,87,153,88,154,85,155,86,156,23,159,24,160,68,161,65,162,62,164,55,189,54,191,27,199,28,200},new int[]{-44,340,-45,122,-46,90,-47,91,-48,123,-49,124,-50,125,-51,126,-52,127,-53,130,-54,135,-55,138,-56,188,-57,144,-58,196,-59,113,-60,145,-39,157,-40,193});
    states[340] = new State(new int[]{57,341,49,88});
    states[341] = new State(new int[]{50,342});
    states[342] = new State(-120);
    states[343] = new State(-107);
    states[344] = new State(new int[]{48,345});
    states[345] = new State(new int[]{70,347,72,353,76,358,77,335,75,363,73,372,74,344,78,375,79,377,58,379,81,384,80,387,56,146,90,152,87,153,88,154,85,155,86,156,23,159,24,160,68,161,65,162,62,164,55,189,54,191,27,199,28,200,83,392,82,397,84,402,50,-134},new int[]{-63,346,-43,390,-44,87,-45,122,-46,90,-47,91,-48,123,-49,124,-50,125,-51,126,-52,127,-53,130,-54,135,-55,138,-56,188,-57,144,-58,196,-59,113,-60,145,-39,157,-40,193});
    states[346] = new State(-123);
    states[347] = new State(new int[]{56,348});
    states[348] = new State(new int[]{56,146,90,152,87,153,88,154,85,155,86,156,23,159,24,160,68,161,65,162,62,164,55,189,54,191,27,199,28,200},new int[]{-44,349,-45,122,-46,90,-47,91,-48,123,-49,124,-50,125,-51,126,-52,127,-53,130,-54,135,-55,138,-56,188,-57,144,-58,196,-59,113,-60,145,-39,157,-40,193});
    states[349] = new State(new int[]{57,350,49,88});
    states[350] = new State(new int[]{70,347,72,353,76,358,77,335,75,363,73,372,74,344,78,375,79,377,58,379,81,384,80,387,56,146,90,152,87,153,88,154,85,155,86,156,23,159,24,160,68,161,65,162,62,164,55,189,54,191,27,199,28,200,83,392,82,397,84,402,50,-134},new int[]{-63,351,-43,390,-44,87,-45,122,-46,90,-47,91,-48,123,-49,124,-50,125,-51,126,-52,127,-53,130,-54,135,-55,138,-56,188,-57,144,-58,196,-59,113,-60,145,-39,157,-40,193});
    states[351] = new State(new int[]{71,352});
    states[352] = new State(new int[]{70,347,72,353,76,358,77,335,75,363,73,372,74,344,78,375,79,377,58,379,81,384,80,387,56,146,90,152,87,153,88,154,85,155,86,156,23,159,24,160,68,161,65,162,62,164,55,189,54,191,27,199,28,200,83,392,82,397,84,402,50,-134},new int[]{-63,24,-43,390,-44,87,-45,122,-46,90,-47,91,-48,123,-49,124,-50,125,-51,126,-52,127,-53,130,-54,135,-55,138,-56,188,-57,144,-58,196,-59,113,-60,145,-39,157,-40,193});
    states[353] = new State(-108,new int[]{-81,354});
    states[354] = new State(new int[]{56,355});
    states[355] = new State(new int[]{56,146,90,152,87,153,88,154,85,155,86,156,23,159,24,160,68,161,65,162,62,164,55,189,54,191,27,199,28,200},new int[]{-44,356,-45,122,-46,90,-47,91,-48,123,-49,124,-50,125,-51,126,-52,127,-53,130,-54,135,-55,138,-56,188,-57,144,-58,196,-59,113,-60,145,-39,157,-40,193});
    states[356] = new State(new int[]{57,357,49,88});
    states[357] = new State(new int[]{70,347,72,353,76,358,77,335,75,363,73,372,74,344,78,375,79,377,58,379,81,384,80,387,56,146,90,152,87,153,88,154,85,155,86,156,23,159,24,160,68,161,65,162,62,164,55,189,54,191,27,199,28,200,83,392,82,397,84,402,50,-134},new int[]{-63,31,-43,390,-44,87,-45,122,-46,90,-47,91,-48,123,-49,124,-50,125,-51,126,-52,127,-53,130,-54,135,-55,138,-56,188,-57,144,-58,196,-59,113,-60,145,-39,157,-40,193});
    states[358] = new State(-109,new int[]{-82,359});
    states[359] = new State(new int[]{56,360});
    states[360] = new State(new int[]{56,146,90,152,87,153,88,154,85,155,86,156,23,159,24,160,68,161,65,162,62,164,55,189,54,191,27,199,28,200},new int[]{-44,361,-45,122,-46,90,-47,91,-48,123,-49,124,-50,125,-51,126,-52,127,-53,130,-54,135,-55,138,-56,188,-57,144,-58,196,-59,113,-60,145,-39,157,-40,193});
    states[361] = new State(new int[]{57,362,49,88});
    states[362] = new State(new int[]{70,347,72,353,76,358,77,335,75,363,73,372,74,344,78,375,79,377,58,379,81,384,80,387,56,146,90,152,87,153,88,154,85,155,86,156,23,159,24,160,68,161,65,162,62,164,55,189,54,191,27,199,28,200,83,392,82,397,84,402,50,-134},new int[]{-63,43,-43,390,-44,87,-45,122,-46,90,-47,91,-48,123,-49,124,-50,125,-51,126,-52,127,-53,130,-54,135,-55,138,-56,188,-57,144,-58,196,-59,113,-60,145,-39,157,-40,193});
    states[363] = new State(-109,new int[]{-82,364});
    states[364] = new State(new int[]{56,365});
    states[365] = new State(new int[]{56,146,90,152,87,153,88,154,85,155,86,156,23,159,24,160,68,161,65,162,62,164,55,189,54,191,27,199,28,200,50,-134},new int[]{-43,366,-44,87,-45,122,-46,90,-47,91,-48,123,-49,124,-50,125,-51,126,-52,127,-53,130,-54,135,-55,138,-56,188,-57,144,-58,196,-59,113,-60,145,-39,157,-40,193});
    states[366] = new State(new int[]{50,367});
    states[367] = new State(new int[]{56,146,90,152,87,153,88,154,85,155,86,156,23,159,24,160,68,161,65,162,62,164,55,189,54,191,27,199,28,200,50,-134},new int[]{-43,368,-44,87,-45,122,-46,90,-47,91,-48,123,-49,124,-50,125,-51,126,-52,127,-53,130,-54,135,-55,138,-56,188,-57,144,-58,196,-59,113,-60,145,-39,157,-40,193});
    states[368] = new State(new int[]{50,369});
    states[369] = new State(new int[]{56,146,90,152,87,153,88,154,85,155,86,156,23,159,24,160,68,161,65,162,62,164,55,189,54,191,27,199,28,200,57,-134},new int[]{-43,370,-44,87,-45,122,-46,90,-47,91,-48,123,-49,124,-50,125,-51,126,-52,127,-53,130,-54,135,-55,138,-56,188,-57,144,-58,196,-59,113,-60,145,-39,157,-40,193});
    states[370] = new State(new int[]{57,371});
    states[371] = new State(new int[]{70,347,72,353,76,358,77,335,75,363,73,372,74,344,78,375,79,377,58,379,81,384,80,387,56,146,90,152,87,153,88,154,85,155,86,156,23,159,24,160,68,161,65,162,62,164,55,189,54,191,27,199,28,200,83,392,82,397,84,402,50,-134},new int[]{-63,54,-43,390,-44,87,-45,122,-46,90,-47,91,-48,123,-49,124,-50,125,-51,126,-52,127,-53,130,-54,135,-55,138,-56,188,-57,144,-58,196,-59,113,-60,145,-39,157,-40,193});
    states[372] = new State(new int[]{56,146,90,152,87,153,88,154,85,155,86,156,23,159,24,160,68,161,65,162,62,164,55,189,54,191,27,199,28,200},new int[]{-42,373,-46,187,-47,91,-48,123,-49,124,-50,125,-51,126,-52,127,-53,130,-54,135,-55,138,-56,188,-57,144,-58,112,-59,113,-60,145,-39,157,-40,193});
    states[373] = new State(new int[]{48,374});
    states[374] = new State(new int[]{70,347,72,353,76,358,77,335,75,363,73,372,74,344,78,375,79,377,58,379,81,384,80,387,56,146,90,152,87,153,88,154,85,155,86,156,23,159,24,160,68,161,65,162,62,164,55,189,54,191,27,199,28,200,83,392,82,397,84,402,50,-134},new int[]{-63,36,-43,390,-44,87,-45,122,-46,90,-47,91,-48,123,-49,124,-50,125,-51,126,-52,127,-53,130,-54,135,-55,138,-56,188,-57,144,-58,196,-59,113,-60,145,-39,157,-40,193});
    states[375] = new State(new int[]{50,376});
    states[376] = new State(-124);
    states[377] = new State(new int[]{50,378});
    states[378] = new State(-125);
    states[379] = new State(-126,new int[]{-83,380});
    states[380] = new State(new int[]{9,223,10,224,4,225,5,226,6,227,7,228,8,229,19,230,13,231,14,232,15,233,16,234,17,235,18,236,11,237,12,238,21,249,22,250,20,252,89,265,59,-12,70,-12,72,-12,73,-12,76,-12,75,-12,87,-12,77,-12,74,-12,78,-12,79,-12,58,-12,81,-12,80,-12,56,-12,90,-12,88,-12,85,-12,86,-12,23,-12,24,-12,68,-12,65,-12,62,-12,55,-12,54,-12,27,-12,28,-12,83,-12,82,-12,84,-12,50,-12},new int[]{-13,381,-12,406,-11,319,-3,247,-1,221,-5,239,-6,240,-7,251,-2,266});
    states[381] = new State(-104,new int[]{-61,382});
    states[382] = new State(new int[]{59,383,70,16,72,25,73,32,76,37,75,44,87,55,77,335,74,344,78,375,79,377,58,379,81,384,80,387,56,146,90,152,88,154,85,155,86,156,23,159,24,160,68,161,65,162,62,164,55,189,54,191,27,199,28,200,83,392,82,397,84,402,50,-134},new int[]{-62,14,-64,15,-63,343,-43,390,-44,87,-45,122,-46,90,-47,91,-48,123,-49,124,-50,125,-51,126,-52,127,-53,130,-54,135,-55,138,-56,188,-57,144,-58,196,-59,113,-60,145,-39,157,-40,193});
    states[383] = new State(-127);
    states[384] = new State(new int[]{87,385});
    states[385] = new State(new int[]{50,386});
    states[386] = new State(-128);
    states[387] = new State(new int[]{56,146,90,152,87,153,88,154,85,155,86,156,23,159,24,160,68,161,65,162,62,164,55,189,54,191,27,199,28,200,50,-134},new int[]{-43,388,-44,87,-45,122,-46,90,-47,91,-48,123,-49,124,-50,125,-51,126,-52,127,-53,130,-54,135,-55,138,-56,188,-57,144,-58,196,-59,113,-60,145,-39,157,-40,193});
    states[388] = new State(new int[]{50,389});
    states[389] = new State(-129);
    states[390] = new State(new int[]{50,391});
    states[391] = new State(-130);
    states[392] = new State(new int[]{56,393});
    states[393] = new State(new int[]{88,394});
    states[394] = new State(new int[]{57,395});
    states[395] = new State(new int[]{50,396});
    states[396] = new State(-131);
    states[397] = new State(new int[]{56,398});
    states[398] = new State(new int[]{56,146,90,152,87,153,88,154,85,155,86,156,23,159,24,160,68,161,65,162,62,164,55,189,54,191,27,199,28,200},new int[]{-42,399,-46,187,-47,91,-48,123,-49,124,-50,125,-51,126,-52,127,-53,130,-54,135,-55,138,-56,188,-57,144,-58,112,-59,113,-60,145,-39,157,-40,193});
    states[399] = new State(new int[]{57,400});
    states[400] = new State(new int[]{50,401});
    states[401] = new State(-132);
    states[402] = new State(new int[]{56,403});
    states[403] = new State(new int[]{57,404});
    states[404] = new State(new int[]{50,405});
    states[405] = new State(-133);
    states[406] = new State(new int[]{9,223,10,224,4,225,5,226,6,227,7,228,8,229,19,230,13,231,14,232,15,233,16,234,17,235,18,236,11,237,12,238,21,249,22,250,20,252,89,265,58,-13,59,-13,70,-13,72,-13,73,-13,76,-13,75,-13,87,-13,77,-13,74,-13,78,-13,79,-13,81,-13,80,-13,56,-13,90,-13,88,-13,85,-13,86,-13,23,-13,24,-13,68,-13,65,-13,62,-13,55,-13,54,-13,27,-13,28,-13,83,-13,82,-13,84,-13,50,-13},new int[]{-11,246,-3,247,-1,221,-5,239,-6,240,-7,251,-2,266});
    states[407] = new State(-9,new int[]{-73,408});
    states[408] = new State(new int[]{9,223,10,224,4,225,5,226,6,227,7,228,8,229,19,230,13,231,14,232,15,233,16,234,17,235,18,236,11,237,12,238,21,249,22,250,20,252,89,265,58,-12},new int[]{-13,409,-12,406,-11,319,-3,247,-1,221,-5,239,-6,240,-7,251,-2,266});
    states[409] = new State(-10,new int[]{-74,410});
    states[410] = new State(new int[]{58,411});
    states[411] = new State(new int[]{9,223,10,224,4,225,5,226,6,227,7,228,8,229,19,230,13,231,14,232,15,233,16,234,17,235,18,236,11,237,12,238,21,249,22,250,20,252,89,265,59,-12,70,-12,72,-12,73,-12,76,-12,75,-12,87,-12,77,-12,74,-12,78,-12,79,-12,58,-12,81,-12,80,-12,56,-12,90,-12,88,-12,85,-12,86,-12,23,-12,24,-12,68,-12,65,-12,62,-12,55,-12,54,-12,27,-12,28,-12,83,-12,82,-12,84,-12,50,-12},new int[]{-13,412,-12,406,-11,319,-3,247,-1,221,-5,239,-6,240,-7,251,-2,266});
    states[412] = new State(-104,new int[]{-61,413});
    states[413] = new State(new int[]{59,414,70,16,72,25,73,32,76,37,75,44,87,55,77,335,74,344,78,375,79,377,58,379,81,384,80,387,56,146,90,152,88,154,85,155,86,156,23,159,24,160,68,161,65,162,62,164,55,189,54,191,27,199,28,200,83,392,82,397,84,402,50,-134},new int[]{-62,14,-64,15,-63,343,-43,390,-44,87,-45,122,-46,90,-47,91,-48,123,-49,124,-50,125,-51,126,-52,127,-53,130,-54,135,-55,138,-56,188,-57,144,-58,196,-59,113,-60,145,-39,157,-40,193});
    states[414] = new State(-11);
    states[415] = new State(-5);
    states[416] = new State(-2);

    for (int sNo = 0; sNo < states.Length; sNo++) states[sNo].number = sNo;

    rules[1] = new Rule(-68, new int[]{-67,3});
    rules[2] = new Rule(-67, new int[]{-69});
    rules[3] = new Rule(-67, new int[]{-67,-69});
    rules[4] = new Rule(-69, new int[]{-70});
    rules[5] = new Rule(-69, new int[]{-11});
    rules[6] = new Rule(-71, new int[]{});
    rules[7] = new Rule(-72, new int[]{});
    rules[8] = new Rule(-70, new int[]{-2,-16,-71,-13,-72,58,-13,-61,59});
    rules[9] = new Rule(-73, new int[]{});
    rules[10] = new Rule(-74, new int[]{});
    rules[11] = new Rule(-70, new int[]{-16,-73,-13,-74,58,-13,-61,59});
    rules[12] = new Rule(-13, new int[]{});
    rules[13] = new Rule(-13, new int[]{-12});
    rules[14] = new Rule(-11, new int[]{-3,50});
    rules[15] = new Rule(-11, new int[]{-2,-10,50});
    rules[16] = new Rule(-2, new int[]{-3});
    rules[17] = new Rule(-3, new int[]{-1});
    rules[18] = new Rule(-3, new int[]{-1,-3});
    rules[19] = new Rule(-1, new int[]{9});
    rules[20] = new Rule(-1, new int[]{10});
    rules[21] = new Rule(-1, new int[]{4});
    rules[22] = new Rule(-1, new int[]{5});
    rules[23] = new Rule(-1, new int[]{6});
    rules[24] = new Rule(-1, new int[]{7});
    rules[25] = new Rule(-1, new int[]{8});
    rules[26] = new Rule(-1, new int[]{19});
    rules[27] = new Rule(-1, new int[]{13});
    rules[28] = new Rule(-1, new int[]{14});
    rules[29] = new Rule(-1, new int[]{15});
    rules[30] = new Rule(-1, new int[]{16});
    rules[31] = new Rule(-1, new int[]{17});
    rules[32] = new Rule(-1, new int[]{18});
    rules[33] = new Rule(-1, new int[]{11});
    rules[34] = new Rule(-1, new int[]{12});
    rules[35] = new Rule(-1, new int[]{-5});
    rules[36] = new Rule(-1, new int[]{-7});
    rules[37] = new Rule(-1, new int[]{89});
    rules[38] = new Rule(-75, new int[]{});
    rules[39] = new Rule(-5, new int[]{-6,-4,-75,58,-12,59});
    rules[40] = new Rule(-5, new int[]{-6,87});
    rules[41] = new Rule(-6, new int[]{21});
    rules[42] = new Rule(-6, new int[]{22});
    rules[43] = new Rule(-4, new int[]{});
    rules[44] = new Rule(-4, new int[]{87});
    rules[45] = new Rule(-12, new int[]{-11});
    rules[46] = new Rule(-12, new int[]{-12,-11});
    rules[47] = new Rule(-76, new int[]{});
    rules[48] = new Rule(-7, new int[]{20,-4,-76,58,-8,59});
    rules[49] = new Rule(-7, new int[]{20,87});
    rules[50] = new Rule(-8, new int[]{-9});
    rules[51] = new Rule(-8, new int[]{-8,49,-9});
    rules[52] = new Rule(-9, new int[]{87});
    rules[53] = new Rule(-9, new int[]{87,37,-42});
    rules[54] = new Rule(-10, new int[]{-14});
    rules[55] = new Rule(-10, new int[]{-10,49,-14});
    rules[56] = new Rule(-14, new int[]{-16});
    rules[57] = new Rule(-14, new int[]{-16,37,-30});
    rules[58] = new Rule(-14, new int[]{-15,48,-42});
    rules[59] = new Rule(-15, new int[]{});
    rules[60] = new Rule(-15, new int[]{-16});
    rules[61] = new Rule(-16, new int[]{-18,-17});
    rules[62] = new Rule(-18, new int[]{});
    rules[63] = new Rule(-18, new int[]{-19});
    rules[64] = new Rule(-19, new int[]{-20});
    rules[65] = new Rule(-19, new int[]{-19,-20});
    rules[66] = new Rule(-20, new int[]{54,-21});
    rules[67] = new Rule(-21, new int[]{});
    rules[68] = new Rule(-21, new int[]{-21,-22});
    rules[69] = new Rule(-77, new int[]{});
    rules[70] = new Rule(-22, new int[]{9,-77,10});
    rules[71] = new Rule(-17, new int[]{87});
    rules[72] = new Rule(-17, new int[]{56,-16,57});
    rules[73] = new Rule(-17, new int[]{-17,60,-41,61});
    rules[74] = new Rule(-17, new int[]{-17,56,-24,57});
    rules[75] = new Rule(-17, new int[]{-17,56,-27,57});
    rules[76] = new Rule(-23, new int[]{});
    rules[77] = new Rule(-23, new int[]{-24});
    rules[78] = new Rule(-24, new int[]{-25});
    rules[79] = new Rule(-24, new int[]{-25,49,51});
    rules[80] = new Rule(-78, new int[]{});
    rules[81] = new Rule(-25, new int[]{-78,-26});
    rules[82] = new Rule(-79, new int[]{});
    rules[83] = new Rule(-25, new int[]{-25,49,-79,-26});
    rules[84] = new Rule(-26, new int[]{-3});
    rules[85] = new Rule(-26, new int[]{-2,-16});
    rules[86] = new Rule(-26, new int[]{-2,-32});
    rules[87] = new Rule(-27, new int[]{});
    rules[88] = new Rule(-27, new int[]{-28});
    rules[89] = new Rule(-28, new int[]{87});
    rules[90] = new Rule(-28, new int[]{-28,49,87});
    rules[91] = new Rule(-30, new int[]{-45});
    rules[92] = new Rule(-30, new int[]{58,-29,-80,59});
    rules[93] = new Rule(-80, new int[]{});
    rules[94] = new Rule(-80, new int[]{49});
    rules[95] = new Rule(-29, new int[]{-30});
    rules[96] = new Rule(-29, new int[]{-29,49,-30});
    rules[97] = new Rule(-32, new int[]{-19});
    rules[98] = new Rule(-32, new int[]{-18,-33});
    rules[99] = new Rule(-33, new int[]{56,-32,57});
    rules[100] = new Rule(-33, new int[]{60,-41,61});
    rules[101] = new Rule(-33, new int[]{-33,60,-41,61});
    rules[102] = new Rule(-33, new int[]{56,-23,57});
    rules[103] = new Rule(-33, new int[]{-33,56,-23,57});
    rules[104] = new Rule(-61, new int[]{});
    rules[105] = new Rule(-61, new int[]{-61,-62});
    rules[106] = new Rule(-62, new int[]{-64});
    rules[107] = new Rule(-62, new int[]{-63});
    rules[108] = new Rule(-81, new int[]{});
    rules[109] = new Rule(-82, new int[]{});
    rules[110] = new Rule(-64, new int[]{70,56,-44,57,-62});
    rules[111] = new Rule(-64, new int[]{70,56,-44,57,-63,71,-64});
    rules[112] = new Rule(-64, new int[]{72,-81,56,-44,57,-64});
    rules[113] = new Rule(-64, new int[]{73,-42,48,-64});
    rules[114] = new Rule(-64, new int[]{76,-82,56,-44,57,-64});
    rules[115] = new Rule(-64, new int[]{75,-82,56,-43,50,-43,50,-43,57,-64});
    rules[116] = new Rule(-64, new int[]{87,48,-64});
    rules[117] = new Rule(-63, new int[]{70,56,-44,57,-63,71,-63});
    rules[118] = new Rule(-63, new int[]{72,-81,56,-44,57,-63});
    rules[119] = new Rule(-63, new int[]{76,-82,56,-44,57,-63});
    rules[120] = new Rule(-63, new int[]{77,-82,-62,76,56,-44,57,50});
    rules[121] = new Rule(-63, new int[]{75,-82,56,-43,50,-43,50,-43,57,-63});
    rules[122] = new Rule(-63, new int[]{73,-42,48,-63});
    rules[123] = new Rule(-63, new int[]{74,48,-63});
    rules[124] = new Rule(-63, new int[]{78,50});
    rules[125] = new Rule(-63, new int[]{79,50});
    rules[126] = new Rule(-83, new int[]{});
    rules[127] = new Rule(-63, new int[]{58,-83,-13,-61,59});
    rules[128] = new Rule(-63, new int[]{81,87,50});
    rules[129] = new Rule(-63, new int[]{80,-43,50});
    rules[130] = new Rule(-63, new int[]{-43,50});
    rules[131] = new Rule(-63, new int[]{83,56,88,57,50});
    rules[132] = new Rule(-63, new int[]{82,56,-42,57,50});
    rules[133] = new Rule(-63, new int[]{84,56,57,50});
    rules[134] = new Rule(-43, new int[]{});
    rules[135] = new Rule(-43, new int[]{-44});
    rules[136] = new Rule(-44, new int[]{-45});
    rules[137] = new Rule(-44, new int[]{-44,49,-45});
    rules[138] = new Rule(-45, new int[]{-46});
    rules[139] = new Rule(-45, new int[]{-58,-34,-45});
    rules[140] = new Rule(-34, new int[]{37});
    rules[141] = new Rule(-34, new int[]{38});
    rules[142] = new Rule(-34, new int[]{39});
    rules[143] = new Rule(-34, new int[]{40});
    rules[144] = new Rule(-34, new int[]{41});
    rules[145] = new Rule(-34, new int[]{42});
    rules[146] = new Rule(-34, new int[]{45});
    rules[147] = new Rule(-34, new int[]{46});
    rules[148] = new Rule(-34, new int[]{47});
    rules[149] = new Rule(-34, new int[]{43});
    rules[150] = new Rule(-34, new int[]{44});
    rules[151] = new Rule(-46, new int[]{-47});
    rules[152] = new Rule(-46, new int[]{-47,69,-44,48,-46});
    rules[153] = new Rule(-41, new int[]{});
    rules[154] = new Rule(-41, new int[]{-42});
    rules[155] = new Rule(-42, new int[]{-46});
    rules[156] = new Rule(-47, new int[]{-48});
    rules[157] = new Rule(-47, new int[]{-47,63,-48});
    rules[158] = new Rule(-48, new int[]{-49});
    rules[159] = new Rule(-48, new int[]{-48,64,-49});
    rules[160] = new Rule(-49, new int[]{-50});
    rules[161] = new Rule(-49, new int[]{-49,67,-50});
    rules[162] = new Rule(-50, new int[]{-51});
    rules[163] = new Rule(-50, new int[]{-50,66,-51});
    rules[164] = new Rule(-51, new int[]{-52});
    rules[165] = new Rule(-51, new int[]{-51,55,-52});
    rules[166] = new Rule(-52, new int[]{-53});
    rules[167] = new Rule(-52, new int[]{-52,-35,-53});
    rules[168] = new Rule(-35, new int[]{29});
    rules[169] = new Rule(-35, new int[]{30});
    rules[170] = new Rule(-53, new int[]{-54});
    rules[171] = new Rule(-53, new int[]{-53,-36,-54});
    rules[172] = new Rule(-36, new int[]{31});
    rules[173] = new Rule(-36, new int[]{32});
    rules[174] = new Rule(-36, new int[]{33});
    rules[175] = new Rule(-36, new int[]{34});
    rules[176] = new Rule(-54, new int[]{-55});
    rules[177] = new Rule(-54, new int[]{-54,-37,-55});
    rules[178] = new Rule(-37, new int[]{35});
    rules[179] = new Rule(-37, new int[]{36});
    rules[180] = new Rule(-55, new int[]{-56});
    rules[181] = new Rule(-55, new int[]{-55,23,-56});
    rules[182] = new Rule(-55, new int[]{-55,24,-56});
    rules[183] = new Rule(-56, new int[]{-57});
    rules[184] = new Rule(-56, new int[]{-56,-38,-57});
    rules[185] = new Rule(-38, new int[]{54});
    rules[186] = new Rule(-38, new int[]{25});
    rules[187] = new Rule(-38, new int[]{26});
    rules[188] = new Rule(-57, new int[]{-58});
    rules[189] = new Rule(-57, new int[]{56,-31,57,-57});
    rules[190] = new Rule(-31, new int[]{-3});
    rules[191] = new Rule(-84, new int[]{});
    rules[192] = new Rule(-31, new int[]{-3,-84,-32});
    rules[193] = new Rule(-58, new int[]{-59});
    rules[194] = new Rule(-58, new int[]{-39,-57});
    rules[195] = new Rule(-58, new int[]{65,-57});
    rules[196] = new Rule(-58, new int[]{62,-58});
    rules[197] = new Rule(-58, new int[]{62,56,-31,57});
    rules[198] = new Rule(-58, new int[]{55,-57});
    rules[199] = new Rule(-58, new int[]{54,-57});
    rules[200] = new Rule(-58, new int[]{-40,-58});
    rules[201] = new Rule(-39, new int[]{23});
    rules[202] = new Rule(-39, new int[]{24});
    rules[203] = new Rule(-39, new int[]{68});
    rules[204] = new Rule(-40, new int[]{27});
    rules[205] = new Rule(-40, new int[]{28});
    rules[206] = new Rule(-59, new int[]{-60});
    rules[207] = new Rule(-59, new int[]{-59,-40});
    rules[208] = new Rule(-59, new int[]{-59,52,87});
    rules[209] = new Rule(-59, new int[]{-59,53,87});
    rules[210] = new Rule(-59, new int[]{-59,60,-44,61});
    rules[211] = new Rule(-85, new int[]{});
    rules[212] = new Rule(-59, new int[]{-59,-85,56,-65,57});
    rules[213] = new Rule(-65, new int[]{});
    rules[214] = new Rule(-65, new int[]{-66});
    rules[215] = new Rule(-66, new int[]{-45});
    rules[216] = new Rule(-66, new int[]{-66,49,-45});
    rules[217] = new Rule(-60, new int[]{56,-44,57});
    rules[218] = new Rule(-60, new int[]{90});
    rules[219] = new Rule(-60, new int[]{87});
    rules[220] = new Rule(-60, new int[]{88});
    rules[221] = new Rule(-60, new int[]{85});
    rules[222] = new Rule(-60, new int[]{86});
  }

  protected override void Initialize() {
    this.InitSpecialTokens((int)Tokens.error, (int)Tokens.EOF);
    this.InitStates(states);
    this.InitRules(rules);
    this.InitNonTerminals(nonTerms);
  }

  protected override void DoAction(int action)
  {
#pragma warning disable 162, 1522
    switch (action)
    {
      case 6: // Anon@1 -> /* empty */
#line 128 "MainParser.gppg"
                                            {
      MiddleCodeGenerator.FunctionHeader
        (SpecifierStack.Pop(), ValueStack[ValueStack.Depth-1].declarator);
    }
#line default
        break;
      case 7: // Anon@2 -> /* empty */
#line 132 "MainParser.gppg"
                              {
      MiddleCodeGenerator.FunctionDefinition();
    }
#line default
        break;
      case 8: // function_definition -> declaration_specifier_list_x, declarator, Anon@1, 
              //                        optional_declaration_list, Anon@2, LEFT_BLOCK, 
              //                        optional_declaration_list, optional_statement_list, 
              //                        RIGHT_BLOCK
#line 135 "MainParser.gppg"
                                                                             {
      ValueStack[ValueStack.Depth-2].statement.CodeList.InsertRange(0, ValueStack[ValueStack.Depth-3].middle_code_list);
      MiddleCodeGenerator.BackpatchGoto();
      MiddleCodeGenerator.FunctionEnd(ValueStack[ValueStack.Depth-2].statement);
    }
#line default
        break;
      case 9: // Anon@3 -> /* empty */
#line 140 "MainParser.gppg"
               {
      MiddleCodeGenerator.FunctionHeader(null, ValueStack[ValueStack.Depth-1].declarator);
    }
#line default
        break;
      case 10: // Anon@4 -> /* empty */
#line 143 "MainParser.gppg"
                              {
      MiddleCodeGenerator.FunctionDefinition();
    }
#line default
        break;
      case 11: // function_definition -> declarator, Anon@3, optional_declaration_list, Anon@4, 
               //                        LEFT_BLOCK, optional_declaration_list, 
               //                        optional_statement_list, RIGHT_BLOCK
#line 146 "MainParser.gppg"
                                                                             {
      ValueStack[ValueStack.Depth-2].statement.CodeList.InsertRange(0, ValueStack[ValueStack.Depth-3].middle_code_list);
      MiddleCodeGenerator.BackpatchGoto();
      MiddleCodeGenerator.FunctionEnd(ValueStack[ValueStack.Depth-2].statement);
    }
#line default
        break;
      case 12: // optional_declaration_list -> /* empty */
#line 153 "MainParser.gppg"
                     { CurrentSemanticValue.middle_code_list = new List<MiddleCode>(); }
#line default
        break;
      case 13: // optional_declaration_list -> declaration_list
#line 154 "MainParser.gppg"
                     { CurrentSemanticValue.middle_code_list = ValueStack[ValueStack.Depth-1].middle_code_list; }
#line default
        break;
      case 14: // declaration -> declaration_specifier_list, SEMICOLON
#line 157 "MainParser.gppg"
                                         {
      SpecifierStack.Push(Specifier.SpecifierList(ValueStack[ValueStack.Depth-2].object_list));
      CurrentSemanticValue.middle_code_list = new List<MiddleCode>();
    }
#line default
        break;
      case 15: // declaration -> declaration_specifier_list_x, declarator_list, SEMICOLON
#line 161 "MainParser.gppg"
                                                           {
      SpecifierStack.Pop();
      CurrentSemanticValue.middle_code_list = ValueStack[ValueStack.Depth-2].middle_code_list;
    }
#line default
        break;
      case 16: // declaration_specifier_list_x -> declaration_specifier_list
#line 167 "MainParser.gppg"
                             {
    SpecifierStack.Push(Specifier.SpecifierList(ValueStack[ValueStack.Depth-1].object_list));
  }
#line default
        break;
      case 17: // declaration_specifier_list -> declaration_specifier
#line 172 "MainParser.gppg"
                          {
      CurrentSemanticValue.object_list = new List<object>();
      CurrentSemanticValue.object_list.Add(ValueStack[ValueStack.Depth-1].obj);
    }
#line default
        break;
      case 18: // declaration_specifier_list -> declaration_specifier, declaration_specifier_list
#line 176 "MainParser.gppg"
                                                     {
      ValueStack[ValueStack.Depth-1].object_list.Add(ValueStack[ValueStack.Depth-2].obj);
      CurrentSemanticValue.object_list = ValueStack[ValueStack.Depth-1].object_list;
    }
#line default
        break;
      case 19: // declaration_specifier -> CONSTANT
#line 182 "MainParser.gppg"
                              { CurrentSemanticValue.obj = Mask.Constant; }
#line default
        break;
      case 20: // declaration_specifier -> VOLATILE
#line 183 "MainParser.gppg"
                              { CurrentSemanticValue.obj = Mask.Volatile; }
#line default
        break;
      case 21: // declaration_specifier -> AUTO
#line 184 "MainParser.gppg"
                              { CurrentSemanticValue.obj = Mask.Auto;     }
#line default
        break;
      case 22: // declaration_specifier -> REGISTER
#line 185 "MainParser.gppg"
                              { CurrentSemanticValue.obj = Mask.Register; }
#line default
        break;
      case 23: // declaration_specifier -> STATIC
#line 186 "MainParser.gppg"
                              { CurrentSemanticValue.obj = Mask.Static;   }
#line default
        break;
      case 24: // declaration_specifier -> EXTERN
#line 187 "MainParser.gppg"
                              { CurrentSemanticValue.obj = Mask.Extern;   }
#line default
        break;
      case 25: // declaration_specifier -> TYPEDEF
#line 188 "MainParser.gppg"
                              { CurrentSemanticValue.obj = Mask.Typedef;  }
#line default
        break;
      case 26: // declaration_specifier -> VOID
#line 189 "MainParser.gppg"
                              { CurrentSemanticValue.obj = Mask.Void;     }
#line default
        break;
      case 27: // declaration_specifier -> CHAR
#line 190 "MainParser.gppg"
                              { CurrentSemanticValue.obj = Mask.Char;     }
#line default
        break;
      case 28: // declaration_specifier -> SHORT
#line 191 "MainParser.gppg"
                              { CurrentSemanticValue.obj = Mask.Short;    }
#line default
        break;
      case 29: // declaration_specifier -> INT
#line 192 "MainParser.gppg"
                              { CurrentSemanticValue.obj = Mask.Int;      }
#line default
        break;
      case 30: // declaration_specifier -> LONG
#line 193 "MainParser.gppg"
                              { CurrentSemanticValue.obj = Mask.Long;     }
#line default
        break;
      case 31: // declaration_specifier -> FLOAT
#line 194 "MainParser.gppg"
                              { CurrentSemanticValue.obj = Mask.Float;    }
#line default
        break;
      case 32: // declaration_specifier -> DOUBLE
#line 195 "MainParser.gppg"
                              { CurrentSemanticValue.obj = Mask.Double;   }
#line default
        break;
      case 33: // declaration_specifier -> SIGNED
#line 196 "MainParser.gppg"
                              { CurrentSemanticValue.obj = Mask.Signed;   }
#line default
        break;
      case 34: // declaration_specifier -> UNSIGNED
#line 197 "MainParser.gppg"
                              { CurrentSemanticValue.obj = Mask.Unsigned; }
#line default
        break;
      case 35: // declaration_specifier -> struct_or_union_specifier
#line 198 "MainParser.gppg"
                              { CurrentSemanticValue.obj = ValueStack[ValueStack.Depth-1].type;            }
#line default
        break;
      case 36: // declaration_specifier -> enum_specifier
#line 199 "MainParser.gppg"
                              { CurrentSemanticValue.obj = ValueStack[ValueStack.Depth-1].type;            }
#line default
        break;
      case 37: // declaration_specifier -> TYPEDEF_NAME
#line 200 "MainParser.gppg"
                              { CurrentSemanticValue.obj = ValueStack[ValueStack.Depth-1].type;            }
#line default
        break;
      case 38: // Anon@5 -> /* empty */
#line 203 "MainParser.gppg"
                                  {
      MiddleCodeGenerator.StructOrUnionHeader(ValueStack[ValueStack.Depth-2].sort, ValueStack[ValueStack.Depth-1].name);
    }
#line default
        break;
      case 39: // struct_or_union_specifier -> struct_or_union, optional_name, Anon@5, LEFT_BLOCK, 
               //                              declaration_list, RIGHT_BLOCK
#line 206 "MainParser.gppg"
                                            {
      CurrentSemanticValue.type = MiddleCodeGenerator.StructOrUnionSpecifier();
    }
#line default
        break;
      case 40: // struct_or_union_specifier -> struct_or_union, NAME
#line 209 "MainParser.gppg"
                         {
      CurrentSemanticValue.type = MiddleCodeGenerator.StructOrUnionLookup(ValueStack[ValueStack.Depth-2].sort, ValueStack[ValueStack.Depth-1].name);
    }
#line default
        break;
      case 41: // struct_or_union -> STRUCT
#line 214 "MainParser.gppg"
           { CurrentSemanticValue.sort = Sort.Struct; }
#line default
        break;
      case 42: // struct_or_union -> UNION
#line 215 "MainParser.gppg"
           { CurrentSemanticValue.sort = Sort.Union;  }
#line default
        break;
      case 43: // optional_name -> /* empty */
#line 218 "MainParser.gppg"
                { CurrentSemanticValue.name = null; }
#line default
        break;
      case 44: // optional_name -> NAME
#line 219 "MainParser.gppg"
                { CurrentSemanticValue.name = ValueStack[ValueStack.Depth-1].name;   }
#line default
        break;
      case 45: // declaration_list -> declaration
#line 222 "MainParser.gppg"
                {
      CurrentSemanticValue.middle_code_list = ValueStack[ValueStack.Depth-1].middle_code_list;
    }
#line default
        break;
      case 46: // declaration_list -> declaration_list, declaration
#line 225 "MainParser.gppg"
                                 {
      ValueStack[ValueStack.Depth-2].middle_code_list.AddRange(ValueStack[ValueStack.Depth-1].middle_code_list);
      CurrentSemanticValue.middle_code_list = ValueStack[ValueStack.Depth-2].middle_code_list;
    }
#line default
        break;
      case 47: // Anon@6 -> /* empty */
#line 231 "MainParser.gppg"
                       {
      MiddleCodeGenerator.EnumumerationHeader();
    }
#line default
        break;
      case 48: // enum_specifier -> ENUM, optional_name, Anon@6, LEFT_BLOCK, enum_list, 
               //                   RIGHT_BLOCK
#line 234 "MainParser.gppg"
                                     {
      CurrentSemanticValue.type = MiddleCodeGenerator.EnumumerationSpecifier(ValueStack[ValueStack.Depth-5].name, ValueStack[ValueStack.Depth-2].symbol_set);
    }
#line default
        break;
      case 49: // enum_specifier -> ENUM, NAME
#line 237 "MainParser.gppg"
              {
      CurrentSemanticValue.type = MiddleCodeGenerator.EnumumerationLookup(ValueStack[ValueStack.Depth-1].name);
    }
#line default
        break;
      case 50: // enum_list -> enum
#line 242 "MainParser.gppg"
         {
      ISet<Symbol> memberSet = new HashSet<Symbol>();
      memberSet.Add(ValueStack[ValueStack.Depth-1].symbol);
      CurrentSemanticValue.symbol_set = memberSet;
    }
#line default
        break;
      case 51: // enum_list -> enum_list, COMMA, enum
#line 247 "MainParser.gppg"
                         {
      ISet<Symbol> memberSet = ValueStack[ValueStack.Depth-3].symbol_set;
      memberSet.Add(ValueStack[ValueStack.Depth-1].symbol);
      CurrentSemanticValue.symbol_set = memberSet;
    }
#line default
        break;
      case 52: // enum -> NAME
#line 254 "MainParser.gppg"
         {
      CurrentSemanticValue.symbol = MiddleCodeGenerator.EnumerationItem(ValueStack[ValueStack.Depth-1].name, null);
    }
#line default
        break;
      case 53: // enum -> NAME, ASSIGN, constant_integral_expression
#line 257 "MainParser.gppg"
                                             {
      CurrentSemanticValue.symbol = MiddleCodeGenerator.EnumerationItem(ValueStack[ValueStack.Depth-3].name, ValueStack[ValueStack.Depth-1].expression.Symbol);
    }
#line default
        break;
      case 54: // declarator_list -> initialization_bitfield_simple_declarator
#line 262 "MainParser.gppg"
                                              {
      CurrentSemanticValue.middle_code_list = ValueStack[ValueStack.Depth-1].middle_code_list;
    }
#line default
        break;
      case 55: // declarator_list -> declarator_list, COMMA, 
               //                    initialization_bitfield_simple_declarator
#line 265 "MainParser.gppg"
                                                                    {
      ValueStack[ValueStack.Depth-3].middle_code_list.AddRange(ValueStack[ValueStack.Depth-1].middle_code_list);
      CurrentSemanticValue.middle_code_list = ValueStack[ValueStack.Depth-3].middle_code_list;
    }
#line default
        break;
      case 56: // initialization_bitfield_simple_declarator -> declarator
#line 271 "MainParser.gppg"
               {
      MiddleCodeGenerator.Declarator
        (SpecifierStack.Peek(), ValueStack[ValueStack.Depth-1].declarator);
      CurrentSemanticValue.middle_code_list = new List<MiddleCode>();
    }
#line default
        break;
      case 57: // initialization_bitfield_simple_declarator -> declarator, ASSIGN, initializer
#line 276 "MainParser.gppg"
                                  {
      CurrentSemanticValue.middle_code_list = MiddleCodeGenerator.InitializedDeclarator
             (SpecifierStack.Peek(), ValueStack[ValueStack.Depth-3].declarator, ValueStack[ValueStack.Depth-1].obj);
    }
#line default
        break;
      case 58: // initialization_bitfield_simple_declarator -> optional_simple_declarator, COLON, 
               //                                              constant_integral_expression
#line 280 "MainParser.gppg"
                                                                  {
      MiddleCodeGenerator.BitfieldDeclarator
        (SpecifierStack.Peek(), ValueStack[ValueStack.Depth-3].declarator, ValueStack[ValueStack.Depth-1].expression.Symbol);
      CurrentSemanticValue.middle_code_list = new List<MiddleCode>();
    }
#line default
        break;
      case 59: // optional_simple_declarator -> /* empty */
#line 287 "MainParser.gppg"
                { CurrentSemanticValue.declarator = null; }
#line default
        break;
      case 60: // optional_simple_declarator -> declarator
#line 288 "MainParser.gppg"
                { CurrentSemanticValue.declarator = ValueStack[ValueStack.Depth-1].declarator;   }
#line default
        break;
      case 61: // declarator -> optional_pointer_list, direct_declarator
#line 291 "MainParser.gppg"
                                            {
      CurrentSemanticValue.declarator = MiddleCodeGenerator.PointerDeclarator(ValueStack[ValueStack.Depth-2].type_list, ValueStack[ValueStack.Depth-1].declarator);
    }
#line default
        break;
      case 62: // optional_pointer_list -> /* empty */
#line 296 "MainParser.gppg"
                 {
      CurrentSemanticValue.type_list = new List<CCompiler.Type>();
    }
#line default
        break;
      case 63: // optional_pointer_list -> pointer_list
#line 299 "MainParser.gppg"
                 {
      CurrentSemanticValue.type_list = ValueStack[ValueStack.Depth-1].type_list;
    }
#line default
        break;
      case 64: // pointer_list -> pointer_marker
#line 304 "MainParser.gppg"
                   {
      CurrentSemanticValue.type_list = new List<CCompiler.Type>();
      CurrentSemanticValue.type_list.Add(ValueStack[ValueStack.Depth-1].type);
    }
#line default
        break;
      case 65: // pointer_list -> pointer_list, pointer_marker
#line 308 "MainParser.gppg"
                                {
      ValueStack[ValueStack.Depth-2].type_list.Add(ValueStack[ValueStack.Depth-1].type);
      CurrentSemanticValue.type_list = ValueStack[ValueStack.Depth-2].type_list;
    }
#line default
        break;
      case 66: // pointer_marker -> ASTERRISK, optional_qualifier_list
#line 314 "MainParser.gppg"
                                      {
      CurrentSemanticValue.type = Specifier.QualifierList(ValueStack[ValueStack.Depth-1].mask_list);
    }
#line default
        break;
      case 67: // optional_qualifier_list -> /* empty */
#line 319 "MainParser.gppg"
                   {
      CurrentSemanticValue.mask_list = new List<Mask>();
    }
#line default
        break;
      case 68: // optional_qualifier_list -> optional_qualifier_list, qualifier
#line 322 "MainParser.gppg"
                                      {
      CurrentSemanticValue.mask_list = ValueStack[ValueStack.Depth-2].mask_list;
      CurrentSemanticValue.mask_list.Add(ValueStack[ValueStack.Depth-1].mask);
    }
#line default
        break;
      case 69: // Anon@7 -> /* empty */
#line 328 "MainParser.gppg"
            { CurrentSemanticValue.mask = Mask.Constant; }
#line default
        break;
      case 70: // qualifier -> CONSTANT, Anon@7, VOLATILE
#line 329 "MainParser.gppg"
            { CurrentSemanticValue.mask = Mask.Volatile; }
#line default
        break;
      case 71: // direct_declarator -> NAME
#line 332 "MainParser.gppg"
         {
      CurrentSemanticValue.declarator = new Declarator(ValueStack[ValueStack.Depth-1].name);
    }
#line default
        break;
      case 72: // direct_declarator -> LEFT_PARENTHESIS, declarator, RIGHT_PARENTHESIS
#line 335 "MainParser.gppg"
                                                  {
      CurrentSemanticValue.declarator = ValueStack[ValueStack.Depth-2].declarator; 
    }
#line default
        break;
      case 73: // direct_declarator -> direct_declarator, LEFT_SQUARE, 
               //                      optional_constant_integral_expression, RIGHT_SQUARE
#line 339 "MainParser.gppg"
                                                       {
      CurrentSemanticValue.declarator = MiddleCodeGenerator.ArrayType(ValueStack[ValueStack.Depth-4].declarator, ValueStack[ValueStack.Depth-2].expression);
    }
#line default
        break;
      case 74: // direct_declarator -> direct_declarator, LEFT_PARENTHESIS, 
               //                      parameter_ellipse_list, RIGHT_PARENTHESIS
#line 343 "MainParser.gppg"
                                                              {
      CurrentSemanticValue.declarator = MiddleCodeGenerator.
           NewFunctionDeclaration(ValueStack[ValueStack.Depth-4].declarator, ValueStack[ValueStack.Depth-2].parameter_pair.First, ValueStack[ValueStack.Depth-2].parameter_pair.Second);
    }
#line default
        break;
      case 75: // direct_declarator -> direct_declarator, LEFT_PARENTHESIS, optional_name_list, 
               //                      RIGHT_PARENTHESIS
#line 348 "MainParser.gppg"
                                         {
      CurrentSemanticValue.declarator = MiddleCodeGenerator.OldFunctionDeclaration(ValueStack[ValueStack.Depth-4].declarator, ValueStack[ValueStack.Depth-2].string_list);
    }
#line default
        break;
      case 76: // optional_parameter_ellipse_list -> /* empty */
#line 353 "MainParser.gppg"
                           { CurrentSemanticValue.parameter_pair = null; }
#line default
        break;
      case 77: // optional_parameter_ellipse_list -> parameter_ellipse_list
#line 354 "MainParser.gppg"
                           { CurrentSemanticValue.parameter_pair = ValueStack[ValueStack.Depth-1].parameter_pair;   }
#line default
        break;
      case 78: // parameter_ellipse_list -> parameter_list
#line 357 "MainParser.gppg"
                   {
      CurrentSemanticValue.parameter_pair = new Pair<List<Symbol>,Boolean>(ValueStack[ValueStack.Depth-1].symbol_list, false);
    }
#line default
        break;
      case 79: // parameter_ellipse_list -> parameter_list, COMMA, ELLIPSE
#line 360 "MainParser.gppg"
                                 {
      CurrentSemanticValue.parameter_pair = new Pair<List<Symbol>,Boolean>(ValueStack[ValueStack.Depth-3].symbol_list, true);
    }
#line default
        break;
      case 80: // Anon@8 -> /* empty */
#line 365 "MainParser.gppg"
    { ScopeStack.Push(SymbolTable.CurrentTable.Scope);
      SymbolTable.CurrentTable.Scope = Scope.Parameter;
    }
#line default
        break;
      case 81: // parameter_list -> Anon@8, parameter_declaration
#line 368 "MainParser.gppg"
                          {
      SymbolTable.CurrentTable.Scope = ScopeStack.Pop();
      CurrentSemanticValue.symbol_list = new List<Symbol>();
      CurrentSemanticValue.symbol_list.Add(ValueStack[ValueStack.Depth-1].symbol);
    }
#line default
        break;
      case 82: // Anon@9 -> /* empty */
#line 373 "MainParser.gppg"
                         {
      ScopeStack.Push(SymbolTable.CurrentTable.Scope);
      SymbolTable.CurrentTable.Scope = Scope.Parameter;
    }
#line default
        break;
      case 83: // parameter_list -> parameter_list, COMMA, Anon@9, parameter_declaration
#line 377 "MainParser.gppg"
                          {
      SymbolTable.CurrentTable.Scope = ScopeStack.Pop();
      ValueStack[ValueStack.Depth-4].symbol_list.Add(ValueStack[ValueStack.Depth-1].symbol);
      CurrentSemanticValue.symbol_list = ValueStack[ValueStack.Depth-4].symbol_list;
    }
#line default
        break;
      case 84: // parameter_declaration -> declaration_specifier_list
#line 384 "MainParser.gppg"
                               {
      CurrentSemanticValue.symbol = MiddleCodeGenerator.Parameter(Specifier.SpecifierList(ValueStack[ValueStack.Depth-1].object_list), null);
    }
#line default
        break;
      case 85: // parameter_declaration -> declaration_specifier_list_x, declarator
#line 387 "MainParser.gppg"
                                            {
      CurrentSemanticValue.symbol = MiddleCodeGenerator.Parameter(SpecifierStack.Pop(), ValueStack[ValueStack.Depth-1].declarator);
    }
#line default
        break;
      case 86: // parameter_declaration -> declaration_specifier_list_x, abstract_declarator
#line 390 "MainParser.gppg"
                                                     {
      CurrentSemanticValue.symbol = MiddleCodeGenerator.Parameter(SpecifierStack.Pop(), ValueStack[ValueStack.Depth-1].declarator);
    }
#line default
        break;
      case 87: // optional_name_list -> /* empty */
#line 395 "MainParser.gppg"
                { CurrentSemanticValue.string_list = new List<string>(); }
#line default
        break;
      case 88: // optional_name_list -> name_list
#line 396 "MainParser.gppg"
                { CurrentSemanticValue.string_list = ValueStack[ValueStack.Depth-1].string_list;                 }
#line default
        break;
      case 89: // name_list -> NAME
#line 399 "MainParser.gppg"
         {
      CurrentSemanticValue.string_list = new List<string>();
      CurrentSemanticValue.string_list.Add(ValueStack[ValueStack.Depth-1].name);
    }
#line default
        break;
      case 90: // name_list -> name_list, COMMA, NAME
#line 403 "MainParser.gppg"
                         {
      ValueStack[ValueStack.Depth-3].string_list.Add(ValueStack[ValueStack.Depth-1].name); 
      CurrentSemanticValue.string_list = ValueStack[ValueStack.Depth-3].string_list;
    }
#line default
        break;
      case 91: // initializer -> assignment_expression
#line 409 "MainParser.gppg"
                          {
      CurrentSemanticValue.obj = ValueStack[ValueStack.Depth-1].expression;
    }
#line default
        break;
      case 92: // initializer -> LEFT_BLOCK, initializer_list, optional_comma, RIGHT_BLOCK
#line 412 "MainParser.gppg"
                                                           {
      CurrentSemanticValue.obj = ValueStack[ValueStack.Depth-3].object_list;
    }
#line default
        break;
      case 95: // initializer_list -> initializer
#line 421 "MainParser.gppg"
                {
      CurrentSemanticValue.object_list = new List<object>();
      CurrentSemanticValue.object_list.Add(ValueStack[ValueStack.Depth-1].obj);
    }
#line default
        break;
      case 96: // initializer_list -> initializer_list, COMMA, initializer
#line 425 "MainParser.gppg"
                                       {
      ValueStack[ValueStack.Depth-3].object_list.Add(ValueStack[ValueStack.Depth-1].obj);
      CurrentSemanticValue.object_list = ValueStack[ValueStack.Depth-3].object_list;
    }
#line default
        break;
      case 97: // abstract_declarator -> pointer_list
#line 431 "MainParser.gppg"
                 {
      CurrentSemanticValue.declarator = MiddleCodeGenerator.PointerDeclarator(ValueStack[ValueStack.Depth-1].type_list, null);
    }
#line default
        break;
      case 98: // abstract_declarator -> optional_pointer_list, direct_abstract_declarator
#line 434 "MainParser.gppg"
                                                     {
      CurrentSemanticValue.declarator = MiddleCodeGenerator.PointerDeclarator(ValueStack[ValueStack.Depth-2].type_list, ValueStack[ValueStack.Depth-1].declarator);
    }
#line default
        break;
      case 99: // direct_abstract_declarator -> LEFT_PARENTHESIS, abstract_declarator, 
               //                               RIGHT_PARENTHESIS
#line 439 "MainParser.gppg"
                                                           {
      CurrentSemanticValue.declarator = ValueStack[ValueStack.Depth-2].declarator;
    }
#line default
        break;
      case 100: // direct_abstract_declarator -> LEFT_SQUARE, 
                //                               optional_constant_integral_expression, 
                //                               RIGHT_SQUARE
#line 442 "MainParser.gppg"
                                                                   {
      CurrentSemanticValue.declarator = MiddleCodeGenerator.ArrayType(null, ValueStack[ValueStack.Depth-2].expression);
    }
#line default
        break;
      case 101: // direct_abstract_declarator -> direct_abstract_declarator, LEFT_SQUARE, 
                //                               optional_constant_integral_expression, 
                //                               RIGHT_SQUARE
#line 446 "MainParser.gppg"
                                                                   {
      CurrentSemanticValue.declarator = MiddleCodeGenerator.ArrayType(ValueStack[ValueStack.Depth-4].declarator, ValueStack[ValueStack.Depth-2].expression);
    }
#line default
        break;
      case 102: // direct_abstract_declarator -> LEFT_PARENTHESIS, optional_parameter_ellipse_list, 
                //                               RIGHT_PARENTHESIS
#line 449 "MainParser.gppg"
                                                                       {
      CurrentSemanticValue.declarator = MiddleCodeGenerator.
           NewFunctionDeclaration(null, ValueStack[ValueStack.Depth-2].parameter_pair.First, ValueStack[ValueStack.Depth-2].parameter_pair.Second);
    }
#line default
        break;
      case 103: // direct_abstract_declarator -> direct_abstract_declarator, LEFT_PARENTHESIS, 
                //                               optional_parameter_ellipse_list, 
                //                               RIGHT_PARENTHESIS
#line 454 "MainParser.gppg"
                                                                       {
      CurrentSemanticValue.declarator = MiddleCodeGenerator.
           NewFunctionDeclaration(ValueStack[ValueStack.Depth-4].declarator, ValueStack[ValueStack.Depth-2].parameter_pair.First, ValueStack[ValueStack.Depth-2].parameter_pair.Second);
    }
#line default
        break;
      case 104: // optional_statement_list -> /* empty */
#line 462 "MainParser.gppg"
                {
      CurrentSemanticValue.statement = new Statement(new List<MiddleCode>(),
                         new HashSet<MiddleCode>());
    }
#line default
        break;
      case 105: // optional_statement_list -> optional_statement_list, statement
#line 466 "MainParser.gppg"
                                      {
      MiddleCodeGenerator.Backpatch(ValueStack[ValueStack.Depth-2].statement.NextSet, ValueStack[ValueStack.Depth-1].statement.CodeList);
      List<MiddleCode> codeList = new List<MiddleCode>();
      codeList.AddRange(ValueStack[ValueStack.Depth-2].statement.CodeList);
      codeList.AddRange(ValueStack[ValueStack.Depth-1].statement.CodeList);
      CurrentSemanticValue.statement = new Statement(codeList, ValueStack[ValueStack.Depth-1].statement.NextSet);
    }
#line default
        break;
      case 106: // statement -> opened_statement
#line 475 "MainParser.gppg"
                     { CurrentSemanticValue.statement = ValueStack[ValueStack.Depth-1].statement; }
#line default
        break;
      case 107: // statement -> closed_statement
#line 476 "MainParser.gppg"
                     { CurrentSemanticValue.statement = ValueStack[ValueStack.Depth-1].statement; }
#line default
        break;
      case 108: // switch_header -> /* empty */
#line 479 "MainParser.gppg"
                 { MiddleCodeGenerator.SwitchHeader(); }
#line default
        break;
      case 109: // loop_header -> /* empty */
#line 482 "MainParser.gppg"
                 { MiddleCodeGenerator.LoopHeader(); }
#line default
        break;
      case 110: // opened_statement -> IF, LEFT_PARENTHESIS, expression, RIGHT_PARENTHESIS, 
                //                     statement
#line 485 "MainParser.gppg"
                                                               {
      CurrentSemanticValue.statement = MiddleCodeGenerator.IfStatement(ValueStack[ValueStack.Depth-3].expression, ValueStack[ValueStack.Depth-1].statement);
    }
#line default
        break;
      case 111: // opened_statement -> IF, LEFT_PARENTHESIS, expression, RIGHT_PARENTHESIS, 
                //                     closed_statement, ELSE, opened_statement
#line 489 "MainParser.gppg"
                          {
      CurrentSemanticValue.statement = MiddleCodeGenerator.IfElseStatement(ValueStack[ValueStack.Depth-5].expression, ValueStack[ValueStack.Depth-3].statement, ValueStack[ValueStack.Depth-1].statement);
    }
#line default
        break;
      case 112: // opened_statement -> SWITCH, switch_header, LEFT_PARENTHESIS, expression, 
                //                     RIGHT_PARENTHESIS, opened_statement
#line 493 "MainParser.gppg"
                     {
      CurrentSemanticValue.statement = MiddleCodeGenerator.SwitchStatement(ValueStack[ValueStack.Depth-3].expression, ValueStack[ValueStack.Depth-1].statement);
    }
#line default
        break;
      case 113: // opened_statement -> CASE, constant_integral_expression, COLON, opened_statement
#line 496 "MainParser.gppg"
                                                             {
      CurrentSemanticValue.statement = MiddleCodeGenerator.CaseStatement(ValueStack[ValueStack.Depth-3].expression, ValueStack[ValueStack.Depth-1].statement);
    }
#line default
        break;
      case 114: // opened_statement -> WHILE, loop_header, LEFT_PARENTHESIS, expression, 
                //                     RIGHT_PARENTHESIS, opened_statement
#line 500 "MainParser.gppg"
                     {
      CurrentSemanticValue.statement = MiddleCodeGenerator.WhileStatement(ValueStack[ValueStack.Depth-3].expression, ValueStack[ValueStack.Depth-1].statement);
    }
#line default
        break;
      case 115: // opened_statement -> FOR, loop_header, LEFT_PARENTHESIS, optional_expression, 
                //                     SEMICOLON, optional_expression, SEMICOLON, 
                //                     optional_expression, RIGHT_PARENTHESIS, opened_statement
#line 505 "MainParser.gppg"
                     {
      CurrentSemanticValue.statement = MiddleCodeGenerator.ForStatement(ValueStack[ValueStack.Depth-7].expression, ValueStack[ValueStack.Depth-5].expression, ValueStack[ValueStack.Depth-3].expression, ValueStack[ValueStack.Depth-1].statement);
    }
#line default
        break;
      case 116: // opened_statement -> NAME, COLON, opened_statement
#line 508 "MainParser.gppg"
                                {
      CurrentSemanticValue.statement = MiddleCodeGenerator.LabelStatement(ValueStack[ValueStack.Depth-3].name, ValueStack[ValueStack.Depth-1].statement);
    }
#line default
        break;
      case 117: // closed_statement -> IF, LEFT_PARENTHESIS, expression, RIGHT_PARENTHESIS, 
                //                     closed_statement, ELSE, closed_statement
#line 514 "MainParser.gppg"
                          {
      CurrentSemanticValue.statement = MiddleCodeGenerator.IfElseStatement(ValueStack[ValueStack.Depth-5].expression, ValueStack[ValueStack.Depth-3].statement, ValueStack[ValueStack.Depth-1].statement);
    }
#line default
        break;
      case 118: // closed_statement -> SWITCH, switch_header, LEFT_PARENTHESIS, expression, 
                //                     RIGHT_PARENTHESIS, closed_statement
#line 518 "MainParser.gppg"
                     {
      CurrentSemanticValue.statement = MiddleCodeGenerator.SwitchStatement(ValueStack[ValueStack.Depth-3].expression, ValueStack[ValueStack.Depth-1].statement);
    }
#line default
        break;
      case 119: // closed_statement -> WHILE, loop_header, LEFT_PARENTHESIS, expression, 
                //                     RIGHT_PARENTHESIS, closed_statement
#line 522 "MainParser.gppg"
                     {
      CurrentSemanticValue.statement = MiddleCodeGenerator.WhileStatement(ValueStack[ValueStack.Depth-3].expression, ValueStack[ValueStack.Depth-1].statement);
    }
#line default
        break;
      case 120: // closed_statement -> DO, loop_header, statement, WHILE, LEFT_PARENTHESIS, 
                //                     expression, RIGHT_PARENTHESIS, SEMICOLON
#line 526 "MainParser.gppg"
              {
      CurrentSemanticValue.statement = MiddleCodeGenerator.DoStatement(ValueStack[ValueStack.Depth-6].statement, ValueStack[ValueStack.Depth-3].expression);
    }
#line default
        break;
      case 121: // closed_statement -> FOR, loop_header, LEFT_PARENTHESIS, optional_expression, 
                //                     SEMICOLON, optional_expression, SEMICOLON, 
                //                     optional_expression, RIGHT_PARENTHESIS, closed_statement
#line 531 "MainParser.gppg"
                     {
      CurrentSemanticValue.statement = MiddleCodeGenerator.ForStatement(ValueStack[ValueStack.Depth-7].expression, ValueStack[ValueStack.Depth-5].expression, ValueStack[ValueStack.Depth-3].expression, ValueStack[ValueStack.Depth-1].statement);
    }
#line default
        break;
      case 122: // closed_statement -> CASE, constant_integral_expression, COLON, closed_statement
#line 534 "MainParser.gppg"
                                                             {
      CurrentSemanticValue.statement = MiddleCodeGenerator.CaseStatement(ValueStack[ValueStack.Depth-3].expression, ValueStack[ValueStack.Depth-1].statement);
    }
#line default
        break;
      case 123: // closed_statement -> DEFAULT, COLON, closed_statement
#line 537 "MainParser.gppg"
                                   {
      CurrentSemanticValue.statement = MiddleCodeGenerator.DefaultStatement(ValueStack[ValueStack.Depth-1].statement);
    }
#line default
        break;
      case 124: // closed_statement -> CONTINUE, SEMICOLON
#line 540 "MainParser.gppg"
                       {
      CurrentSemanticValue.statement = MiddleCodeGenerator.ContinueStatement();
    }
#line default
        break;
      case 125: // closed_statement -> BREAK, SEMICOLON
#line 543 "MainParser.gppg"
                    {
      CurrentSemanticValue.statement = MiddleCodeGenerator.BreakStatement();
    }
#line default
        break;
      case 126: // Anon@10 -> /* empty */
#line 546 "MainParser.gppg"
               {
      SymbolTable.CurrentTable =
        new SymbolTable(SymbolTable.CurrentTable, Scope.Block);
    }
#line default
        break;
      case 127: // closed_statement -> LEFT_BLOCK, Anon@10, optional_declaration_list, 
                //                     optional_statement_list, RIGHT_BLOCK
#line 550 "MainParser.gppg"
                                                                  {
      SymbolTable.CurrentTable =
        SymbolTable.CurrentTable.ParentTable;
      ValueStack[ValueStack.Depth-2].statement.CodeList.InsertRange(0, ValueStack[ValueStack.Depth-3].middle_code_list);
      CurrentSemanticValue.statement = ValueStack[ValueStack.Depth-2].statement;
    }
#line default
        break;
      case 128: // closed_statement -> GOTO, NAME, SEMICOLON
#line 556 "MainParser.gppg"
                        {
      CurrentSemanticValue.statement = MiddleCodeGenerator.GotoStatement(ValueStack[ValueStack.Depth-2].name);
    }
#line default
        break;
      case 129: // closed_statement -> RETURN, optional_expression, SEMICOLON
#line 559 "MainParser.gppg"
                                         {
      CurrentSemanticValue.statement = MiddleCodeGenerator.ReturnStatement(ValueStack[ValueStack.Depth-2].expression);
    }
#line default
        break;
      case 130: // closed_statement -> optional_expression, SEMICOLON
#line 562 "MainParser.gppg"
                                  {
      CurrentSemanticValue.statement = MiddleCodeGenerator.ExpressionStatement(ValueStack[ValueStack.Depth-2].expression);
    }
#line default
        break;
      case 131: // closed_statement -> JUMP_REGISTER, LEFT_PARENTHESIS, REGISTER_NAME, 
                //                     RIGHT_PARENTHESIS, SEMICOLON
#line 568 "MainParser.gppg"
                                                                             {
      CurrentSemanticValue.statement = MiddleCodeGenerator.JumpRegisterStatement(ValueStack[ValueStack.Depth-3].register);
    }
#line default
        break;
      case 132: // closed_statement -> INTERRUPT, LEFT_PARENTHESIS, constant_integral_expression, 
                //                     RIGHT_PARENTHESIS, SEMICOLON
#line 572 "MainParser.gppg"
              {
      CurrentSemanticValue.statement = MiddleCodeGenerator.InterruptStatement(ValueStack[ValueStack.Depth-3].expression);
    }
#line default
        break;
      case 133: // closed_statement -> SYSCALL, LEFT_PARENTHESIS, RIGHT_PARENTHESIS, SEMICOLON
#line 575 "MainParser.gppg"
                                                         {
      CurrentSemanticValue.statement = MiddleCodeGenerator.SyscallStatement();
    }
#line default
        break;
      case 134: // optional_expression -> /* empty */
#line 580 "MainParser.gppg"
                { CurrentSemanticValue.expression = null; }
#line default
        break;
      case 135: // optional_expression -> expression
#line 581 "MainParser.gppg"
                { CurrentSemanticValue.expression = ValueStack[ValueStack.Depth-1].expression;   }
#line default
        break;
      case 136: // expression -> assignment_expression
#line 584 "MainParser.gppg"
                         {
      CurrentSemanticValue.expression = ValueStack[ValueStack.Depth-1].expression;
    }
#line default
        break;
      case 137: // expression -> expression, COMMA, assignment_expression
#line 587 "MainParser.gppg"
                                           {
      CurrentSemanticValue.expression = MiddleCodeGenerator.CommaExpression(ValueStack[ValueStack.Depth-3].expression, ValueStack[ValueStack.Depth-1].expression);
    }
#line default
        break;
      case 138: // assignment_expression -> condition_expression
#line 592 "MainParser.gppg"
                         {
      CurrentSemanticValue.expression = ValueStack[ValueStack.Depth-1].expression;
    }
#line default
        break;
      case 139: // assignment_expression -> prefix_expression, assignment_operator, 
                //                          assignment_expression
#line 595 "MainParser.gppg"
                                                                {
      CurrentSemanticValue.expression = MiddleCodeGenerator.AssignmentExpression(ValueStack[ValueStack.Depth-2].middleOperator, ValueStack[ValueStack.Depth-3].expression, ValueStack[ValueStack.Depth-1].expression);
    }
#line default
        break;
      case 140: // assignment_operator -> ASSIGN
#line 600 "MainParser.gppg"
                       { CurrentSemanticValue.middleOperator = MiddleOperator.Assign;     }
#line default
        break;
      case 141: // assignment_operator -> ADD_ASSIGN
#line 601 "MainParser.gppg"
                       { CurrentSemanticValue.middleOperator = MiddleOperator.Add;        }
#line default
        break;
      case 142: // assignment_operator -> SUBTRACT_ASSIGN
#line 602 "MainParser.gppg"
                       { CurrentSemanticValue.middleOperator = MiddleOperator.Subtract;   }
#line default
        break;
      case 143: // assignment_operator -> MULTIPLY_ASSIGN
#line 603 "MainParser.gppg"
                       { CurrentSemanticValue.middleOperator = MiddleOperator.Multiply;   }
#line default
        break;
      case 144: // assignment_operator -> DIVIDE_ASSIGN
#line 604 "MainParser.gppg"
                       { CurrentSemanticValue.middleOperator = MiddleOperator.Divide;     }
#line default
        break;
      case 145: // assignment_operator -> MODULO_ASSIGN
#line 605 "MainParser.gppg"
                       { CurrentSemanticValue.middleOperator = MiddleOperator.Modulo;     }
#line default
        break;
      case 146: // assignment_operator -> AND_ASSIGN
#line 606 "MainParser.gppg"
                       { CurrentSemanticValue.middleOperator = MiddleOperator.BitwiseAnd; }
#line default
        break;
      case 147: // assignment_operator -> OR_ASSIGN
#line 607 "MainParser.gppg"
                       { CurrentSemanticValue.middleOperator = MiddleOperator.BitwiseOr;  }
#line default
        break;
      case 148: // assignment_operator -> XOR_ASSIGN
#line 608 "MainParser.gppg"
                       { CurrentSemanticValue.middleOperator = MiddleOperator.BitwiseXOr; }
#line default
        break;
      case 149: // assignment_operator -> LEFT_SHIFT_ASSIGN
#line 609 "MainParser.gppg"
                       { CurrentSemanticValue.middleOperator = MiddleOperator.ShiftLeft;  }
#line default
        break;
      case 150: // assignment_operator -> RIGHT_SHIFT_ASSIGN
#line 610 "MainParser.gppg"
                       { CurrentSemanticValue.middleOperator = MiddleOperator.ShiftRight; }
#line default
        break;
      case 151: // condition_expression -> logical_or_expression
#line 613 "MainParser.gppg"
                          {
      CurrentSemanticValue.expression = ValueStack[ValueStack.Depth-1].expression;
    }
#line default
        break;
      case 152: // condition_expression -> logical_or_expression, QUESTION_MARK, expression, COLON, 
                //                         condition_expression
#line 616 "MainParser.gppg"
                                                                             {
      CurrentSemanticValue.expression = MiddleCodeGenerator.ConditionExpression(ValueStack[ValueStack.Depth-5].expression, ValueStack[ValueStack.Depth-3].expression, ValueStack[ValueStack.Depth-1].expression);
    }
#line default
        break;
      case 153: // optional_constant_integral_expression -> /* empty */
#line 621 "MainParser.gppg"
                                 { CurrentSemanticValue.expression = null; }
#line default
        break;
      case 154: // optional_constant_integral_expression -> constant_integral_expression
#line 622 "MainParser.gppg"
                                 { CurrentSemanticValue.expression = ValueStack[ValueStack.Depth-1].expression;   }
#line default
        break;
      case 155: // constant_integral_expression -> condition_expression
#line 625 "MainParser.gppg"
                         {
      CurrentSemanticValue.expression = MiddleCodeGenerator.ConstantIntegralExpression(ValueStack[ValueStack.Depth-1].expression);
    }
#line default
        break;
      case 156: // logical_or_expression -> logical_and_expression
#line 630 "MainParser.gppg"
                           {
      CurrentSemanticValue.expression = ValueStack[ValueStack.Depth-1].expression;
    }
#line default
        break;
      case 157: // logical_or_expression -> logical_or_expression, LOGICAL_OR, 
                //                          logical_and_expression
#line 633 "MainParser.gppg"
                                                            {
      CurrentSemanticValue.expression = MiddleCodeGenerator.LogicalExpression(MiddleOperator.LogicalOr, ValueStack[ValueStack.Depth-3].expression, ValueStack[ValueStack.Depth-1].expression);
    }
#line default
        break;
      case 158: // logical_and_expression -> bitwise_or_expression
#line 638 "MainParser.gppg"
                          {
      CurrentSemanticValue.expression = ValueStack[ValueStack.Depth-1].expression;
    }
#line default
        break;
      case 159: // logical_and_expression -> logical_and_expression, LOGICAL_AND, 
                //                           bitwise_or_expression
#line 641 "MainParser.gppg"
                                                             {
      CurrentSemanticValue.expression = MiddleCodeGenerator.LogicalExpression(MiddleOperator.LogicalAnd, ValueStack[ValueStack.Depth-3].expression, ValueStack[ValueStack.Depth-1].expression);
    }
#line default
        break;
      case 160: // bitwise_or_expression -> bitwise_xor_expression
#line 646 "MainParser.gppg"
                           {
      CurrentSemanticValue.expression = ValueStack[ValueStack.Depth-1].expression;
    }
#line default
        break;
      case 161: // bitwise_or_expression -> bitwise_or_expression, BITWISE_OR, 
                //                          bitwise_xor_expression
#line 649 "MainParser.gppg"
                                                            {
      CurrentSemanticValue.expression = MiddleCodeGenerator.BitwiseExpression
           (MiddleOperator.BitwiseOr, ValueStack[ValueStack.Depth-3].expression, ValueStack[ValueStack.Depth-1].expression);
    }
#line default
        break;
      case 162: // bitwise_xor_expression -> bitwise_and_expression
#line 655 "MainParser.gppg"
                           {
      CurrentSemanticValue.expression = ValueStack[ValueStack.Depth-1].expression;
    }
#line default
        break;
      case 163: // bitwise_xor_expression -> bitwise_xor_expression, BITWISE_XOR, 
                //                           bitwise_and_expression
#line 658 "MainParser.gppg"
                                                              {
      CurrentSemanticValue.expression = MiddleCodeGenerator.BitwiseExpression
           (MiddleOperator.BitwiseXOr, ValueStack[ValueStack.Depth-3].expression, ValueStack[ValueStack.Depth-1].expression);
    }
#line default
        break;
      case 164: // bitwise_and_expression -> equality_expression
#line 664 "MainParser.gppg"
                        {
      CurrentSemanticValue.expression = ValueStack[ValueStack.Depth-1].expression;
    }
#line default
        break;
      case 165: // bitwise_and_expression -> bitwise_and_expression, AMPERSAND, 
                //                           equality_expression
#line 667 "MainParser.gppg"
                                                         {
      CurrentSemanticValue.expression = MiddleCodeGenerator.BitwiseExpression
           (MiddleOperator.BitwiseAnd, ValueStack[ValueStack.Depth-3].expression, ValueStack[ValueStack.Depth-1].expression);
    }
#line default
        break;
      case 166: // equality_expression -> relation_expression
#line 673 "MainParser.gppg"
                        {
      CurrentSemanticValue.expression = ValueStack[ValueStack.Depth-1].expression;
    }
#line default
        break;
      case 167: // equality_expression -> equality_expression, equality_operator, 
                //                        relation_expression
#line 676 "MainParser.gppg"
                                                              {
      CurrentSemanticValue.expression = MiddleCodeGenerator.RelationalExpression(ValueStack[ValueStack.Depth-2].middleOperator, ValueStack[ValueStack.Depth-3].expression, ValueStack[ValueStack.Depth-1].expression);
    }
#line default
        break;
      case 168: // equality_operator -> EQUAL
#line 681 "MainParser.gppg"
              { CurrentSemanticValue.middleOperator = MiddleOperator.Equal;    }
#line default
        break;
      case 169: // equality_operator -> NOT_EQUAL
#line 682 "MainParser.gppg"
              { CurrentSemanticValue.middleOperator = MiddleOperator.NotEqual; }
#line default
        break;
      case 170: // relation_expression -> shift_expression
#line 685 "MainParser.gppg"
                     {
      CurrentSemanticValue.expression = ValueStack[ValueStack.Depth-1].expression;
    }
#line default
        break;
      case 171: // relation_expression -> relation_expression, relation_operator, shift_expression
#line 688 "MainParser.gppg"
                                                           {
      CurrentSemanticValue.expression = MiddleCodeGenerator.RelationalExpression (ValueStack[ValueStack.Depth-2].middleOperator, ValueStack[ValueStack.Depth-3].expression, ValueStack[ValueStack.Depth-1].expression);
    }
#line default
        break;
      case 172: // relation_operator -> LESS_THAN
#line 693 "MainParser.gppg"
                       { CurrentSemanticValue.middleOperator = MiddleOperator.LessThan;         }
#line default
        break;
      case 173: // relation_operator -> LESS_THAN_EQUAL
#line 694 "MainParser.gppg"
                       { CurrentSemanticValue.middleOperator = MiddleOperator.LessThanEqual;    }
#line default
        break;
      case 174: // relation_operator -> GREATER_THAN
#line 695 "MainParser.gppg"
                       { CurrentSemanticValue.middleOperator = MiddleOperator.GreaterThan;      }
#line default
        break;
      case 175: // relation_operator -> GREATER_THAN_EQUAL
#line 696 "MainParser.gppg"
                       { CurrentSemanticValue.middleOperator = MiddleOperator.GreaterThanEqual; }
#line default
        break;
      case 176: // shift_expression -> add_expression
#line 699 "MainParser.gppg"
                   {
      CurrentSemanticValue.expression = ValueStack[ValueStack.Depth-1].expression;
    }
#line default
        break;
      case 177: // shift_expression -> shift_expression, shift_operator, add_expression
#line 702 "MainParser.gppg"
                                                   {
      CurrentSemanticValue.expression = MiddleCodeGenerator.BitwiseExpression(ValueStack[ValueStack.Depth-2].middleOperator, ValueStack[ValueStack.Depth-3].expression, ValueStack[ValueStack.Depth-1].expression);
    }
#line default
        break;
      case 178: // shift_operator -> LEFT_SHIFT
#line 707 "MainParser.gppg"
                { CurrentSemanticValue.middleOperator = MiddleOperator.ShiftLeft;  }
#line default
        break;
      case 179: // shift_operator -> RIGHT_SHIFT
#line 708 "MainParser.gppg"
                { CurrentSemanticValue.middleOperator = MiddleOperator.ShiftRight; }
#line default
        break;
      case 180: // add_expression -> multiply_expression
#line 711 "MainParser.gppg"
                        {
      CurrentSemanticValue.expression = ValueStack[ValueStack.Depth-1].expression;
    }
#line default
        break;
      case 181: // add_expression -> add_expression, PLUS, multiply_expression
#line 714 "MainParser.gppg"
                                            {
      CurrentSemanticValue.expression = MiddleCodeGenerator.AdditionExpression(ValueStack[ValueStack.Depth-3].expression, ValueStack[ValueStack.Depth-1].expression);
    }
#line default
        break;
      case 182: // add_expression -> add_expression, MINUS, multiply_expression
#line 717 "MainParser.gppg"
                                             {
      CurrentSemanticValue.expression = MiddleCodeGenerator.SubtractionExpression(ValueStack[ValueStack.Depth-3].expression, ValueStack[ValueStack.Depth-1].expression);
    }
#line default
        break;
      case 183: // multiply_expression -> type_cast_expression
#line 722 "MainParser.gppg"
                         {
      CurrentSemanticValue.expression = ValueStack[ValueStack.Depth-1].expression;
    }
#line default
        break;
      case 184: // multiply_expression -> multiply_expression, multiply_operator, 
                //                        type_cast_expression
#line 725 "MainParser.gppg"
                                                               {
      CurrentSemanticValue.expression = MiddleCodeGenerator.MultiplyExpression(ValueStack[ValueStack.Depth-2].middleOperator, ValueStack[ValueStack.Depth-3].expression, ValueStack[ValueStack.Depth-1].expression);
    }
#line default
        break;
      case 185: // multiply_operator -> ASTERRISK
#line 730 "MainParser.gppg"
              { CurrentSemanticValue.middleOperator = MiddleOperator.Multiply; }
#line default
        break;
      case 186: // multiply_operator -> DIVIDE
#line 731 "MainParser.gppg"
              { CurrentSemanticValue.middleOperator = MiddleOperator.Divide;   }
#line default
        break;
      case 187: // multiply_operator -> MODULO
#line 732 "MainParser.gppg"
              { CurrentSemanticValue.middleOperator = MiddleOperator.Modulo;   }
#line default
        break;
      case 188: // type_cast_expression -> prefix_expression
#line 735 "MainParser.gppg"
                      {
      CurrentSemanticValue.expression = ValueStack[ValueStack.Depth-1].expression;
    }
#line default
        break;
      case 189: // type_cast_expression -> LEFT_PARENTHESIS, type_name, RIGHT_PARENTHESIS, 
                //                         type_cast_expression
#line 738 "MainParser.gppg"
                                                                      {
      CurrentSemanticValue.expression = MiddleCodeGenerator.CastExpression(ValueStack[ValueStack.Depth-3].type, ValueStack[ValueStack.Depth-1].expression);
    }
#line default
        break;
      case 190: // type_name -> declaration_specifier_list
#line 747 "MainParser.gppg"
                               {
      CurrentSemanticValue.type = MiddleCodeGenerator.
           TypeName(Specifier.SpecifierList(ValueStack[ValueStack.Depth-1].object_list), null);
    }
#line default
        break;
      case 191: // Anon@11 -> /* empty */
#line 751 "MainParser.gppg"
                               {
      SpecifierStack.Push(Specifier.SpecifierList(ValueStack[ValueStack.Depth-1].object_list));
    }
#line default
        break;
      case 192: // type_name -> declaration_specifier_list, Anon@11, abstract_declarator
#line 754 "MainParser.gppg"
                        {
      CurrentSemanticValue.type = MiddleCodeGenerator.
           TypeName(SpecifierStack.Pop(), ValueStack[ValueStack.Depth-1].declarator);
    }
#line default
        break;
      case 193: // prefix_expression -> postfix_expression
#line 760 "MainParser.gppg"
                       {
      CurrentSemanticValue.expression = ValueStack[ValueStack.Depth-1].expression; 
    }
#line default
        break;
      case 194: // prefix_expression -> prefix_unary_operator, type_cast_expression
#line 763 "MainParser.gppg"
                                               {
      CurrentSemanticValue.expression = MiddleCodeGenerator.UnaryExpression(ValueStack[ValueStack.Depth-2].middleOperator, ValueStack[ValueStack.Depth-1].expression);
    }
#line default
        break;
      case 195: // prefix_expression -> LOGICAL_NOT, type_cast_expression
#line 766 "MainParser.gppg"
                                     {
      CurrentSemanticValue.expression = MiddleCodeGenerator.LogicalNotExpression(ValueStack[ValueStack.Depth-1].expression);
    }
#line default
        break;
      case 196: // prefix_expression -> SIZEOF, prefix_expression
#line 769 "MainParser.gppg"
                             {
      CurrentSemanticValue.expression = MiddleCodeGenerator.SizeOfExpression(ValueStack[ValueStack.Depth-1].expression);
    }
#line default
        break;
      case 197: // prefix_expression -> SIZEOF, LEFT_PARENTHESIS, type_name, RIGHT_PARENTHESIS
#line 772 "MainParser.gppg"
                                                        {
      CurrentSemanticValue.expression = MiddleCodeGenerator.SizeOfType(ValueStack[ValueStack.Depth-2].type);
    }
#line default
        break;
      case 198: // prefix_expression -> AMPERSAND, type_cast_expression
#line 775 "MainParser.gppg"
                                   {
      CurrentSemanticValue.expression = MiddleCodeGenerator.AddressExpression(ValueStack[ValueStack.Depth-1].expression);
    }
#line default
        break;
      case 199: // prefix_expression -> ASTERRISK, type_cast_expression
#line 778 "MainParser.gppg"
                                   {
      CurrentSemanticValue.expression = MiddleCodeGenerator.DereferenceExpression(ValueStack[ValueStack.Depth-1].expression);
    }
#line default
        break;
      case 200: // prefix_expression -> increment_operator, prefix_expression
#line 781 "MainParser.gppg"
                                         {
      CurrentSemanticValue.expression = MiddleCodeGenerator.PrefixIncrementExpression(ValueStack[ValueStack.Depth-2].middleOperator, ValueStack[ValueStack.Depth-1].expression);
    }
#line default
        break;
      case 201: // prefix_unary_operator -> PLUS
#line 786 "MainParser.gppg"
                { CurrentSemanticValue.middleOperator = MiddleOperator.Plus;       }
#line default
        break;
      case 202: // prefix_unary_operator -> MINUS
#line 787 "MainParser.gppg"
                { CurrentSemanticValue.middleOperator = MiddleOperator.Minus;      }
#line default
        break;
      case 203: // prefix_unary_operator -> BITWISE_NOT
#line 788 "MainParser.gppg"
                { CurrentSemanticValue.middleOperator = MiddleOperator.BitwiseNot; }
#line default
        break;
      case 204: // increment_operator -> INCREMENT
#line 791 "MainParser.gppg"
              { CurrentSemanticValue.middleOperator = MiddleOperator.Add; }
#line default
        break;
      case 205: // increment_operator -> DECREMENT
#line 792 "MainParser.gppg"
              { CurrentSemanticValue.middleOperator = MiddleOperator.Subtract; }
#line default
        break;
      case 206: // postfix_expression -> primary_expression
#line 795 "MainParser.gppg"
                       {
      CurrentSemanticValue.expression = ValueStack[ValueStack.Depth-1].expression; 
    }
#line default
        break;
      case 207: // postfix_expression -> postfix_expression, increment_operator
#line 798 "MainParser.gppg"
                                          {
      CurrentSemanticValue.expression = MiddleCodeGenerator.PostfixIncrementExpression(ValueStack[ValueStack.Depth-1].middleOperator, ValueStack[ValueStack.Depth-2].expression);
    }
#line default
        break;
      case 208: // postfix_expression -> postfix_expression, DOT, NAME
#line 801 "MainParser.gppg"
                                {
      CurrentSemanticValue.expression = MiddleCodeGenerator.DotExpression(ValueStack[ValueStack.Depth-3].expression, ValueStack[ValueStack.Depth-1].name);
    }
#line default
        break;
      case 209: // postfix_expression -> postfix_expression, ARROW, NAME
#line 804 "MainParser.gppg"
                                  {
      CurrentSemanticValue.expression = MiddleCodeGenerator.ArrowExpression(ValueStack[ValueStack.Depth-3].expression, ValueStack[ValueStack.Depth-1].name);
    }
#line default
        break;
      case 210: // postfix_expression -> postfix_expression, LEFT_SQUARE, expression, RIGHT_SQUARE
#line 807 "MainParser.gppg"
                                                           {
      CurrentSemanticValue.expression = MiddleCodeGenerator.IndexExpression(ValueStack[ValueStack.Depth-4].expression, ValueStack[ValueStack.Depth-2].expression);
    }
#line default
        break;
      case 211: // Anon@12 -> /* empty */
#line 810 "MainParser.gppg"
                       {
      MiddleCodeGenerator.CallHeader(ValueStack[ValueStack.Depth-1].expression);
    }
#line default
        break;
      case 212: // postfix_expression -> postfix_expression, Anon@12, LEFT_PARENTHESIS, 
                //                       optional_argument_expression_list, RIGHT_PARENTHESIS
#line 813 "MainParser.gppg"
                                                                         {
      CurrentSemanticValue.expression = MiddleCodeGenerator.CallExpression(ValueStack[ValueStack.Depth-5].expression, ValueStack[ValueStack.Depth-2].expression_list);
    }
#line default
        break;
      case 213: // optional_argument_expression_list -> /* empty */
#line 818 "MainParser.gppg"
                             { CurrentSemanticValue.expression_list = new List<Expression>(); }
#line default
        break;
      case 214: // optional_argument_expression_list -> argument_expression_list
#line 819 "MainParser.gppg"
                             { CurrentSemanticValue.expression_list = ValueStack[ValueStack.Depth-1].expression_list;                     }
#line default
        break;
      case 215: // argument_expression_list -> assignment_expression
#line 822 "MainParser.gppg"
                          {
      CurrentSemanticValue.expression_list = new List<Expression>();
      CurrentSemanticValue.expression_list.Add(MiddleCodeGenerator.ArgumentExpression(0, ValueStack[ValueStack.Depth-1].expression));
    }
#line default
        break;
      case 216: // argument_expression_list -> argument_expression_list, COMMA, 
                //                             assignment_expression
#line 826 "MainParser.gppg"
                                                         {
      ValueStack[ValueStack.Depth-3].expression_list.Add(MiddleCodeGenerator.ArgumentExpression(ValueStack[ValueStack.Depth-3].expression_list.Count, ValueStack[ValueStack.Depth-1].expression));
      CurrentSemanticValue.expression_list = ValueStack[ValueStack.Depth-3].expression_list;
    }
#line default
        break;
      case 217: // primary_expression -> LEFT_PARENTHESIS, expression, RIGHT_PARENTHESIS
#line 832 "MainParser.gppg"
                                                  {
      CurrentSemanticValue.expression = ValueStack[ValueStack.Depth-2].expression; 
    }
#line default
        break;
      case 218: // primary_expression -> VALUE
#line 835 "MainParser.gppg"
          {
      CurrentSemanticValue.expression = MiddleCodeGenerator.ValueExpression(ValueStack[ValueStack.Depth-1].symbol);
    }
#line default
        break;
      case 219: // primary_expression -> NAME
#line 838 "MainParser.gppg"
         {
      CurrentSemanticValue.expression = MiddleCodeGenerator.NameExpression(ValueStack[ValueStack.Depth-1].name);
    }
#line default
        break;
      case 220: // primary_expression -> REGISTER_NAME
#line 841 "MainParser.gppg"
                  {
      CurrentSemanticValue.expression = MiddleCodeGenerator.RegisterExpression(ValueStack[ValueStack.Depth-1].register);
    }
#line default
        break;
      case 221: // primary_expression -> CARRY_FLAG
#line 844 "MainParser.gppg"
               {
      CurrentSemanticValue.expression = MiddleCodeGenerator.CarryFlagExpression();
    }
#line default
        break;
      case 222: // primary_expression -> STACK_TOP
#line 847 "MainParser.gppg"
              {
      CurrentSemanticValue.expression = MiddleCodeGenerator.StackTopExpression();
    }
#line default
        break;
    }
#pragma warning restore 162, 1522
  }

  protected override string TerminalToString(int terminal)
  {
    if (aliases != null && aliases.ContainsKey(terminal))
        return aliases[terminal];
    else if (((Tokens)terminal).ToString() != terminal.ToString(CultureInfo.InvariantCulture))
        return ((Tokens)terminal).ToString();
    else
        return CharToString((char)terminal);
  }

#line 850 "MainParser.gppg"
 #line default
}
}
