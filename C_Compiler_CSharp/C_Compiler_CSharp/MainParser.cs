// This code was generated by the Gardens Point Parser Generator
// Copyright (c) Wayne Kelly, John Gough, QUT 2005-2014
// (see accompanying GPPGcopyright.rtf)

// GPPG version 1.5.2
// Machine:  STEFAN1968
// DateTime: 2020-06-24 17:52:31
// UserName: Stefan
// Input file <MainParser.gppg - 2020-06-08 14:22:57>

// options: lines gplex

using System;
using System.Collections.Generic;
using System.CodeDom.Compiler;
using System.Globalization;
using System.Text;
using QUT.Gppg;
using CCompiler;
using System.Numerics;

namespace CCompiler_Main
{
public enum Tokens {error=2,EOF=3,AUTO=4,REGISTER=5,STATIC=6,
    EXTERN=7,TYPEDEF=8,CONSTANT=9,VOLATILE=10,SIGNED=11,UNSIGNED=12,
    CHAR=13,SHORT=14,INT=15,LONG=16,FLOAT=17,DOUBLE=18,
    VOID=19,ENUM=20,STRUCT=21,UNION=22,PLUS=23,MINUS=24,
    DIVIDE=25,MODULO=26,INCREMENT=27,DECREMENT=28,EQUAL=29,NOT_EQUAL=30,
    LESS_THAN=31,LESS_THAN_EQUAL=32,GREATER_THAN=33,GREATER_THAN_EQUAL=34,LEFT_SHIFT=35,RIGHT_SHIFT=36,
    ASSIGN=37,ADD_ASSIGN=38,SUBTRACT_ASSIGN=39,MULTIPLY_ASSIGN=40,DIVIDE_ASSIGN=41,MODULO_ASSIGN=42,
    LEFT_SHIFT_ASSIGN=43,RIGHT_SHIFT_ASSIGN=44,AND_ASSIGN=45,OR_ASSIGN=46,XOR_ASSIGN=47,COLON=48,
    COMMA=49,SEMICOLON=50,ELLIPSE=51,DOT=52,ARROW=53,ASTERRISK=54,
    AMPERSAND=55,LEFT_PARENTHESIS=56,RIGHT_PARENTHESIS=57,LEFT_BLOCK=58,RIGHT_BLOCK=59,LEFT_SQUARE=60,
    RIGHT_SQUARE=61,SIZEOF=62,LOGICAL_OR=63,LOGICAL_AND=64,LOGICAL_NOT=65,BITWISE_XOR=66,
    BITWISE_OR=67,BITWISE_NOT=68,QUESTION_MARK=69,IF=70,ELSE=71,SWITCH=72,
    CASE=73,DEFAULT=74,FOR=75,WHILE=76,DO=77,CONTINUE=78,
    BREAK=79,RETURN=80,GOTO=81,INTERRUPT=82,JUMP_REGISTER=83,SYSCALL=84,
    CARRY_FLAG=85,NAME=86,REGISTER_NAME=87,TYPEDEF_NAME=88,VALUE=89};

public partial struct ValueType
#line 30 "MainParser.gppg"
       {
  public string name;
  public Register register;
  public CCompiler.Type type;
  public List<CCompiler.Type> type_list;
  public Sort sort;
  public Symbol symbol;
  public IDictionary<string,Symbol> symbol_map;
  public ISet<Pair<Symbol,bool>> symbol_bool_pair_set;
  public Pair<Symbol,bool> symbol_bool_pair;
  public Pair<string,Symbol> string_symbol_pair;
  public List<Pair<string,Symbol>> string_symbol_pair_list;
  public List<string> string_list;
  public Declarator declarator;
  public List<Declarator> declarator_list;
  public MiddleOperator middleOperator;
  public Expression expression;
  public List<Expression> expression_list;
  public Statement statement;
  public Pair<List<Pair<string,Symbol>>,Boolean> parameter_pair;
  public List<MiddleCode> middle_code_list;
  public object obj;
  public List<object> object_list;
  public List<Mask> mask_list;
  public Mask mask;
}
#line default
// Abstract base class for GPLEX scanners
[GeneratedCodeAttribute( "Gardens Point Parser Generator", "1.5.2")]
public abstract class ScanBase : AbstractScanner<ValueType,LexLocation> {
  private LexLocation __yylloc = new LexLocation();
  public override LexLocation yylloc { get { return __yylloc; } set { __yylloc = value; } }
  protected virtual bool yywrap() { return true; }
}

// Utility class for encapsulating token information
[GeneratedCodeAttribute( "Gardens Point Parser Generator", "1.5.2")]
public class ScanObj {
  public int token;
  public ValueType yylval;
  public LexLocation yylloc;
  public ScanObj( int t, ValueType val, LexLocation loc ) {
    this.token = t; this.yylval = val; this.yylloc = loc;
  }
}

[GeneratedCodeAttribute( "Gardens Point Parser Generator", "1.5.2")]
public partial class Parser: ShiftReduceParser<ValueType, LexLocation>
{
  // Verbatim content from MainParser.gppg - 2020-06-08 14:22:57
#line 8 "MainParser.gppg"
  public static Stack<Specifier> SpecifierStack = new Stack<Specifier>();
  public static Stack<BigInteger> EnumValueStack = new Stack<BigInteger>();
  public static int CallDepth = 0;
#line default
  // End verbatim content from MainParser.gppg - 2020-06-08 14:22:57

#pragma warning disable 649
  private static Dictionary<int, string> aliases;
#pragma warning restore 649
  private static Rule[] rules = new Rule[224];
  private static State[] states = new State[415];
  private static string[] nonTerms = new string[] {
      "declaration_specifier", "declaration_specifier_list_x", "declaration_specifier_list", 
      "optional_name", "struct_or_union_specifier", "struct_or_union", "enum_specifier", 
      "enum_list", "enum", "declarator_list", "initializerialization_bitfield_simple_declarator", 
      "declaration", "optional_simple_declarator", "declarator", "pointer_declarator", 
      "optional_pointer_list", "pointer_list", "pointer", "optional_qualifier_list", 
      "qualifier", "optional_parameter_ellipse_list", "parameter_ellipse_list", 
      "parameter_list", "parameter_declaration", "optional_name_list", "name_list", 
      "initializer_list", "initializer", "type_name", "abstract_declarator", 
      "direct_abstract_declarator", "assignment_operator", "equality_operator", 
      "relation_operator", "add_operator", "shift_operator", "multiply_operator", 
      "prefix_add_operator", "increment_operator", "optional_constant_integral_expression", 
      "constant_integral_expression", "optional_expression", "expression", "assignment_expression", 
      "condition_expression", "logical_or_expression", "logical_and_expression", 
      "bitwise_or_expression", "bitwise_xor_expression", "bitwise_and_expression", 
      "equality_expression", "relation_expression", "shift_expression", "add_expression", 
      "multiply_expression", "type_cast_expression", "prefix_expression", "postfix_expression", 
      "primary_expression", "optional_statement_list", "statement", "closed_statement", 
      "opened_statement", "optional_argument_expression_list", "argument_expression_list", 
      "translation_unit", "$accept", "external_declaration", "function_definitializerion", 
      "Anon@1", "optional_declaration_list", "Anon@2", "Anon@3", "Anon@4", "declaration_list", 
      "Anon@5", "Anon@6", "Anon@7", "Anon@8", "Anon@9", "optional_comma", "switch_header", 
      "loop_header", "Anon@10", "Anon@11", "Anon@12", };

  static Parser() {
    states[0] = new State(new int[]{9,211,10,212,4,213,5,214,6,215,7,216,8,217,19,218,13,219,14,220,15,221,16,222,17,223,18,224,11,225,12,226,21,237,22,238,20,240,88,253,54,177,86,-62,56,-62},new int[]{-66,1,-68,414,-69,4,-2,5,-3,235,-1,209,-5,227,-6,228,-7,239,-14,406,-16,270,-17,302,-18,183,-12,413});
    states[1] = new State(new int[]{3,2,9,211,10,212,4,213,5,214,6,215,7,216,8,217,19,218,13,219,14,220,15,221,16,222,17,223,18,224,11,225,12,226,21,237,22,238,20,240,88,253,54,177,86,-62,56,-62},new int[]{-68,3,-69,4,-2,5,-3,235,-1,209,-5,227,-6,228,-7,239,-14,406,-16,270,-17,302,-18,183,-12,413});
    states[2] = new State(-1);
    states[3] = new State(-3);
    states[4] = new State(-4);
    states[5] = new State(new int[]{54,177,86,-62,56,-62,48,-59},new int[]{-14,6,-10,255,-16,270,-17,302,-18,183,-11,306,-13,303});
    states[6] = new State(new int[]{37,260,50,-56,49,-56,48,-60,9,-6,10,-6,4,-6,5,-6,6,-6,7,-6,8,-6,19,-6,13,-6,14,-6,15,-6,16,-6,17,-6,18,-6,11,-6,12,-6,21,-6,22,-6,20,-6,88,-6,58,-6},new int[]{-70,7});
    states[7] = new State(new int[]{9,211,10,212,4,213,5,214,6,215,7,216,8,217,19,218,13,219,14,220,15,221,16,222,17,223,18,224,11,225,12,226,21,237,22,238,20,240,88,253,58,-12},new int[]{-71,8,-75,405,-12,307,-3,235,-1,209,-5,227,-6,228,-7,239,-2,254});
    states[8] = new State(-7,new int[]{-72,9});
    states[9] = new State(new int[]{58,10});
    states[10] = new State(-104,new int[]{-60,11});
    states[11] = new State(new int[]{59,12,70,15,72,24,73,31,76,36,75,43,86,54,77,334,74,343,78,374,79,376,58,378,81,382,80,385,89,149,87,151,85,152,56,153,23,161,24,162,65,163,68,165,62,167,55,191,54,193,27,198,28,199,9,211,10,212,4,213,5,214,6,215,7,216,8,217,19,218,13,219,14,220,15,221,16,222,17,223,18,224,11,225,12,226,21,237,22,238,20,240,88,253,83,391,82,396,84,401,50,-135},new int[]{-61,13,-63,14,-62,342,-42,388,-43,86,-44,121,-45,89,-46,90,-47,122,-48,123,-49,124,-50,125,-51,126,-52,129,-53,134,-54,137,-55,140,-56,144,-57,145,-58,112,-59,148,-38,159,-39,195,-12,390,-3,235,-1,209,-5,227,-6,228,-7,239,-2,254});
    states[12] = new State(-8);
    states[13] = new State(-105);
    states[14] = new State(-106);
    states[15] = new State(new int[]{56,16});
    states[16] = new State(new int[]{89,149,86,150,87,151,85,152,56,153,23,161,24,162,65,163,68,165,62,167,55,191,54,193,27,198,28,199},new int[]{-43,17,-44,121,-45,89,-46,90,-47,122,-48,123,-49,124,-50,125,-51,126,-52,129,-53,134,-54,137,-55,140,-56,144,-57,145,-58,112,-59,148,-38,159,-39,195});
    states[17] = new State(new int[]{57,18,49,87});
    states[18] = new State(new int[]{70,15,72,24,73,31,76,36,75,43,86,54,77,334,74,343,78,374,79,376,58,378,81,382,80,385,89,149,87,151,85,152,56,153,23,161,24,162,65,163,68,165,62,167,55,191,54,193,27,198,28,199,9,211,10,212,4,213,5,214,6,215,7,216,8,217,19,218,13,219,14,220,15,221,16,222,17,223,18,224,11,225,12,226,21,237,22,238,20,240,88,253,83,391,82,396,84,401,50,-135},new int[]{-61,19,-62,20,-63,14,-42,388,-43,86,-44,121,-45,89,-46,90,-47,122,-48,123,-49,124,-50,125,-51,126,-52,129,-53,134,-54,137,-55,140,-56,144,-57,145,-58,112,-59,148,-38,159,-39,195,-12,390,-3,235,-1,209,-5,227,-6,228,-7,239,-2,254});
    states[19] = new State(-110);
    states[20] = new State(new int[]{71,21,59,-107,70,-107,72,-107,73,-107,76,-107,75,-107,86,-107,77,-107,74,-107,78,-107,79,-107,58,-107,81,-107,80,-107,89,-107,87,-107,85,-107,56,-107,23,-107,24,-107,65,-107,68,-107,62,-107,55,-107,54,-107,27,-107,28,-107,9,-107,10,-107,4,-107,5,-107,6,-107,7,-107,8,-107,19,-107,13,-107,14,-107,15,-107,16,-107,17,-107,18,-107,11,-107,12,-107,21,-107,22,-107,20,-107,88,-107,83,-107,82,-107,84,-107,50,-107});
    states[21] = new State(new int[]{70,15,72,24,73,31,76,36,75,43,86,54,77,334,74,343,78,374,79,376,58,378,81,382,80,385,89,149,87,151,85,152,56,153,23,161,24,162,65,163,68,165,62,167,55,191,54,193,27,198,28,199,9,211,10,212,4,213,5,214,6,215,7,216,8,217,19,218,13,219,14,220,15,221,16,222,17,223,18,224,11,225,12,226,21,237,22,238,20,240,88,253,83,391,82,396,84,401,50,-135},new int[]{-63,22,-62,23,-42,388,-43,86,-44,121,-45,89,-46,90,-47,122,-48,123,-49,124,-50,125,-51,126,-52,129,-53,134,-54,137,-55,140,-56,144,-57,145,-58,112,-59,148,-38,159,-39,195,-12,390,-3,235,-1,209,-5,227,-6,228,-7,239,-2,254});
    states[22] = new State(-111);
    states[23] = new State(-117);
    states[24] = new State(-108,new int[]{-82,25});
    states[25] = new State(new int[]{56,26});
    states[26] = new State(new int[]{89,149,86,150,87,151,85,152,56,153,23,161,24,162,65,163,68,165,62,167,55,191,54,193,27,198,28,199},new int[]{-43,27,-44,121,-45,89,-46,90,-47,122,-48,123,-49,124,-50,125,-51,126,-52,129,-53,134,-54,137,-55,140,-56,144,-57,145,-58,112,-59,148,-38,159,-39,195});
    states[27] = new State(new int[]{57,28,49,87});
    states[28] = new State(new int[]{70,15,72,24,73,31,76,36,75,43,86,54,77,334,74,343,78,374,79,376,58,378,81,382,80,385,89,149,87,151,85,152,56,153,23,161,24,162,65,163,68,165,62,167,55,191,54,193,27,198,28,199,9,211,10,212,4,213,5,214,6,215,7,216,8,217,19,218,13,219,14,220,15,221,16,222,17,223,18,224,11,225,12,226,21,237,22,238,20,240,88,253,83,391,82,396,84,401,50,-135},new int[]{-63,29,-62,30,-42,388,-43,86,-44,121,-45,89,-46,90,-47,122,-48,123,-49,124,-50,125,-51,126,-52,129,-53,134,-54,137,-55,140,-56,144,-57,145,-58,112,-59,148,-38,159,-39,195,-12,390,-3,235,-1,209,-5,227,-6,228,-7,239,-2,254});
    states[29] = new State(-112);
    states[30] = new State(-118);
    states[31] = new State(new int[]{89,149,86,150,87,151,85,152,56,153,23,161,24,162,65,163,68,165,62,167,55,191,54,193,27,198,28,199},new int[]{-41,32,-45,190,-46,90,-47,122,-48,123,-49,124,-50,125,-51,126,-52,129,-53,134,-54,137,-55,140,-56,144,-57,111,-58,112,-59,148,-38,159,-39,195});
    states[32] = new State(new int[]{48,33});
    states[33] = new State(new int[]{70,15,72,24,73,31,76,36,75,43,86,54,77,334,74,343,78,374,79,376,58,378,81,382,80,385,89,149,87,151,85,152,56,153,23,161,24,162,65,163,68,165,62,167,55,191,54,193,27,198,28,199,9,211,10,212,4,213,5,214,6,215,7,216,8,217,19,218,13,219,14,220,15,221,16,222,17,223,18,224,11,225,12,226,21,237,22,238,20,240,88,253,83,391,82,396,84,401,50,-135},new int[]{-63,34,-62,35,-42,388,-43,86,-44,121,-45,89,-46,90,-47,122,-48,123,-49,124,-50,125,-51,126,-52,129,-53,134,-54,137,-55,140,-56,144,-57,145,-58,112,-59,148,-38,159,-39,195,-12,390,-3,235,-1,209,-5,227,-6,228,-7,239,-2,254});
    states[34] = new State(-113);
    states[35] = new State(-122);
    states[36] = new State(-109,new int[]{-83,37});
    states[37] = new State(new int[]{56,38});
    states[38] = new State(new int[]{89,149,86,150,87,151,85,152,56,153,23,161,24,162,65,163,68,165,62,167,55,191,54,193,27,198,28,199},new int[]{-43,39,-44,121,-45,89,-46,90,-47,122,-48,123,-49,124,-50,125,-51,126,-52,129,-53,134,-54,137,-55,140,-56,144,-57,145,-58,112,-59,148,-38,159,-39,195});
    states[39] = new State(new int[]{57,40,49,87});
    states[40] = new State(new int[]{70,15,72,24,73,31,76,36,75,43,86,54,77,334,74,343,78,374,79,376,58,378,81,382,80,385,89,149,87,151,85,152,56,153,23,161,24,162,65,163,68,165,62,167,55,191,54,193,27,198,28,199,9,211,10,212,4,213,5,214,6,215,7,216,8,217,19,218,13,219,14,220,15,221,16,222,17,223,18,224,11,225,12,226,21,237,22,238,20,240,88,253,83,391,82,396,84,401,50,-135},new int[]{-63,41,-62,42,-42,388,-43,86,-44,121,-45,89,-46,90,-47,122,-48,123,-49,124,-50,125,-51,126,-52,129,-53,134,-54,137,-55,140,-56,144,-57,145,-58,112,-59,148,-38,159,-39,195,-12,390,-3,235,-1,209,-5,227,-6,228,-7,239,-2,254});
    states[41] = new State(-114);
    states[42] = new State(-119);
    states[43] = new State(-109,new int[]{-83,44});
    states[44] = new State(new int[]{56,45});
    states[45] = new State(new int[]{89,149,86,150,87,151,85,152,56,153,23,161,24,162,65,163,68,165,62,167,55,191,54,193,27,198,28,199,50,-135},new int[]{-42,46,-43,86,-44,121,-45,89,-46,90,-47,122,-48,123,-49,124,-50,125,-51,126,-52,129,-53,134,-54,137,-55,140,-56,144,-57,145,-58,112,-59,148,-38,159,-39,195});
    states[46] = new State(new int[]{50,47});
    states[47] = new State(new int[]{89,149,86,150,87,151,85,152,56,153,23,161,24,162,65,163,68,165,62,167,55,191,54,193,27,198,28,199,50,-135},new int[]{-42,48,-43,86,-44,121,-45,89,-46,90,-47,122,-48,123,-49,124,-50,125,-51,126,-52,129,-53,134,-54,137,-55,140,-56,144,-57,145,-58,112,-59,148,-38,159,-39,195});
    states[48] = new State(new int[]{50,49});
    states[49] = new State(new int[]{89,149,86,150,87,151,85,152,56,153,23,161,24,162,65,163,68,165,62,167,55,191,54,193,27,198,28,199,57,-135},new int[]{-42,50,-43,86,-44,121,-45,89,-46,90,-47,122,-48,123,-49,124,-50,125,-51,126,-52,129,-53,134,-54,137,-55,140,-56,144,-57,145,-58,112,-59,148,-38,159,-39,195});
    states[50] = new State(new int[]{57,51});
    states[51] = new State(new int[]{70,15,72,24,73,31,76,36,75,43,86,54,77,334,74,343,78,374,79,376,58,378,81,382,80,385,89,149,87,151,85,152,56,153,23,161,24,162,65,163,68,165,62,167,55,191,54,193,27,198,28,199,9,211,10,212,4,213,5,214,6,215,7,216,8,217,19,218,13,219,14,220,15,221,16,222,17,223,18,224,11,225,12,226,21,237,22,238,20,240,88,253,83,391,82,396,84,401,50,-135},new int[]{-63,52,-62,53,-42,388,-43,86,-44,121,-45,89,-46,90,-47,122,-48,123,-49,124,-50,125,-51,126,-52,129,-53,134,-54,137,-55,140,-56,144,-57,145,-58,112,-59,148,-38,159,-39,195,-12,390,-3,235,-1,209,-5,227,-6,228,-7,239,-2,254});
    states[52] = new State(-115);
    states[53] = new State(-121);
    states[54] = new State(new int[]{48,55,52,-220,53,-220,60,-220,27,-220,28,-220,56,-220,37,-220,38,-220,39,-220,40,-220,41,-220,42,-220,45,-220,46,-220,47,-220,43,-220,44,-220,54,-220,25,-220,26,-220,23,-220,24,-220,35,-220,36,-220,31,-220,32,-220,33,-220,34,-220,29,-220,30,-220,55,-220,66,-220,67,-220,64,-220,63,-220,69,-220,49,-220,50,-220});
    states[55] = new State(new int[]{70,57,72,63,73,68,76,71,75,76,86,85},new int[]{-63,56});
    states[56] = new State(-116);
    states[57] = new State(new int[]{56,58});
    states[58] = new State(new int[]{89,149,86,150,87,151,85,152,56,153,23,161,24,162,65,163,68,165,62,167,55,191,54,193,27,198,28,199},new int[]{-43,59,-44,121,-45,89,-46,90,-47,122,-48,123,-49,124,-50,125,-51,126,-52,129,-53,134,-54,137,-55,140,-56,144,-57,145,-58,112,-59,148,-38,159,-39,195});
    states[59] = new State(new int[]{57,60,49,87});
    states[60] = new State(new int[]{70,15,72,24,73,31,76,36,75,43,86,54,77,334,74,343,78,374,79,376,58,378,81,382,80,385,89,149,87,151,85,152,56,153,23,161,24,162,65,163,68,165,62,167,55,191,54,193,27,198,28,199,9,211,10,212,4,213,5,214,6,215,7,216,8,217,19,218,13,219,14,220,15,221,16,222,17,223,18,224,11,225,12,226,21,237,22,238,20,240,88,253,83,391,82,396,84,401,50,-135},new int[]{-61,19,-62,61,-63,14,-42,388,-43,86,-44,121,-45,89,-46,90,-47,122,-48,123,-49,124,-50,125,-51,126,-52,129,-53,134,-54,137,-55,140,-56,144,-57,145,-58,112,-59,148,-38,159,-39,195,-12,390,-3,235,-1,209,-5,227,-6,228,-7,239,-2,254});
    states[61] = new State(new int[]{71,62,59,-107,70,-107,72,-107,73,-107,76,-107,75,-107,86,-107,77,-107,74,-107,78,-107,79,-107,58,-107,81,-107,80,-107,89,-107,87,-107,85,-107,56,-107,23,-107,24,-107,65,-107,68,-107,62,-107,55,-107,54,-107,27,-107,28,-107,9,-107,10,-107,4,-107,5,-107,6,-107,7,-107,8,-107,19,-107,13,-107,14,-107,15,-107,16,-107,17,-107,18,-107,11,-107,12,-107,21,-107,22,-107,20,-107,88,-107,83,-107,82,-107,84,-107,50,-107});
    states[62] = new State(new int[]{70,57,72,63,73,68,76,71,75,76,86,85},new int[]{-63,22});
    states[63] = new State(-108,new int[]{-82,64});
    states[64] = new State(new int[]{56,65});
    states[65] = new State(new int[]{89,149,86,150,87,151,85,152,56,153,23,161,24,162,65,163,68,165,62,167,55,191,54,193,27,198,28,199},new int[]{-43,66,-44,121,-45,89,-46,90,-47,122,-48,123,-49,124,-50,125,-51,126,-52,129,-53,134,-54,137,-55,140,-56,144,-57,145,-58,112,-59,148,-38,159,-39,195});
    states[66] = new State(new int[]{57,67,49,87});
    states[67] = new State(new int[]{70,57,72,63,73,68,76,71,75,76,86,85},new int[]{-63,29});
    states[68] = new State(new int[]{89,149,86,150,87,151,85,152,56,153,23,161,24,162,65,163,68,165,62,167,55,191,54,193,27,198,28,199},new int[]{-41,69,-45,190,-46,90,-47,122,-48,123,-49,124,-50,125,-51,126,-52,129,-53,134,-54,137,-55,140,-56,144,-57,111,-58,112,-59,148,-38,159,-39,195});
    states[69] = new State(new int[]{48,70});
    states[70] = new State(new int[]{70,57,72,63,73,68,76,71,75,76,86,85},new int[]{-63,34});
    states[71] = new State(-109,new int[]{-83,72});
    states[72] = new State(new int[]{56,73});
    states[73] = new State(new int[]{89,149,86,150,87,151,85,152,56,153,23,161,24,162,65,163,68,165,62,167,55,191,54,193,27,198,28,199},new int[]{-43,74,-44,121,-45,89,-46,90,-47,122,-48,123,-49,124,-50,125,-51,126,-52,129,-53,134,-54,137,-55,140,-56,144,-57,145,-58,112,-59,148,-38,159,-39,195});
    states[74] = new State(new int[]{57,75,49,87});
    states[75] = new State(new int[]{70,57,72,63,73,68,76,71,75,76,86,85},new int[]{-63,41});
    states[76] = new State(-109,new int[]{-83,77});
    states[77] = new State(new int[]{56,78});
    states[78] = new State(new int[]{89,149,86,150,87,151,85,152,56,153,23,161,24,162,65,163,68,165,62,167,55,191,54,193,27,198,28,199,50,-135},new int[]{-42,79,-43,86,-44,121,-45,89,-46,90,-47,122,-48,123,-49,124,-50,125,-51,126,-52,129,-53,134,-54,137,-55,140,-56,144,-57,145,-58,112,-59,148,-38,159,-39,195});
    states[79] = new State(new int[]{50,80});
    states[80] = new State(new int[]{89,149,86,150,87,151,85,152,56,153,23,161,24,162,65,163,68,165,62,167,55,191,54,193,27,198,28,199,50,-135},new int[]{-42,81,-43,86,-44,121,-45,89,-46,90,-47,122,-48,123,-49,124,-50,125,-51,126,-52,129,-53,134,-54,137,-55,140,-56,144,-57,145,-58,112,-59,148,-38,159,-39,195});
    states[81] = new State(new int[]{50,82});
    states[82] = new State(new int[]{89,149,86,150,87,151,85,152,56,153,23,161,24,162,65,163,68,165,62,167,55,191,54,193,27,198,28,199,57,-135},new int[]{-42,83,-43,86,-44,121,-45,89,-46,90,-47,122,-48,123,-49,124,-50,125,-51,126,-52,129,-53,134,-54,137,-55,140,-56,144,-57,145,-58,112,-59,148,-38,159,-39,195});
    states[83] = new State(new int[]{57,84});
    states[84] = new State(new int[]{70,57,72,63,73,68,76,71,75,76,86,85},new int[]{-63,52});
    states[85] = new State(new int[]{48,55});
    states[86] = new State(new int[]{49,87,50,-136,57,-136});
    states[87] = new State(new int[]{89,149,86,150,87,151,85,152,56,153,23,161,24,162,65,163,68,165,62,167,55,191,54,193,27,198,28,199},new int[]{-44,88,-45,89,-46,90,-47,122,-48,123,-49,124,-50,125,-51,126,-52,129,-53,134,-54,137,-55,140,-56,144,-57,145,-58,112,-59,148,-38,159,-39,195});
    states[88] = new State(-138);
    states[89] = new State(-139);
    states[90] = new State(new int[]{63,91,69,330,49,-152,50,-152,57,-152,48,-152,61,-152,59,-152});
    states[91] = new State(new int[]{89,149,86,150,87,151,85,152,56,153,23,161,24,162,65,163,68,165,62,167,55,191,54,193,27,198,28,199},new int[]{-47,92,-48,123,-49,124,-50,125,-51,126,-52,129,-53,134,-54,137,-55,140,-56,144,-57,111,-58,112,-59,148,-38,159,-39,195});
    states[92] = new State(new int[]{64,93,63,-158,69,-158,49,-158,50,-158,57,-158,48,-158,61,-158,59,-158});
    states[93] = new State(new int[]{89,149,86,150,87,151,85,152,56,153,23,161,24,162,65,163,68,165,62,167,55,191,54,193,27,198,28,199},new int[]{-48,94,-49,124,-50,125,-51,126,-52,129,-53,134,-54,137,-55,140,-56,144,-57,111,-58,112,-59,148,-38,159,-39,195});
    states[94] = new State(new int[]{67,95,64,-160,63,-160,69,-160,49,-160,50,-160,57,-160,48,-160,61,-160,59,-160});
    states[95] = new State(new int[]{89,149,86,150,87,151,85,152,56,153,23,161,24,162,65,163,68,165,62,167,55,191,54,193,27,198,28,199},new int[]{-49,96,-50,125,-51,126,-52,129,-53,134,-54,137,-55,140,-56,144,-57,111,-58,112,-59,148,-38,159,-39,195});
    states[96] = new State(new int[]{66,97,67,-162,64,-162,63,-162,69,-162,49,-162,50,-162,57,-162,48,-162,61,-162,59,-162});
    states[97] = new State(new int[]{89,149,86,150,87,151,85,152,56,153,23,161,24,162,65,163,68,165,62,167,55,191,54,193,27,198,28,199},new int[]{-50,98,-51,126,-52,129,-53,134,-54,137,-55,140,-56,144,-57,111,-58,112,-59,148,-38,159,-39,195});
    states[98] = new State(new int[]{55,99,66,-164,67,-164,64,-164,63,-164,69,-164,49,-164,50,-164,57,-164,48,-164,61,-164,59,-164});
    states[99] = new State(new int[]{89,149,86,150,87,151,85,152,56,153,23,161,24,162,65,163,68,165,62,167,55,191,54,193,27,198,28,199},new int[]{-51,100,-52,129,-53,134,-54,137,-55,140,-56,144,-57,111,-58,112,-59,148,-38,159,-39,195});
    states[100] = new State(new int[]{29,127,30,128,55,-166,66,-166,67,-166,64,-166,63,-166,69,-166,49,-166,50,-166,57,-166,48,-166,61,-166,59,-166},new int[]{-33,101});
    states[101] = new State(new int[]{89,149,86,150,87,151,85,152,56,153,23,161,24,162,65,163,68,165,62,167,55,191,54,193,27,198,28,199},new int[]{-52,102,-53,134,-54,137,-55,140,-56,144,-57,111,-58,112,-59,148,-38,159,-39,195});
    states[102] = new State(new int[]{31,130,32,131,33,132,34,133,29,-168,30,-168,55,-168,66,-168,67,-168,64,-168,63,-168,69,-168,49,-168,50,-168,57,-168,48,-168,61,-168,59,-168},new int[]{-34,103});
    states[103] = new State(new int[]{89,149,86,150,87,151,85,152,56,153,23,161,24,162,65,163,68,165,62,167,55,191,54,193,27,198,28,199},new int[]{-53,104,-54,137,-55,140,-56,144,-57,111,-58,112,-59,148,-38,159,-39,195});
    states[104] = new State(new int[]{35,135,36,136,31,-172,32,-172,33,-172,34,-172,29,-172,30,-172,55,-172,66,-172,67,-172,64,-172,63,-172,69,-172,49,-172,50,-172,57,-172,48,-172,61,-172,59,-172},new int[]{-36,105});
    states[105] = new State(new int[]{89,149,86,150,87,151,85,152,56,153,23,161,24,162,65,163,68,165,62,167,55,191,54,193,27,198,28,199},new int[]{-54,106,-55,140,-56,144,-57,111,-58,112,-59,148,-38,159,-39,195});
    states[106] = new State(new int[]{23,138,24,139,35,-178,36,-178,31,-178,32,-178,33,-178,34,-178,29,-178,30,-178,55,-178,66,-178,67,-178,64,-178,63,-178,69,-178,49,-178,50,-178,57,-178,48,-178,61,-178,59,-178},new int[]{-35,107});
    states[107] = new State(new int[]{89,149,86,150,87,151,85,152,56,153,23,161,24,162,65,163,68,165,62,167,55,191,54,193,27,198,28,199},new int[]{-55,108,-56,144,-57,111,-58,112,-59,148,-38,159,-39,195});
    states[108] = new State(new int[]{54,141,25,142,26,143,23,-182,24,-182,35,-182,36,-182,31,-182,32,-182,33,-182,34,-182,29,-182,30,-182,55,-182,66,-182,67,-182,64,-182,63,-182,69,-182,49,-182,50,-182,57,-182,48,-182,61,-182,59,-182},new int[]{-37,109});
    states[109] = new State(new int[]{89,149,86,150,87,151,85,152,56,153,23,161,24,162,65,163,68,165,62,167,55,191,54,193,27,198,28,199},new int[]{-56,110,-57,111,-58,112,-59,148,-38,159,-39,195});
    states[110] = new State(-186);
    states[111] = new State(-190);
    states[112] = new State(new int[]{52,114,53,116,60,118,27,198,28,199,37,-195,38,-195,39,-195,40,-195,41,-195,42,-195,45,-195,46,-195,47,-195,43,-195,44,-195,54,-195,25,-195,26,-195,23,-195,24,-195,35,-195,36,-195,31,-195,32,-195,33,-195,34,-195,29,-195,30,-195,55,-195,66,-195,67,-195,64,-195,63,-195,69,-195,49,-195,50,-195,57,-195,48,-195,61,-195,59,-195,56,-213},new int[]{-39,113,-86,322});
    states[113] = new State(-209);
    states[114] = new State(new int[]{86,115});
    states[115] = new State(-210);
    states[116] = new State(new int[]{86,117});
    states[117] = new State(-211);
    states[118] = new State(new int[]{89,149,86,150,87,151,85,152,56,153,23,161,24,162,65,163,68,165,62,167,55,191,54,193,27,198,28,199},new int[]{-43,119,-44,121,-45,89,-46,90,-47,122,-48,123,-49,124,-50,125,-51,126,-52,129,-53,134,-54,137,-55,140,-56,144,-57,145,-58,112,-59,148,-38,159,-39,195});
    states[119] = new State(new int[]{61,120,49,87});
    states[120] = new State(-212);
    states[121] = new State(-137);
    states[122] = new State(new int[]{64,93,63,-157,69,-157,49,-157,50,-157,57,-157,48,-157,61,-157,59,-157});
    states[123] = new State(new int[]{67,95,64,-159,63,-159,69,-159,49,-159,50,-159,57,-159,48,-159,61,-159,59,-159});
    states[124] = new State(new int[]{66,97,67,-161,64,-161,63,-161,69,-161,49,-161,50,-161,57,-161,48,-161,61,-161,59,-161});
    states[125] = new State(new int[]{55,99,66,-163,67,-163,64,-163,63,-163,69,-163,49,-163,50,-163,57,-163,48,-163,61,-163,59,-163});
    states[126] = new State(new int[]{29,127,30,128,55,-165,66,-165,67,-165,64,-165,63,-165,69,-165,49,-165,50,-165,57,-165,48,-165,61,-165,59,-165},new int[]{-33,101});
    states[127] = new State(-169);
    states[128] = new State(-170);
    states[129] = new State(new int[]{31,130,32,131,33,132,34,133,29,-167,30,-167,55,-167,66,-167,67,-167,64,-167,63,-167,69,-167,49,-167,50,-167,57,-167,48,-167,61,-167,59,-167},new int[]{-34,103});
    states[130] = new State(-173);
    states[131] = new State(-174);
    states[132] = new State(-175);
    states[133] = new State(-176);
    states[134] = new State(new int[]{35,135,36,136,31,-171,32,-171,33,-171,34,-171,29,-171,30,-171,55,-171,66,-171,67,-171,64,-171,63,-171,69,-171,49,-171,50,-171,57,-171,48,-171,61,-171,59,-171},new int[]{-36,105});
    states[135] = new State(-179);
    states[136] = new State(-180);
    states[137] = new State(new int[]{23,138,24,139,35,-177,36,-177,31,-177,32,-177,33,-177,34,-177,29,-177,30,-177,55,-177,66,-177,67,-177,64,-177,63,-177,69,-177,49,-177,50,-177,57,-177,48,-177,61,-177,59,-177},new int[]{-35,107});
    states[138] = new State(-183);
    states[139] = new State(-184);
    states[140] = new State(new int[]{54,141,25,142,26,143,23,-181,24,-181,35,-181,36,-181,31,-181,32,-181,33,-181,34,-181,29,-181,30,-181,55,-181,66,-181,67,-181,64,-181,63,-181,69,-181,49,-181,50,-181,57,-181,48,-181,61,-181,59,-181},new int[]{-37,109});
    states[141] = new State(-187);
    states[142] = new State(-188);
    states[143] = new State(-189);
    states[144] = new State(-185);
    states[145] = new State(new int[]{37,311,38,312,39,313,40,314,41,315,42,316,45,317,46,318,47,319,43,320,44,321,54,-190,25,-190,26,-190,23,-190,24,-190,35,-190,36,-190,31,-190,32,-190,33,-190,34,-190,29,-190,30,-190,55,-190,66,-190,67,-190,64,-190,63,-190,69,-190,49,-190,50,-190,57,-190,61,-190,48,-190,59,-190},new int[]{-32,146});
    states[146] = new State(new int[]{89,149,86,150,87,151,85,152,56,153,23,161,24,162,65,163,68,165,62,167,55,191,54,193,27,198,28,199},new int[]{-44,147,-45,89,-46,90,-47,122,-48,123,-49,124,-50,125,-51,126,-52,129,-53,134,-54,137,-55,140,-56,144,-57,145,-58,112,-59,148,-38,159,-39,195});
    states[147] = new State(-140);
    states[148] = new State(-208);
    states[149] = new State(-219);
    states[150] = new State(-220);
    states[151] = new State(-221);
    states[152] = new State(-222);
    states[153] = new State(new int[]{89,149,86,150,87,151,85,152,56,153,23,161,24,162,65,163,68,165,62,167,55,191,54,193,27,198,28,199,9,211,10,212,4,213,5,214,6,215,7,216,8,217,19,218,13,219,14,220,15,221,16,222,17,223,18,224,11,225,12,226,21,237,22,238,20,240,88,253},new int[]{-43,154,-29,156,-44,121,-45,89,-46,90,-47,122,-48,123,-49,124,-50,125,-51,126,-52,129,-53,134,-54,137,-55,140,-56,144,-57,145,-58,112,-59,148,-38,159,-39,195,-3,172,-1,209,-5,227,-6,228,-7,239});
    states[154] = new State(new int[]{57,155,49,87});
    states[155] = new State(-223);
    states[156] = new State(new int[]{57,157});
    states[157] = new State(new int[]{89,149,86,150,87,151,85,152,56,153,23,161,24,162,65,163,68,165,62,167,55,191,54,193,27,198,28,199},new int[]{-56,158,-57,111,-58,112,-59,148,-38,159,-39,195});
    states[158] = new State(-191);
    states[159] = new State(new int[]{89,149,86,150,87,151,85,152,56,153,23,161,24,162,65,163,68,165,62,167,55,191,54,193,27,198,28,199},new int[]{-56,160,-57,111,-58,112,-59,148,-38,159,-39,195});
    states[160] = new State(-196);
    states[161] = new State(-204);
    states[162] = new State(-205);
    states[163] = new State(new int[]{89,149,86,150,87,151,85,152,56,153,23,161,24,162,65,163,68,165,62,167,55,191,54,193,27,198,28,199},new int[]{-56,164,-57,111,-58,112,-59,148,-38,159,-39,195});
    states[164] = new State(-197);
    states[165] = new State(new int[]{89,149,86,150,87,151,85,152,56,153,23,161,24,162,65,163,68,165,62,167,55,191,54,193,27,198,28,199},new int[]{-56,166,-57,111,-58,112,-59,148,-38,159,-39,195});
    states[166] = new State(-198);
    states[167] = new State(new int[]{56,169,89,149,86,150,87,151,85,152,23,161,24,162,65,163,68,165,62,167,55,191,54,193,27,198,28,199},new int[]{-57,168,-58,112,-59,148,-38,159,-39,195});
    states[168] = new State(-199);
    states[169] = new State(new int[]{9,211,10,212,4,213,5,214,6,215,7,216,8,217,19,218,13,219,14,220,15,221,16,222,17,223,18,224,11,225,12,226,21,237,22,238,20,240,88,253,89,149,86,150,87,151,85,152,56,153,23,161,24,162,65,163,68,165,62,167,55,191,54,193,27,198,28,199},new int[]{-29,170,-43,154,-3,172,-1,209,-5,227,-6,228,-7,239,-44,121,-45,89,-46,90,-47,122,-48,123,-49,124,-50,125,-51,126,-52,129,-53,134,-54,137,-55,140,-56,144,-57,145,-58,112,-59,148,-38,159,-39,195});
    states[170] = new State(new int[]{57,171});
    states[171] = new State(-200);
    states[172] = new State(new int[]{57,-192,54,-193,56,-193,60,-193},new int[]{-85,173});
    states[173] = new State(new int[]{54,177,56,-62,60,-62},new int[]{-30,174,-17,175,-18,183,-16,184});
    states[174] = new State(-194);
    states[175] = new State(new int[]{54,177,57,-97,49,-97,56,-63,60,-63,86,-63},new int[]{-18,176});
    states[176] = new State(-65);
    states[177] = new State(-67,new int[]{-19,178});
    states[178] = new State(new int[]{9,180,54,-66,86,-66,56,-66,57,-66,60,-66,49,-66},new int[]{-20,179});
    states[179] = new State(-68);
    states[180] = new State(-69,new int[]{-78,181});
    states[181] = new State(new int[]{10,182});
    states[182] = new State(-70);
    states[183] = new State(-64);
    states[184] = new State(new int[]{56,310,60,294},new int[]{-31,185});
    states[185] = new State(new int[]{60,186,56,200,57,-98,49,-98});
    states[186] = new State(new int[]{89,149,86,150,87,151,85,152,56,153,23,161,24,162,65,163,68,165,62,167,55,191,54,193,27,198,28,199,61,-154},new int[]{-40,187,-41,189,-45,190,-46,90,-47,122,-48,123,-49,124,-50,125,-51,126,-52,129,-53,134,-54,137,-55,140,-56,144,-57,111,-58,112,-59,148,-38,159,-39,195});
    states[187] = new State(new int[]{61,188});
    states[188] = new State(-101);
    states[189] = new State(-155);
    states[190] = new State(-156);
    states[191] = new State(new int[]{89,149,86,150,87,151,85,152,56,153,23,161,24,162,65,163,68,165,62,167,55,191,54,193,27,198,28,199},new int[]{-56,192,-57,111,-58,112,-59,148,-38,159,-39,195});
    states[192] = new State(-201);
    states[193] = new State(new int[]{89,149,86,150,87,151,85,152,56,153,23,161,24,162,65,163,68,165,62,167,55,191,54,193,27,198,28,199},new int[]{-56,194,-57,111,-58,112,-59,148,-38,159,-39,195});
    states[194] = new State(-202);
    states[195] = new State(new int[]{89,149,86,150,87,151,85,152,56,197,23,161,24,162,65,163,68,165,62,167,55,191,54,193,27,198,28,199},new int[]{-57,196,-58,112,-59,148,-38,159,-39,195});
    states[196] = new State(-203);
    states[197] = new State(new int[]{89,149,86,150,87,151,85,152,56,153,23,161,24,162,65,163,68,165,62,167,55,191,54,193,27,198,28,199},new int[]{-43,154,-44,121,-45,89,-46,90,-47,122,-48,123,-49,124,-50,125,-51,126,-52,129,-53,134,-54,137,-55,140,-56,144,-57,145,-58,112,-59,148,-38,159,-39,195});
    states[198] = new State(-206);
    states[199] = new State(-207);
    states[200] = new State(new int[]{57,-76,9,-80,10,-80,4,-80,5,-80,6,-80,7,-80,8,-80,19,-80,13,-80,14,-80,15,-80,16,-80,17,-80,18,-80,11,-80,12,-80,21,-80,22,-80,20,-80,88,-80},new int[]{-21,201,-22,203,-23,204,-79,280});
    states[201] = new State(new int[]{57,202});
    states[202] = new State(-103);
    states[203] = new State(-77);
    states[204] = new State(new int[]{49,205,57,-78});
    states[205] = new State(new int[]{51,309,9,-82,10,-82,4,-82,5,-82,6,-82,7,-82,8,-82,19,-82,13,-82,14,-82,15,-82,16,-82,17,-82,18,-82,11,-82,12,-82,21,-82,22,-82,20,-82,88,-82},new int[]{-80,206});
    states[206] = new State(new int[]{9,211,10,212,4,213,5,214,6,215,7,216,8,217,19,218,13,219,14,220,15,221,16,222,17,223,18,224,11,225,12,226,21,237,22,238,20,240,88,253},new int[]{-24,207,-3,208,-1,209,-5,227,-6,228,-7,239,-2,282});
    states[207] = new State(-83);
    states[208] = new State(new int[]{49,-84,57,-84,54,-16,86,-16,56,-16,60,-16});
    states[209] = new State(new int[]{9,211,10,212,4,213,5,214,6,215,7,216,8,217,19,218,13,219,14,220,15,221,16,222,17,223,18,224,11,225,12,226,21,237,22,238,20,240,88,253,50,-17,54,-17,86,-17,56,-17,48,-17,60,-17,57,-17,49,-17},new int[]{-3,210,-1,209,-5,227,-6,228,-7,239});
    states[210] = new State(-18);
    states[211] = new State(-19);
    states[212] = new State(-20);
    states[213] = new State(-21);
    states[214] = new State(-22);
    states[215] = new State(-23);
    states[216] = new State(-24);
    states[217] = new State(-25);
    states[218] = new State(-26);
    states[219] = new State(-27);
    states[220] = new State(-28);
    states[221] = new State(-29);
    states[222] = new State(-30);
    states[223] = new State(-31);
    states[224] = new State(-32);
    states[225] = new State(-33);
    states[226] = new State(-34);
    states[227] = new State(-35);
    states[228] = new State(new int[]{86,308,58,-43},new int[]{-4,229});
    states[229] = new State(-38,new int[]{-76,230});
    states[230] = new State(new int[]{58,231});
    states[231] = new State(new int[]{9,211,10,212,4,213,5,214,6,215,7,216,8,217,19,218,13,219,14,220,15,221,16,222,17,223,18,224,11,225,12,226,21,237,22,238,20,240,88,253},new int[]{-75,232,-12,307,-3,235,-1,209,-5,227,-6,228,-7,239,-2,254});
    states[232] = new State(new int[]{59,233,9,211,10,212,4,213,5,214,6,215,7,216,8,217,19,218,13,219,14,220,15,221,16,222,17,223,18,224,11,225,12,226,21,237,22,238,20,240,88,253},new int[]{-12,234,-3,235,-1,209,-5,227,-6,228,-7,239,-2,254});
    states[233] = new State(-39);
    states[234] = new State(-46);
    states[235] = new State(new int[]{50,236,54,-16,86,-16,56,-16,48,-16});
    states[236] = new State(-14);
    states[237] = new State(-41);
    states[238] = new State(-42);
    states[239] = new State(-36);
    states[240] = new State(new int[]{86,252,58,-43},new int[]{-4,241});
    states[241] = new State(-47,new int[]{-77,242});
    states[242] = new State(new int[]{58,243});
    states[243] = new State(new int[]{86,248},new int[]{-8,244,-9,251});
    states[244] = new State(new int[]{59,245,49,246});
    states[245] = new State(-48);
    states[246] = new State(new int[]{86,248},new int[]{-9,247});
    states[247] = new State(-51);
    states[248] = new State(new int[]{37,249,59,-52,49,-52});
    states[249] = new State(new int[]{89,149,86,150,87,151,85,152,56,153,23,161,24,162,65,163,68,165,62,167,55,191,54,193,27,198,28,199},new int[]{-41,250,-45,190,-46,90,-47,122,-48,123,-49,124,-50,125,-51,126,-52,129,-53,134,-54,137,-55,140,-56,144,-57,111,-58,112,-59,148,-38,159,-39,195});
    states[250] = new State(-53);
    states[251] = new State(-50);
    states[252] = new State(new int[]{9,-49,10,-49,4,-49,5,-49,6,-49,7,-49,8,-49,19,-49,13,-49,14,-49,15,-49,16,-49,17,-49,18,-49,11,-49,12,-49,21,-49,22,-49,20,-49,88,-49,50,-49,54,-49,86,-49,56,-49,48,-49,60,-49,57,-49,49,-49,58,-44});
    states[253] = new State(-37);
    states[254] = new State(new int[]{54,177,86,-62,56,-62,48,-59},new int[]{-10,255,-11,306,-14,259,-16,270,-17,302,-18,183,-13,303});
    states[255] = new State(new int[]{50,256,49,257});
    states[256] = new State(-15);
    states[257] = new State(new int[]{54,177,86,-62,56,-62,48,-59},new int[]{-11,258,-14,259,-16,270,-17,302,-18,183,-13,303});
    states[258] = new State(-55);
    states[259] = new State(new int[]{37,260,50,-56,49,-56,48,-60});
    states[260] = new State(new int[]{89,149,86,150,87,151,85,152,56,153,23,161,24,162,65,163,68,165,62,167,55,191,54,193,27,198,28,199,58,263},new int[]{-28,261,-44,262,-45,89,-46,90,-47,122,-48,123,-49,124,-50,125,-51,126,-52,129,-53,134,-54,137,-55,140,-56,144,-57,145,-58,112,-59,148,-38,159,-39,195});
    states[261] = new State(-57);
    states[262] = new State(-91);
    states[263] = new State(new int[]{89,149,86,150,87,151,85,152,56,153,23,161,24,162,65,163,68,165,62,167,55,191,54,193,27,198,28,199,58,263},new int[]{-27,264,-28,269,-44,262,-45,89,-46,90,-47,122,-48,123,-49,124,-50,125,-51,126,-52,129,-53,134,-54,137,-55,140,-56,144,-57,145,-58,112,-59,148,-38,159,-39,195});
    states[264] = new State(new int[]{49,267,59,-93},new int[]{-81,265});
    states[265] = new State(new int[]{59,266});
    states[266] = new State(-92);
    states[267] = new State(new int[]{89,149,86,150,87,151,85,152,56,153,23,161,24,162,65,163,68,165,62,167,55,191,54,193,27,198,28,199,58,263,59,-94},new int[]{-28,268,-44,262,-45,89,-46,90,-47,122,-48,123,-49,124,-50,125,-51,126,-52,129,-53,134,-54,137,-55,140,-56,144,-57,145,-58,112,-59,148,-38,159,-39,195});
    states[268] = new State(-96);
    states[269] = new State(-95);
    states[270] = new State(new int[]{86,286,56,301},new int[]{-15,271});
    states[271] = new State(new int[]{60,272,56,275,9,-61,10,-61,4,-61,5,-61,6,-61,7,-61,8,-61,19,-61,13,-61,14,-61,15,-61,16,-61,17,-61,18,-61,11,-61,12,-61,21,-61,22,-61,20,-61,88,-61,58,-61,37,-61,50,-61,49,-61,48,-61,57,-61});
    states[272] = new State(new int[]{89,149,86,150,87,151,85,152,56,153,23,161,24,162,65,163,68,165,62,167,55,191,54,193,27,198,28,199,61,-154},new int[]{-40,273,-41,189,-45,190,-46,90,-47,122,-48,123,-49,124,-50,125,-51,126,-52,129,-53,134,-54,137,-55,140,-56,144,-57,111,-58,112,-59,148,-38,159,-39,195});
    states[273] = new State(new int[]{61,274});
    states[274] = new State(-73);
    states[275] = new State(new int[]{86,300,9,-80,10,-80,4,-80,5,-80,6,-80,7,-80,8,-80,19,-80,13,-80,14,-80,15,-80,16,-80,17,-80,18,-80,11,-80,12,-80,21,-80,22,-80,20,-80,88,-80,57,-87},new int[]{-22,276,-25,278,-23,204,-79,280,-26,297});
    states[276] = new State(new int[]{57,277});
    states[277] = new State(-74);
    states[278] = new State(new int[]{57,279});
    states[279] = new State(-75);
    states[280] = new State(new int[]{9,211,10,212,4,213,5,214,6,215,7,216,8,217,19,218,13,219,14,220,15,221,16,222,17,223,18,224,11,225,12,226,21,237,22,238,20,240,88,253},new int[]{-24,281,-3,208,-1,209,-5,227,-6,228,-7,239,-2,282});
    states[281] = new State(-81);
    states[282] = new State(new int[]{54,177,86,-62,56,-62,60,-62},new int[]{-14,283,-30,284,-16,285,-17,175,-18,183});
    states[283] = new State(-85);
    states[284] = new State(-86);
    states[285] = new State(new int[]{86,286,56,287,60,294},new int[]{-15,271,-31,185});
    states[286] = new State(-71);
    states[287] = new State(new int[]{54,177,86,-62,56,-62,60,-62,57,-76,9,-80,10,-80,4,-80,5,-80,6,-80,7,-80,8,-80,19,-80,13,-80,14,-80,15,-80,16,-80,17,-80,18,-80,11,-80,12,-80,21,-80,22,-80,20,-80,88,-80},new int[]{-14,288,-30,290,-21,292,-16,285,-17,175,-18,183,-22,203,-23,204,-79,280});
    states[288] = new State(new int[]{57,289});
    states[289] = new State(-72);
    states[290] = new State(new int[]{57,291});
    states[291] = new State(-99);
    states[292] = new State(new int[]{57,293});
    states[293] = new State(-102);
    states[294] = new State(new int[]{89,149,86,150,87,151,85,152,56,153,23,161,24,162,65,163,68,165,62,167,55,191,54,193,27,198,28,199,61,-154},new int[]{-40,295,-41,189,-45,190,-46,90,-47,122,-48,123,-49,124,-50,125,-51,126,-52,129,-53,134,-54,137,-55,140,-56,144,-57,111,-58,112,-59,148,-38,159,-39,195});
    states[295] = new State(new int[]{61,296});
    states[296] = new State(-100);
    states[297] = new State(new int[]{49,298,57,-88});
    states[298] = new State(new int[]{86,299});
    states[299] = new State(-90);
    states[300] = new State(-89);
    states[301] = new State(new int[]{54,177,86,-62,56,-62},new int[]{-14,288,-16,270,-17,302,-18,183});
    states[302] = new State(new int[]{54,177,86,-63,56,-63},new int[]{-18,176});
    states[303] = new State(new int[]{48,304});
    states[304] = new State(new int[]{89,149,86,150,87,151,85,152,56,153,23,161,24,162,65,163,68,165,62,167,55,191,54,193,27,198,28,199},new int[]{-41,305,-45,190,-46,90,-47,122,-48,123,-49,124,-50,125,-51,126,-52,129,-53,134,-54,137,-55,140,-56,144,-57,111,-58,112,-59,148,-38,159,-39,195});
    states[305] = new State(-58);
    states[306] = new State(-54);
    states[307] = new State(-45);
    states[308] = new State(new int[]{9,-40,10,-40,4,-40,5,-40,6,-40,7,-40,8,-40,19,-40,13,-40,14,-40,15,-40,16,-40,17,-40,18,-40,11,-40,12,-40,21,-40,22,-40,20,-40,88,-40,50,-40,54,-40,86,-40,56,-40,48,-40,60,-40,57,-40,49,-40,58,-44});
    states[309] = new State(-79);
    states[310] = new State(new int[]{54,177,56,-62,60,-62,57,-76,9,-80,10,-80,4,-80,5,-80,6,-80,7,-80,8,-80,19,-80,13,-80,14,-80,15,-80,16,-80,17,-80,18,-80,11,-80,12,-80,21,-80,22,-80,20,-80,88,-80},new int[]{-30,290,-21,292,-17,175,-18,183,-16,184,-22,203,-23,204,-79,280});
    states[311] = new State(-141);
    states[312] = new State(-142);
    states[313] = new State(-143);
    states[314] = new State(-144);
    states[315] = new State(-145);
    states[316] = new State(-146);
    states[317] = new State(-147);
    states[318] = new State(-148);
    states[319] = new State(-149);
    states[320] = new State(-150);
    states[321] = new State(-151);
    states[322] = new State(new int[]{56,323});
    states[323] = new State(new int[]{89,149,86,150,87,151,85,152,56,153,23,161,24,162,65,163,68,165,62,167,55,191,54,193,27,198,28,199,57,-215},new int[]{-64,324,-65,326,-44,329,-45,89,-46,90,-47,122,-48,123,-49,124,-50,125,-51,126,-52,129,-53,134,-54,137,-55,140,-56,144,-57,145,-58,112,-59,148,-38,159,-39,195});
    states[324] = new State(new int[]{57,325});
    states[325] = new State(-214);
    states[326] = new State(new int[]{49,327,57,-216});
    states[327] = new State(new int[]{89,149,86,150,87,151,85,152,56,153,23,161,24,162,65,163,68,165,62,167,55,191,54,193,27,198,28,199},new int[]{-44,328,-45,89,-46,90,-47,122,-48,123,-49,124,-50,125,-51,126,-52,129,-53,134,-54,137,-55,140,-56,144,-57,145,-58,112,-59,148,-38,159,-39,195});
    states[328] = new State(-218);
    states[329] = new State(-217);
    states[330] = new State(new int[]{89,149,86,150,87,151,85,152,56,153,23,161,24,162,65,163,68,165,62,167,55,191,54,193,27,198,28,199},new int[]{-43,331,-44,121,-45,89,-46,90,-47,122,-48,123,-49,124,-50,125,-51,126,-52,129,-53,134,-54,137,-55,140,-56,144,-57,145,-58,112,-59,148,-38,159,-39,195});
    states[331] = new State(new int[]{48,332,49,87});
    states[332] = new State(new int[]{89,149,86,150,87,151,85,152,56,153,23,161,24,162,65,163,68,165,62,167,55,191,54,193,27,198,28,199},new int[]{-45,333,-46,90,-47,122,-48,123,-49,124,-50,125,-51,126,-52,129,-53,134,-54,137,-55,140,-56,144,-57,111,-58,112,-59,148,-38,159,-39,195});
    states[333] = new State(-153);
    states[334] = new State(-109,new int[]{-83,335});
    states[335] = new State(new int[]{70,15,72,24,73,31,76,36,75,43,86,54,77,334,74,343,78,374,79,376,58,378,81,382,80,385,89,149,87,151,85,152,56,153,23,161,24,162,65,163,68,165,62,167,55,191,54,193,27,198,28,199,9,211,10,212,4,213,5,214,6,215,7,216,8,217,19,218,13,219,14,220,15,221,16,222,17,223,18,224,11,225,12,226,21,237,22,238,20,240,88,253,83,391,82,396,84,401,50,-135},new int[]{-61,336,-63,14,-62,342,-42,388,-43,86,-44,121,-45,89,-46,90,-47,122,-48,123,-49,124,-50,125,-51,126,-52,129,-53,134,-54,137,-55,140,-56,144,-57,145,-58,112,-59,148,-38,159,-39,195,-12,390,-3,235,-1,209,-5,227,-6,228,-7,239,-2,254});
    states[336] = new State(new int[]{76,337});
    states[337] = new State(new int[]{56,338});
    states[338] = new State(new int[]{89,149,86,150,87,151,85,152,56,153,23,161,24,162,65,163,68,165,62,167,55,191,54,193,27,198,28,199},new int[]{-43,339,-44,121,-45,89,-46,90,-47,122,-48,123,-49,124,-50,125,-51,126,-52,129,-53,134,-54,137,-55,140,-56,144,-57,145,-58,112,-59,148,-38,159,-39,195});
    states[339] = new State(new int[]{57,340,49,87});
    states[340] = new State(new int[]{50,341});
    states[341] = new State(-120);
    states[342] = new State(-107);
    states[343] = new State(new int[]{48,344});
    states[344] = new State(new int[]{70,346,72,352,76,357,77,334,75,362,73,371,74,343,78,374,79,376,58,378,81,382,80,385,89,149,86,150,87,151,85,152,56,153,23,161,24,162,65,163,68,165,62,167,55,191,54,193,27,198,28,199,9,211,10,212,4,213,5,214,6,215,7,216,8,217,19,218,13,219,14,220,15,221,16,222,17,223,18,224,11,225,12,226,21,237,22,238,20,240,88,253,83,391,82,396,84,401,50,-135},new int[]{-62,345,-42,388,-43,86,-44,121,-45,89,-46,90,-47,122,-48,123,-49,124,-50,125,-51,126,-52,129,-53,134,-54,137,-55,140,-56,144,-57,145,-58,112,-59,148,-38,159,-39,195,-12,390,-3,235,-1,209,-5,227,-6,228,-7,239,-2,254});
    states[345] = new State(-123);
    states[346] = new State(new int[]{56,347});
    states[347] = new State(new int[]{89,149,86,150,87,151,85,152,56,153,23,161,24,162,65,163,68,165,62,167,55,191,54,193,27,198,28,199},new int[]{-43,348,-44,121,-45,89,-46,90,-47,122,-48,123,-49,124,-50,125,-51,126,-52,129,-53,134,-54,137,-55,140,-56,144,-57,145,-58,112,-59,148,-38,159,-39,195});
    states[348] = new State(new int[]{57,349,49,87});
    states[349] = new State(new int[]{70,346,72,352,76,357,77,334,75,362,73,371,74,343,78,374,79,376,58,378,81,382,80,385,89,149,86,150,87,151,85,152,56,153,23,161,24,162,65,163,68,165,62,167,55,191,54,193,27,198,28,199,9,211,10,212,4,213,5,214,6,215,7,216,8,217,19,218,13,219,14,220,15,221,16,222,17,223,18,224,11,225,12,226,21,237,22,238,20,240,88,253,83,391,82,396,84,401,50,-135},new int[]{-62,350,-42,388,-43,86,-44,121,-45,89,-46,90,-47,122,-48,123,-49,124,-50,125,-51,126,-52,129,-53,134,-54,137,-55,140,-56,144,-57,145,-58,112,-59,148,-38,159,-39,195,-12,390,-3,235,-1,209,-5,227,-6,228,-7,239,-2,254});
    states[350] = new State(new int[]{71,351});
    states[351] = new State(new int[]{70,346,72,352,76,357,77,334,75,362,73,371,74,343,78,374,79,376,58,378,81,382,80,385,89,149,86,150,87,151,85,152,56,153,23,161,24,162,65,163,68,165,62,167,55,191,54,193,27,198,28,199,9,211,10,212,4,213,5,214,6,215,7,216,8,217,19,218,13,219,14,220,15,221,16,222,17,223,18,224,11,225,12,226,21,237,22,238,20,240,88,253,83,391,82,396,84,401,50,-135},new int[]{-62,23,-42,388,-43,86,-44,121,-45,89,-46,90,-47,122,-48,123,-49,124,-50,125,-51,126,-52,129,-53,134,-54,137,-55,140,-56,144,-57,145,-58,112,-59,148,-38,159,-39,195,-12,390,-3,235,-1,209,-5,227,-6,228,-7,239,-2,254});
    states[352] = new State(-108,new int[]{-82,353});
    states[353] = new State(new int[]{56,354});
    states[354] = new State(new int[]{89,149,86,150,87,151,85,152,56,153,23,161,24,162,65,163,68,165,62,167,55,191,54,193,27,198,28,199},new int[]{-43,355,-44,121,-45,89,-46,90,-47,122,-48,123,-49,124,-50,125,-51,126,-52,129,-53,134,-54,137,-55,140,-56,144,-57,145,-58,112,-59,148,-38,159,-39,195});
    states[355] = new State(new int[]{57,356,49,87});
    states[356] = new State(new int[]{70,346,72,352,76,357,77,334,75,362,73,371,74,343,78,374,79,376,58,378,81,382,80,385,89,149,86,150,87,151,85,152,56,153,23,161,24,162,65,163,68,165,62,167,55,191,54,193,27,198,28,199,9,211,10,212,4,213,5,214,6,215,7,216,8,217,19,218,13,219,14,220,15,221,16,222,17,223,18,224,11,225,12,226,21,237,22,238,20,240,88,253,83,391,82,396,84,401,50,-135},new int[]{-62,30,-42,388,-43,86,-44,121,-45,89,-46,90,-47,122,-48,123,-49,124,-50,125,-51,126,-52,129,-53,134,-54,137,-55,140,-56,144,-57,145,-58,112,-59,148,-38,159,-39,195,-12,390,-3,235,-1,209,-5,227,-6,228,-7,239,-2,254});
    states[357] = new State(-109,new int[]{-83,358});
    states[358] = new State(new int[]{56,359});
    states[359] = new State(new int[]{89,149,86,150,87,151,85,152,56,153,23,161,24,162,65,163,68,165,62,167,55,191,54,193,27,198,28,199},new int[]{-43,360,-44,121,-45,89,-46,90,-47,122,-48,123,-49,124,-50,125,-51,126,-52,129,-53,134,-54,137,-55,140,-56,144,-57,145,-58,112,-59,148,-38,159,-39,195});
    states[360] = new State(new int[]{57,361,49,87});
    states[361] = new State(new int[]{70,346,72,352,76,357,77,334,75,362,73,371,74,343,78,374,79,376,58,378,81,382,80,385,89,149,86,150,87,151,85,152,56,153,23,161,24,162,65,163,68,165,62,167,55,191,54,193,27,198,28,199,9,211,10,212,4,213,5,214,6,215,7,216,8,217,19,218,13,219,14,220,15,221,16,222,17,223,18,224,11,225,12,226,21,237,22,238,20,240,88,253,83,391,82,396,84,401,50,-135},new int[]{-62,42,-42,388,-43,86,-44,121,-45,89,-46,90,-47,122,-48,123,-49,124,-50,125,-51,126,-52,129,-53,134,-54,137,-55,140,-56,144,-57,145,-58,112,-59,148,-38,159,-39,195,-12,390,-3,235,-1,209,-5,227,-6,228,-7,239,-2,254});
    states[362] = new State(-109,new int[]{-83,363});
    states[363] = new State(new int[]{56,364});
    states[364] = new State(new int[]{89,149,86,150,87,151,85,152,56,153,23,161,24,162,65,163,68,165,62,167,55,191,54,193,27,198,28,199,50,-135},new int[]{-42,365,-43,86,-44,121,-45,89,-46,90,-47,122,-48,123,-49,124,-50,125,-51,126,-52,129,-53,134,-54,137,-55,140,-56,144,-57,145,-58,112,-59,148,-38,159,-39,195});
    states[365] = new State(new int[]{50,366});
    states[366] = new State(new int[]{89,149,86,150,87,151,85,152,56,153,23,161,24,162,65,163,68,165,62,167,55,191,54,193,27,198,28,199,50,-135},new int[]{-42,367,-43,86,-44,121,-45,89,-46,90,-47,122,-48,123,-49,124,-50,125,-51,126,-52,129,-53,134,-54,137,-55,140,-56,144,-57,145,-58,112,-59,148,-38,159,-39,195});
    states[367] = new State(new int[]{50,368});
    states[368] = new State(new int[]{89,149,86,150,87,151,85,152,56,153,23,161,24,162,65,163,68,165,62,167,55,191,54,193,27,198,28,199,57,-135},new int[]{-42,369,-43,86,-44,121,-45,89,-46,90,-47,122,-48,123,-49,124,-50,125,-51,126,-52,129,-53,134,-54,137,-55,140,-56,144,-57,145,-58,112,-59,148,-38,159,-39,195});
    states[369] = new State(new int[]{57,370});
    states[370] = new State(new int[]{70,346,72,352,76,357,77,334,75,362,73,371,74,343,78,374,79,376,58,378,81,382,80,385,89,149,86,150,87,151,85,152,56,153,23,161,24,162,65,163,68,165,62,167,55,191,54,193,27,198,28,199,9,211,10,212,4,213,5,214,6,215,7,216,8,217,19,218,13,219,14,220,15,221,16,222,17,223,18,224,11,225,12,226,21,237,22,238,20,240,88,253,83,391,82,396,84,401,50,-135},new int[]{-62,53,-42,388,-43,86,-44,121,-45,89,-46,90,-47,122,-48,123,-49,124,-50,125,-51,126,-52,129,-53,134,-54,137,-55,140,-56,144,-57,145,-58,112,-59,148,-38,159,-39,195,-12,390,-3,235,-1,209,-5,227,-6,228,-7,239,-2,254});
    states[371] = new State(new int[]{89,149,86,150,87,151,85,152,56,153,23,161,24,162,65,163,68,165,62,167,55,191,54,193,27,198,28,199},new int[]{-41,372,-45,190,-46,90,-47,122,-48,123,-49,124,-50,125,-51,126,-52,129,-53,134,-54,137,-55,140,-56,144,-57,111,-58,112,-59,148,-38,159,-39,195});
    states[372] = new State(new int[]{48,373});
    states[373] = new State(new int[]{70,346,72,352,76,357,77,334,75,362,73,371,74,343,78,374,79,376,58,378,81,382,80,385,89,149,86,150,87,151,85,152,56,153,23,161,24,162,65,163,68,165,62,167,55,191,54,193,27,198,28,199,9,211,10,212,4,213,5,214,6,215,7,216,8,217,19,218,13,219,14,220,15,221,16,222,17,223,18,224,11,225,12,226,21,237,22,238,20,240,88,253,83,391,82,396,84,401,50,-135},new int[]{-62,35,-42,388,-43,86,-44,121,-45,89,-46,90,-47,122,-48,123,-49,124,-50,125,-51,126,-52,129,-53,134,-54,137,-55,140,-56,144,-57,145,-58,112,-59,148,-38,159,-39,195,-12,390,-3,235,-1,209,-5,227,-6,228,-7,239,-2,254});
    states[374] = new State(new int[]{50,375});
    states[375] = new State(-124);
    states[376] = new State(new int[]{50,377});
    states[377] = new State(-125);
    states[378] = new State(-126,new int[]{-84,379});
    states[379] = new State(-104,new int[]{-60,380});
    states[380] = new State(new int[]{59,381,70,15,72,24,73,31,76,36,75,43,86,54,77,334,74,343,78,374,79,376,58,378,81,382,80,385,89,149,87,151,85,152,56,153,23,161,24,162,65,163,68,165,62,167,55,191,54,193,27,198,28,199,9,211,10,212,4,213,5,214,6,215,7,216,8,217,19,218,13,219,14,220,15,221,16,222,17,223,18,224,11,225,12,226,21,237,22,238,20,240,88,253,83,391,82,396,84,401,50,-135},new int[]{-61,13,-63,14,-62,342,-42,388,-43,86,-44,121,-45,89,-46,90,-47,122,-48,123,-49,124,-50,125,-51,126,-52,129,-53,134,-54,137,-55,140,-56,144,-57,145,-58,112,-59,148,-38,159,-39,195,-12,390,-3,235,-1,209,-5,227,-6,228,-7,239,-2,254});
    states[381] = new State(-127);
    states[382] = new State(new int[]{86,383});
    states[383] = new State(new int[]{50,384});
    states[384] = new State(-128);
    states[385] = new State(new int[]{89,149,86,150,87,151,85,152,56,153,23,161,24,162,65,163,68,165,62,167,55,191,54,193,27,198,28,199,50,-135},new int[]{-42,386,-43,86,-44,121,-45,89,-46,90,-47,122,-48,123,-49,124,-50,125,-51,126,-52,129,-53,134,-54,137,-55,140,-56,144,-57,145,-58,112,-59,148,-38,159,-39,195});
    states[386] = new State(new int[]{50,387});
    states[387] = new State(-129);
    states[388] = new State(new int[]{50,389});
    states[389] = new State(-130);
    states[390] = new State(-131);
    states[391] = new State(new int[]{56,392});
    states[392] = new State(new int[]{87,393});
    states[393] = new State(new int[]{57,394});
    states[394] = new State(new int[]{50,395});
    states[395] = new State(-132);
    states[396] = new State(new int[]{56,397});
    states[397] = new State(new int[]{89,149,86,150,87,151,85,152,56,153,23,161,24,162,65,163,68,165,62,167,55,191,54,193,27,198,28,199},new int[]{-41,398,-45,190,-46,90,-47,122,-48,123,-49,124,-50,125,-51,126,-52,129,-53,134,-54,137,-55,140,-56,144,-57,111,-58,112,-59,148,-38,159,-39,195});
    states[398] = new State(new int[]{57,399});
    states[399] = new State(new int[]{50,400});
    states[400] = new State(-133);
    states[401] = new State(new int[]{56,402});
    states[402] = new State(new int[]{57,403});
    states[403] = new State(new int[]{50,404});
    states[404] = new State(-134);
    states[405] = new State(new int[]{9,211,10,212,4,213,5,214,6,215,7,216,8,217,19,218,13,219,14,220,15,221,16,222,17,223,18,224,11,225,12,226,21,237,22,238,20,240,88,253,58,-13},new int[]{-12,234,-3,235,-1,209,-5,227,-6,228,-7,239,-2,254});
    states[406] = new State(-9,new int[]{-73,407});
    states[407] = new State(new int[]{9,211,10,212,4,213,5,214,6,215,7,216,8,217,19,218,13,219,14,220,15,221,16,222,17,223,18,224,11,225,12,226,21,237,22,238,20,240,88,253,58,-12},new int[]{-71,408,-75,405,-12,307,-3,235,-1,209,-5,227,-6,228,-7,239,-2,254});
    states[408] = new State(-10,new int[]{-74,409});
    states[409] = new State(new int[]{58,410});
    states[410] = new State(-104,new int[]{-60,411});
    states[411] = new State(new int[]{59,412,70,15,72,24,73,31,76,36,75,43,86,54,77,334,74,343,78,374,79,376,58,378,81,382,80,385,89,149,87,151,85,152,56,153,23,161,24,162,65,163,68,165,62,167,55,191,54,193,27,198,28,199,9,211,10,212,4,213,5,214,6,215,7,216,8,217,19,218,13,219,14,220,15,221,16,222,17,223,18,224,11,225,12,226,21,237,22,238,20,240,88,253,83,391,82,396,84,401,50,-135},new int[]{-61,13,-63,14,-62,342,-42,388,-43,86,-44,121,-45,89,-46,90,-47,122,-48,123,-49,124,-50,125,-51,126,-52,129,-53,134,-54,137,-55,140,-56,144,-57,145,-58,112,-59,148,-38,159,-39,195,-12,390,-3,235,-1,209,-5,227,-6,228,-7,239,-2,254});
    states[412] = new State(-11);
    states[413] = new State(-5);
    states[414] = new State(-2);

    for (int sNo = 0; sNo < states.Length; sNo++) states[sNo].number = sNo;

    rules[1] = new Rule(-67, new int[]{-66,3});
    rules[2] = new Rule(-66, new int[]{-68});
    rules[3] = new Rule(-66, new int[]{-66,-68});
    rules[4] = new Rule(-68, new int[]{-69});
    rules[5] = new Rule(-68, new int[]{-12});
    rules[6] = new Rule(-70, new int[]{});
    rules[7] = new Rule(-72, new int[]{});
    rules[8] = new Rule(-69, new int[]{-2,-14,-70,-71,-72,58,-60,59});
    rules[9] = new Rule(-73, new int[]{});
    rules[10] = new Rule(-74, new int[]{});
    rules[11] = new Rule(-69, new int[]{-14,-73,-71,-74,58,-60,59});
    rules[12] = new Rule(-71, new int[]{});
    rules[13] = new Rule(-71, new int[]{-75});
    rules[14] = new Rule(-12, new int[]{-3,50});
    rules[15] = new Rule(-12, new int[]{-2,-10,50});
    rules[16] = new Rule(-2, new int[]{-3});
    rules[17] = new Rule(-3, new int[]{-1});
    rules[18] = new Rule(-3, new int[]{-1,-3});
    rules[19] = new Rule(-1, new int[]{9});
    rules[20] = new Rule(-1, new int[]{10});
    rules[21] = new Rule(-1, new int[]{4});
    rules[22] = new Rule(-1, new int[]{5});
    rules[23] = new Rule(-1, new int[]{6});
    rules[24] = new Rule(-1, new int[]{7});
    rules[25] = new Rule(-1, new int[]{8});
    rules[26] = new Rule(-1, new int[]{19});
    rules[27] = new Rule(-1, new int[]{13});
    rules[28] = new Rule(-1, new int[]{14});
    rules[29] = new Rule(-1, new int[]{15});
    rules[30] = new Rule(-1, new int[]{16});
    rules[31] = new Rule(-1, new int[]{17});
    rules[32] = new Rule(-1, new int[]{18});
    rules[33] = new Rule(-1, new int[]{11});
    rules[34] = new Rule(-1, new int[]{12});
    rules[35] = new Rule(-1, new int[]{-5});
    rules[36] = new Rule(-1, new int[]{-7});
    rules[37] = new Rule(-1, new int[]{88});
    rules[38] = new Rule(-76, new int[]{});
    rules[39] = new Rule(-5, new int[]{-6,-4,-76,58,-75,59});
    rules[40] = new Rule(-5, new int[]{-6,86});
    rules[41] = new Rule(-6, new int[]{21});
    rules[42] = new Rule(-6, new int[]{22});
    rules[43] = new Rule(-4, new int[]{});
    rules[44] = new Rule(-4, new int[]{86});
    rules[45] = new Rule(-75, new int[]{-12});
    rules[46] = new Rule(-75, new int[]{-75,-12});
    rules[47] = new Rule(-77, new int[]{});
    rules[48] = new Rule(-7, new int[]{20,-4,-77,58,-8,59});
    rules[49] = new Rule(-7, new int[]{20,86});
    rules[50] = new Rule(-8, new int[]{-9});
    rules[51] = new Rule(-8, new int[]{-8,49,-9});
    rules[52] = new Rule(-9, new int[]{86});
    rules[53] = new Rule(-9, new int[]{86,37,-41});
    rules[54] = new Rule(-10, new int[]{-11});
    rules[55] = new Rule(-10, new int[]{-10,49,-11});
    rules[56] = new Rule(-11, new int[]{-14});
    rules[57] = new Rule(-11, new int[]{-14,37,-28});
    rules[58] = new Rule(-11, new int[]{-13,48,-41});
    rules[59] = new Rule(-13, new int[]{});
    rules[60] = new Rule(-13, new int[]{-14});
    rules[61] = new Rule(-14, new int[]{-16,-15});
    rules[62] = new Rule(-16, new int[]{});
    rules[63] = new Rule(-16, new int[]{-17});
    rules[64] = new Rule(-17, new int[]{-18});
    rules[65] = new Rule(-17, new int[]{-17,-18});
    rules[66] = new Rule(-18, new int[]{54,-19});
    rules[67] = new Rule(-19, new int[]{});
    rules[68] = new Rule(-19, new int[]{-19,-20});
    rules[69] = new Rule(-78, new int[]{});
    rules[70] = new Rule(-20, new int[]{9,-78,10});
    rules[71] = new Rule(-15, new int[]{86});
    rules[72] = new Rule(-15, new int[]{56,-14,57});
    rules[73] = new Rule(-15, new int[]{-15,60,-40,61});
    rules[74] = new Rule(-15, new int[]{-15,56,-22,57});
    rules[75] = new Rule(-15, new int[]{-15,56,-25,57});
    rules[76] = new Rule(-21, new int[]{});
    rules[77] = new Rule(-21, new int[]{-22});
    rules[78] = new Rule(-22, new int[]{-23});
    rules[79] = new Rule(-22, new int[]{-23,49,51});
    rules[80] = new Rule(-79, new int[]{});
    rules[81] = new Rule(-23, new int[]{-79,-24});
    rules[82] = new Rule(-80, new int[]{});
    rules[83] = new Rule(-23, new int[]{-23,49,-80,-24});
    rules[84] = new Rule(-24, new int[]{-3});
    rules[85] = new Rule(-24, new int[]{-2,-14});
    rules[86] = new Rule(-24, new int[]{-2,-30});
    rules[87] = new Rule(-25, new int[]{});
    rules[88] = new Rule(-25, new int[]{-26});
    rules[89] = new Rule(-26, new int[]{86});
    rules[90] = new Rule(-26, new int[]{-26,49,86});
    rules[91] = new Rule(-28, new int[]{-44});
    rules[92] = new Rule(-28, new int[]{58,-27,-81,59});
    rules[93] = new Rule(-81, new int[]{});
    rules[94] = new Rule(-81, new int[]{49});
    rules[95] = new Rule(-27, new int[]{-28});
    rules[96] = new Rule(-27, new int[]{-27,49,-28});
    rules[97] = new Rule(-30, new int[]{-17});
    rules[98] = new Rule(-30, new int[]{-16,-31});
    rules[99] = new Rule(-31, new int[]{56,-30,57});
    rules[100] = new Rule(-31, new int[]{60,-40,61});
    rules[101] = new Rule(-31, new int[]{-31,60,-40,61});
    rules[102] = new Rule(-31, new int[]{56,-21,57});
    rules[103] = new Rule(-31, new int[]{-31,56,-21,57});
    rules[104] = new Rule(-60, new int[]{});
    rules[105] = new Rule(-60, new int[]{-60,-61});
    rules[106] = new Rule(-61, new int[]{-63});
    rules[107] = new Rule(-61, new int[]{-62});
    rules[108] = new Rule(-82, new int[]{});
    rules[109] = new Rule(-83, new int[]{});
    rules[110] = new Rule(-63, new int[]{70,56,-43,57,-61});
    rules[111] = new Rule(-63, new int[]{70,56,-43,57,-62,71,-63});
    rules[112] = new Rule(-63, new int[]{72,-82,56,-43,57,-63});
    rules[113] = new Rule(-63, new int[]{73,-41,48,-63});
    rules[114] = new Rule(-63, new int[]{76,-83,56,-43,57,-63});
    rules[115] = new Rule(-63, new int[]{75,-83,56,-42,50,-42,50,-42,57,-63});
    rules[116] = new Rule(-63, new int[]{86,48,-63});
    rules[117] = new Rule(-62, new int[]{70,56,-43,57,-62,71,-62});
    rules[118] = new Rule(-62, new int[]{72,-82,56,-43,57,-62});
    rules[119] = new Rule(-62, new int[]{76,-83,56,-43,57,-62});
    rules[120] = new Rule(-62, new int[]{77,-83,-61,76,56,-43,57,50});
    rules[121] = new Rule(-62, new int[]{75,-83,56,-42,50,-42,50,-42,57,-62});
    rules[122] = new Rule(-62, new int[]{73,-41,48,-62});
    rules[123] = new Rule(-62, new int[]{74,48,-62});
    rules[124] = new Rule(-62, new int[]{78,50});
    rules[125] = new Rule(-62, new int[]{79,50});
    rules[126] = new Rule(-84, new int[]{});
    rules[127] = new Rule(-62, new int[]{58,-84,-60,59});
    rules[128] = new Rule(-62, new int[]{81,86,50});
    rules[129] = new Rule(-62, new int[]{80,-42,50});
    rules[130] = new Rule(-62, new int[]{-42,50});
    rules[131] = new Rule(-62, new int[]{-12});
    rules[132] = new Rule(-62, new int[]{83,56,87,57,50});
    rules[133] = new Rule(-62, new int[]{82,56,-41,57,50});
    rules[134] = new Rule(-62, new int[]{84,56,57,50});
    rules[135] = new Rule(-42, new int[]{});
    rules[136] = new Rule(-42, new int[]{-43});
    rules[137] = new Rule(-43, new int[]{-44});
    rules[138] = new Rule(-43, new int[]{-43,49,-44});
    rules[139] = new Rule(-44, new int[]{-45});
    rules[140] = new Rule(-44, new int[]{-57,-32,-44});
    rules[141] = new Rule(-32, new int[]{37});
    rules[142] = new Rule(-32, new int[]{38});
    rules[143] = new Rule(-32, new int[]{39});
    rules[144] = new Rule(-32, new int[]{40});
    rules[145] = new Rule(-32, new int[]{41});
    rules[146] = new Rule(-32, new int[]{42});
    rules[147] = new Rule(-32, new int[]{45});
    rules[148] = new Rule(-32, new int[]{46});
    rules[149] = new Rule(-32, new int[]{47});
    rules[150] = new Rule(-32, new int[]{43});
    rules[151] = new Rule(-32, new int[]{44});
    rules[152] = new Rule(-45, new int[]{-46});
    rules[153] = new Rule(-45, new int[]{-46,69,-43,48,-45});
    rules[154] = new Rule(-40, new int[]{});
    rules[155] = new Rule(-40, new int[]{-41});
    rules[156] = new Rule(-41, new int[]{-45});
    rules[157] = new Rule(-46, new int[]{-47});
    rules[158] = new Rule(-46, new int[]{-46,63,-47});
    rules[159] = new Rule(-47, new int[]{-48});
    rules[160] = new Rule(-47, new int[]{-47,64,-48});
    rules[161] = new Rule(-48, new int[]{-49});
    rules[162] = new Rule(-48, new int[]{-48,67,-49});
    rules[163] = new Rule(-49, new int[]{-50});
    rules[164] = new Rule(-49, new int[]{-49,66,-50});
    rules[165] = new Rule(-50, new int[]{-51});
    rules[166] = new Rule(-50, new int[]{-50,55,-51});
    rules[167] = new Rule(-51, new int[]{-52});
    rules[168] = new Rule(-51, new int[]{-51,-33,-52});
    rules[169] = new Rule(-33, new int[]{29});
    rules[170] = new Rule(-33, new int[]{30});
    rules[171] = new Rule(-52, new int[]{-53});
    rules[172] = new Rule(-52, new int[]{-52,-34,-53});
    rules[173] = new Rule(-34, new int[]{31});
    rules[174] = new Rule(-34, new int[]{32});
    rules[175] = new Rule(-34, new int[]{33});
    rules[176] = new Rule(-34, new int[]{34});
    rules[177] = new Rule(-53, new int[]{-54});
    rules[178] = new Rule(-53, new int[]{-53,-36,-54});
    rules[179] = new Rule(-36, new int[]{35});
    rules[180] = new Rule(-36, new int[]{36});
    rules[181] = new Rule(-54, new int[]{-55});
    rules[182] = new Rule(-54, new int[]{-54,-35,-55});
    rules[183] = new Rule(-35, new int[]{23});
    rules[184] = new Rule(-35, new int[]{24});
    rules[185] = new Rule(-55, new int[]{-56});
    rules[186] = new Rule(-55, new int[]{-55,-37,-56});
    rules[187] = new Rule(-37, new int[]{54});
    rules[188] = new Rule(-37, new int[]{25});
    rules[189] = new Rule(-37, new int[]{26});
    rules[190] = new Rule(-56, new int[]{-57});
    rules[191] = new Rule(-56, new int[]{56,-29,57,-56});
    rules[192] = new Rule(-29, new int[]{-3});
    rules[193] = new Rule(-85, new int[]{});
    rules[194] = new Rule(-29, new int[]{-3,-85,-30});
    rules[195] = new Rule(-57, new int[]{-58});
    rules[196] = new Rule(-57, new int[]{-38,-56});
    rules[197] = new Rule(-57, new int[]{65,-56});
    rules[198] = new Rule(-57, new int[]{68,-56});
    rules[199] = new Rule(-57, new int[]{62,-57});
    rules[200] = new Rule(-57, new int[]{62,56,-29,57});
    rules[201] = new Rule(-57, new int[]{55,-56});
    rules[202] = new Rule(-57, new int[]{54,-56});
    rules[203] = new Rule(-57, new int[]{-39,-57});
    rules[204] = new Rule(-38, new int[]{23});
    rules[205] = new Rule(-38, new int[]{24});
    rules[206] = new Rule(-39, new int[]{27});
    rules[207] = new Rule(-39, new int[]{28});
    rules[208] = new Rule(-58, new int[]{-59});
    rules[209] = new Rule(-58, new int[]{-58,-39});
    rules[210] = new Rule(-58, new int[]{-58,52,86});
    rules[211] = new Rule(-58, new int[]{-58,53,86});
    rules[212] = new Rule(-58, new int[]{-58,60,-43,61});
    rules[213] = new Rule(-86, new int[]{});
    rules[214] = new Rule(-58, new int[]{-58,-86,56,-64,57});
    rules[215] = new Rule(-64, new int[]{});
    rules[216] = new Rule(-64, new int[]{-65});
    rules[217] = new Rule(-65, new int[]{-44});
    rules[218] = new Rule(-65, new int[]{-65,49,-44});
    rules[219] = new Rule(-59, new int[]{89});
    rules[220] = new Rule(-59, new int[]{86});
    rules[221] = new Rule(-59, new int[]{87});
    rules[222] = new Rule(-59, new int[]{85});
    rules[223] = new Rule(-59, new int[]{56,-43,57});
  }

  protected override void Initialize() {
    this.InitSpecialTokens((int)Tokens.error, (int)Tokens.EOF);
    this.InitStates(states);
    this.InitRules(rules);
    this.InitNonTerminals(nonTerms);
  }

  protected override void DoAction(int action)
  {
#pragma warning disable 162, 1522
    switch (action)
    {
      case 6: // Anon@1 -> /* empty */
#line 129 "MainParser.gppg"
                                            {
      MiddleCodeGenerator.FunctionHeader
        (SpecifierStack.Pop(), ValueStack[ValueStack.Depth-1].declarator);
    }
#line default
        break;
      case 7: // Anon@2 -> /* empty */
#line 133 "MainParser.gppg"
                              {
      MiddleCodeGenerator.CheckFunctionDefinitializerion();
    }
#line default
        break;
      case 8: // function_definitializerion -> declaration_specifier_list_x, declarator, Anon@1, 
              //                               optional_declaration_list, Anon@2, LEFT_BLOCK, 
              //                               optional_statement_list, RIGHT_BLOCK
#line 136 "MainParser.gppg"
                                                   {
      MiddleCodeGenerator.BackpatchGoto();
      MiddleCodeGenerator.FunctionEnd(ValueStack[ValueStack.Depth-2].statement);
    }
#line default
        break;
      case 9: // Anon@3 -> /* empty */
#line 140 "MainParser.gppg"
               {
      MiddleCodeGenerator.FunctionHeader(null, ValueStack[ValueStack.Depth-1].declarator);
    }
#line default
        break;
      case 10: // Anon@4 -> /* empty */
#line 143 "MainParser.gppg"
                              {
      MiddleCodeGenerator.CheckFunctionDefinitializerion();
    }
#line default
        break;
      case 11: // function_definitializerion -> declarator, Anon@3, optional_declaration_list, 
               //                               Anon@4, LEFT_BLOCK, optional_statement_list, 
               //                               RIGHT_BLOCK
#line 146 "MainParser.gppg"
                                                   {
      MiddleCodeGenerator.BackpatchGoto();
      MiddleCodeGenerator.FunctionEnd(ValueStack[ValueStack.Depth-2].statement);
    }
#line default
        break;
      case 14: // declaration -> declaration_specifier_list, SEMICOLON
#line 156 "MainParser.gppg"
                                         {
      SpecifierStack.Push(Specifier.SpecifierList(ValueStack[ValueStack.Depth-2].object_list));
      CurrentSemanticValue.middle_code_list = new List<MiddleCode>();
    }
#line default
        break;
      case 15: // declaration -> declaration_specifier_list_x, declarator_list, SEMICOLON
#line 160 "MainParser.gppg"
                                                           {
      SpecifierStack.Pop();
      CurrentSemanticValue.middle_code_list = ValueStack[ValueStack.Depth-2].middle_code_list;
    }
#line default
        break;
      case 16: // declaration_specifier_list_x -> declaration_specifier_list
#line 170 "MainParser.gppg"
                             {
    SpecifierStack.Push(Specifier.SpecifierList(ValueStack[ValueStack.Depth-1].object_list));
  }
#line default
        break;
      case 17: // declaration_specifier_list -> declaration_specifier
#line 175 "MainParser.gppg"
                          {
      CurrentSemanticValue.object_list = new List<object>();
      CurrentSemanticValue.object_list.Add(ValueStack[ValueStack.Depth-1].obj);
    }
#line default
        break;
      case 18: // declaration_specifier_list -> declaration_specifier, declaration_specifier_list
#line 179 "MainParser.gppg"
                                                     {
      ValueStack[ValueStack.Depth-1].object_list.Add(ValueStack[ValueStack.Depth-2].obj);
      CurrentSemanticValue.object_list = ValueStack[ValueStack.Depth-1].object_list;
    }
#line default
        break;
      case 19: // declaration_specifier -> CONSTANT
#line 185 "MainParser.gppg"
                              { CurrentSemanticValue.obj = Mask.Constant; }
#line default
        break;
      case 20: // declaration_specifier -> VOLATILE
#line 186 "MainParser.gppg"
                              { CurrentSemanticValue.obj = Mask.Volatile; }
#line default
        break;
      case 21: // declaration_specifier -> AUTO
#line 187 "MainParser.gppg"
                              { CurrentSemanticValue.obj = Mask.Auto;     }
#line default
        break;
      case 22: // declaration_specifier -> REGISTER
#line 188 "MainParser.gppg"
                              { CurrentSemanticValue.obj = Mask.Register; }
#line default
        break;
      case 23: // declaration_specifier -> STATIC
#line 189 "MainParser.gppg"
                              { CurrentSemanticValue.obj = Mask.Static;   }
#line default
        break;
      case 24: // declaration_specifier -> EXTERN
#line 190 "MainParser.gppg"
                              { CurrentSemanticValue.obj = Mask.Extern;   }
#line default
        break;
      case 25: // declaration_specifier -> TYPEDEF
#line 191 "MainParser.gppg"
                              { CurrentSemanticValue.obj = Mask.Typedef;  }
#line default
        break;
      case 26: // declaration_specifier -> VOID
#line 192 "MainParser.gppg"
                              { CurrentSemanticValue.obj = Mask.Void;     }
#line default
        break;
      case 27: // declaration_specifier -> CHAR
#line 193 "MainParser.gppg"
                              { CurrentSemanticValue.obj = Mask.Char;     }
#line default
        break;
      case 28: // declaration_specifier -> SHORT
#line 194 "MainParser.gppg"
                              { CurrentSemanticValue.obj = Mask.Short;    }
#line default
        break;
      case 29: // declaration_specifier -> INT
#line 195 "MainParser.gppg"
                              { CurrentSemanticValue.obj = Mask.Int;      }
#line default
        break;
      case 30: // declaration_specifier -> LONG
#line 196 "MainParser.gppg"
                              { CurrentSemanticValue.obj = Mask.Long;     }
#line default
        break;
      case 31: // declaration_specifier -> FLOAT
#line 197 "MainParser.gppg"
                              { CurrentSemanticValue.obj = Mask.Float;    }
#line default
        break;
      case 32: // declaration_specifier -> DOUBLE
#line 198 "MainParser.gppg"
                              { CurrentSemanticValue.obj = Mask.Double;   }
#line default
        break;
      case 33: // declaration_specifier -> SIGNED
#line 199 "MainParser.gppg"
                              { CurrentSemanticValue.obj = Mask.Signed;   }
#line default
        break;
      case 34: // declaration_specifier -> UNSIGNED
#line 200 "MainParser.gppg"
                              { CurrentSemanticValue.obj = Mask.Unsigned; }
#line default
        break;
      case 35: // declaration_specifier -> struct_or_union_specifier
#line 201 "MainParser.gppg"
                              { CurrentSemanticValue.obj = ValueStack[ValueStack.Depth-1].type;            }
#line default
        break;
      case 36: // declaration_specifier -> enum_specifier
#line 202 "MainParser.gppg"
                              { CurrentSemanticValue.obj = ValueStack[ValueStack.Depth-1].type;            }
#line default
        break;
      case 37: // declaration_specifier -> TYPEDEF_NAME
#line 203 "MainParser.gppg"
                              { CurrentSemanticValue.obj = ValueStack[ValueStack.Depth-1].type;            }
#line default
        break;
      case 38: // Anon@5 -> /* empty */
#line 206 "MainParser.gppg"
                                  {
      MiddleCodeGenerator.StructUnionHeader(ValueStack[ValueStack.Depth-1].name, ValueStack[ValueStack.Depth-2].sort);
      SymbolTable.CurrentTable =
        new SymbolTable(SymbolTable.CurrentTable, (Scope) ValueStack[ValueStack.Depth-2].sort);
    }
#line default
        break;
      case 39: // struct_or_union_specifier -> struct_or_union, optional_name, Anon@5, LEFT_BLOCK, 
               //                              declaration_list, RIGHT_BLOCK
#line 211 "MainParser.gppg"
                                            {
      CurrentSemanticValue.type = MiddleCodeGenerator.StructUnionSpecifier(ValueStack[ValueStack.Depth-5].name, ValueStack[ValueStack.Depth-6].sort);
      SymbolTable.CurrentTable =
        SymbolTable.CurrentTable.ParentTable;
    }
#line default
        break;
      case 40: // struct_or_union_specifier -> struct_or_union, NAME
#line 216 "MainParser.gppg"
                         {
      CurrentSemanticValue.type = MiddleCodeGenerator.LookupStructUnionSpecifier(ValueStack[ValueStack.Depth-1].name, ValueStack[ValueStack.Depth-2].sort);
    }
#line default
        break;
      case 41: // struct_or_union -> STRUCT
#line 221 "MainParser.gppg"
           { CurrentSemanticValue.sort = Sort.Struct; }
#line default
        break;
      case 42: // struct_or_union -> UNION
#line 222 "MainParser.gppg"
           { CurrentSemanticValue.sort = Sort.Union;  }
#line default
        break;
      case 43: // optional_name -> /* empty */
#line 225 "MainParser.gppg"
                { CurrentSemanticValue.name = null; }
#line default
        break;
      case 44: // optional_name -> NAME
#line 226 "MainParser.gppg"
                { CurrentSemanticValue.name = ValueStack[ValueStack.Depth-1].name;   }
#line default
        break;
      case 47: // Anon@6 -> /* empty */
#line 233 "MainParser.gppg"
                       {
      EnumValueStack.Push((BigInteger) 0);
    }
#line default
        break;
      case 48: // enum_specifier -> ENUM, optional_name, Anon@6, LEFT_BLOCK, enum_list, 
               //                   RIGHT_BLOCK
#line 236 "MainParser.gppg"
                                     {
      EnumValueStack.Pop();
      CurrentSemanticValue.type = MiddleCodeGenerator.EnumSpecifier(ValueStack[ValueStack.Depth-5].name, ValueStack[ValueStack.Depth-2].symbol_bool_pair_set);
    }
#line default
        break;
      case 49: // enum_specifier -> ENUM, NAME
#line 240 "MainParser.gppg"
              {
      CurrentSemanticValue.type = MiddleCodeGenerator.LookupEnum(ValueStack[ValueStack.Depth-1].name);
    }
#line default
        break;
      case 50: // enum_list -> enum
#line 245 "MainParser.gppg"
         {
      ISet<Pair<Symbol,bool>> memberSet =
        new HashSet<Pair<Symbol,bool>>();
      memberSet.Add(ValueStack[ValueStack.Depth-1].symbol_bool_pair);
      CurrentSemanticValue.symbol_bool_pair_set = memberSet;
    }
#line default
        break;
      case 51: // enum_list -> enum_list, COMMA, enum
#line 251 "MainParser.gppg"
                         {
      ISet<Pair<Symbol,bool>> memberSet = ValueStack[ValueStack.Depth-3].symbol_bool_pair_set;
      memberSet.Add(ValueStack[ValueStack.Depth-1].symbol_bool_pair);
      CurrentSemanticValue.symbol_bool_pair_set = memberSet;
    }
#line default
        break;
      case 52: // enum -> NAME
#line 258 "MainParser.gppg"
         {
      Symbol symbol = MiddleCodeGenerator.EnumItem(ValueStack[ValueStack.Depth-1].name, null);
      CurrentSemanticValue.symbol_bool_pair = new Pair<Symbol,bool>(symbol, false);
    }
#line default
        break;
      case 53: // enum -> NAME, ASSIGN, constant_integral_expression
#line 262 "MainParser.gppg"
                                             {
      Symbol symbol = MiddleCodeGenerator.EnumItem(ValueStack[ValueStack.Depth-3].name, ValueStack[ValueStack.Depth-1].expression.Symbol);
      CurrentSemanticValue.symbol_bool_pair = new Pair<Symbol,bool>(symbol, true);
    }
#line default
        break;
      case 54: // declarator_list -> initializerialization_bitfield_simple_declarator
#line 268 "MainParser.gppg"
                                                     {
      CurrentSemanticValue.middle_code_list = ValueStack[ValueStack.Depth-1].middle_code_list;
    }
#line default
        break;
      case 55: // declarator_list -> declarator_list, COMMA, 
               //                    initializerialization_bitfield_simple_declarator
#line 271 "MainParser.gppg"
                                                                           {
      ValueStack[ValueStack.Depth-3].middle_code_list.AddRange(ValueStack[ValueStack.Depth-1].middle_code_list);
      CurrentSemanticValue.middle_code_list = ValueStack[ValueStack.Depth-3].middle_code_list;
    }
#line default
        break;
      case 56: // initializerialization_bitfield_simple_declarator -> declarator
#line 277 "MainParser.gppg"
               {
      MiddleCodeGenerator.Declarator
        (SpecifierStack.Peek(), ValueStack[ValueStack.Depth-1].declarator);
      CurrentSemanticValue.middle_code_list = new List<MiddleCode>();
    }
#line default
        break;
      case 57: // initializerialization_bitfield_simple_declarator -> declarator, ASSIGN, 
               //                                                     initializer
#line 282 "MainParser.gppg"
                                  {
      CurrentSemanticValue.middle_code_list = MiddleCodeGenerator.AssignmentDeclarator
             (SpecifierStack.Peek(), ValueStack[ValueStack.Depth-3].declarator, ValueStack[ValueStack.Depth-1].obj);
    }
#line default
        break;
      case 58: // initializerialization_bitfield_simple_declarator -> optional_simple_declarator, 
               //                                                     COLON, 
               //                                                     constant_integral_expression
#line 286 "MainParser.gppg"
                                                                  {
      MiddleCodeGenerator.BitfieldDeclarator
        (SpecifierStack.Peek(), ValueStack[ValueStack.Depth-3].declarator, ValueStack[ValueStack.Depth-1].expression.Symbol);
      CurrentSemanticValue.middle_code_list = new List<MiddleCode>();
    }
#line default
        break;
      case 59: // optional_simple_declarator -> /* empty */
#line 293 "MainParser.gppg"
                { CurrentSemanticValue.declarator = null; }
#line default
        break;
      case 60: // optional_simple_declarator -> declarator
#line 294 "MainParser.gppg"
                { CurrentSemanticValue.declarator = ValueStack[ValueStack.Depth-1].declarator;   }
#line default
        break;
      case 61: // declarator -> optional_pointer_list, pointer_declarator
#line 297 "MainParser.gppg"
                                             {
      CurrentSemanticValue.declarator = MiddleCodeGenerator.PointerDeclarator(ValueStack[ValueStack.Depth-2].type_list, ValueStack[ValueStack.Depth-1].declarator);
    }
#line default
        break;
      case 62: // optional_pointer_list -> /* empty */
#line 302 "MainParser.gppg"
                 {
      CurrentSemanticValue.type_list = new List<CCompiler.Type>();
    }
#line default
        break;
      case 63: // optional_pointer_list -> pointer_list
#line 305 "MainParser.gppg"
                 {
      CurrentSemanticValue.type_list = ValueStack[ValueStack.Depth-1].type_list;
    }
#line default
        break;
      case 64: // pointer_list -> pointer
#line 310 "MainParser.gppg"
            {
      CurrentSemanticValue.type_list = new List<CCompiler.Type>();
      CurrentSemanticValue.type_list.Add(ValueStack[ValueStack.Depth-1].type);
    }
#line default
        break;
      case 65: // pointer_list -> pointer_list, pointer
#line 314 "MainParser.gppg"
                         {
      ValueStack[ValueStack.Depth-2].type_list.Add(ValueStack[ValueStack.Depth-1].type);
      CurrentSemanticValue.type_list = ValueStack[ValueStack.Depth-2].type_list;
    }
#line default
        break;
      case 66: // pointer -> ASTERRISK, optional_qualifier_list
#line 320 "MainParser.gppg"
                                      {
      CurrentSemanticValue.type = Specifier.QualifierList(ValueStack[ValueStack.Depth-1].mask_list);
    }
#line default
        break;
      case 67: // optional_qualifier_list -> /* empty */
#line 325 "MainParser.gppg"
                   {
      CurrentSemanticValue.mask_list = new List<Mask>();
    }
#line default
        break;
      case 68: // optional_qualifier_list -> optional_qualifier_list, qualifier
#line 328 "MainParser.gppg"
                                      {
      CurrentSemanticValue.mask_list = ValueStack[ValueStack.Depth-2].mask_list;
      CurrentSemanticValue.mask_list.Add(ValueStack[ValueStack.Depth-1].mask);
    }
#line default
        break;
      case 69: // Anon@7 -> /* empty */
#line 334 "MainParser.gppg"
            { CurrentSemanticValue.mask = Mask.Constant; }
#line default
        break;
      case 70: // qualifier -> CONSTANT, Anon@7, VOLATILE
#line 335 "MainParser.gppg"
            { CurrentSemanticValue.mask = Mask.Volatile; }
#line default
        break;
      case 71: // pointer_declarator -> NAME
#line 338 "MainParser.gppg"
         {
      CurrentSemanticValue.declarator = new Declarator(ValueStack[ValueStack.Depth-1].name);
    }
#line default
        break;
      case 72: // pointer_declarator -> LEFT_PARENTHESIS, declarator, RIGHT_PARENTHESIS
#line 341 "MainParser.gppg"
                                                  {
      CurrentSemanticValue.declarator = ValueStack[ValueStack.Depth-2].declarator; 
    }
#line default
        break;
      case 73: // pointer_declarator -> pointer_declarator, LEFT_SQUARE, 
               //                       optional_constant_integral_expression, RIGHT_SQUARE
#line 345 "MainParser.gppg"
                                                       {
      CurrentSemanticValue.declarator = MiddleCodeGenerator.ArrayType(ValueStack[ValueStack.Depth-4].declarator, ValueStack[ValueStack.Depth-2].expression);
    }
#line default
        break;
      case 74: // pointer_declarator -> pointer_declarator, LEFT_PARENTHESIS, 
               //                       parameter_ellipse_list, RIGHT_PARENTHESIS
#line 349 "MainParser.gppg"
                                                              {
      CurrentSemanticValue.declarator = MiddleCodeGenerator.
           NewFunctionDeclaration(ValueStack[ValueStack.Depth-4].declarator, ValueStack[ValueStack.Depth-2].parameter_pair.First, ValueStack[ValueStack.Depth-2].parameter_pair.Second);
    }
#line default
        break;
      case 75: // pointer_declarator -> pointer_declarator, LEFT_PARENTHESIS, optional_name_list, 
               //                       RIGHT_PARENTHESIS
#line 354 "MainParser.gppg"
                                        {
      CurrentSemanticValue.declarator = MiddleCodeGenerator.OldFunctionDeclaration(ValueStack[ValueStack.Depth-4].declarator, ValueStack[ValueStack.Depth-2].string_list);
    }
#line default
        break;
      case 76: // optional_parameter_ellipse_list -> /* empty */
#line 359 "MainParser.gppg"
                           { CurrentSemanticValue.parameter_pair = null; }
#line default
        break;
      case 77: // optional_parameter_ellipse_list -> parameter_ellipse_list
#line 360 "MainParser.gppg"
                           { CurrentSemanticValue.parameter_pair = ValueStack[ValueStack.Depth-1].parameter_pair;   }
#line default
        break;
      case 78: // parameter_ellipse_list -> parameter_list
#line 363 "MainParser.gppg"
                   {
      CurrentSemanticValue.parameter_pair = new Pair<List<Pair<string,Symbol>>,Boolean>(ValueStack[ValueStack.Depth-1].string_symbol_pair_list, false);
    }
#line default
        break;
      case 79: // parameter_ellipse_list -> parameter_list, COMMA, ELLIPSE
#line 366 "MainParser.gppg"
                                 {
      CurrentSemanticValue.parameter_pair = new Pair<List<Pair<string,Symbol>>,Boolean>(ValueStack[ValueStack.Depth-3].string_symbol_pair_list, true);
    }
#line default
        break;
      case 80: // Anon@8 -> /* empty */
#line 371 "MainParser.gppg"
    { ++CallDepth; }
#line default
        break;
      case 81: // parameter_list -> Anon@8, parameter_declaration
#line 372 "MainParser.gppg"
                          {
      --CallDepth;
      CurrentSemanticValue.string_symbol_pair_list = new List<Pair<string,Symbol>>();
      CurrentSemanticValue.string_symbol_pair_list.Add(ValueStack[ValueStack.Depth-1].string_symbol_pair);
    }
#line default
        break;
      case 82: // Anon@9 -> /* empty */
#line 377 "MainParser.gppg"
                         {
      ++CallDepth;
    }
#line default
        break;
      case 83: // parameter_list -> parameter_list, COMMA, Anon@9, parameter_declaration
#line 380 "MainParser.gppg"
                          {
      --CallDepth;
      ValueStack[ValueStack.Depth-4].string_symbol_pair_list.Add(ValueStack[ValueStack.Depth-1].string_symbol_pair);
      CurrentSemanticValue.string_symbol_pair_list = ValueStack[ValueStack.Depth-4].string_symbol_pair_list;
    }
#line default
        break;
      case 84: // parameter_declaration -> declaration_specifier_list
#line 387 "MainParser.gppg"
                               {
      CurrentSemanticValue.string_symbol_pair = MiddleCodeGenerator.Parameter(Specifier.SpecifierList(ValueStack[ValueStack.Depth-1].object_list), null);
    }
#line default
        break;
      case 85: // parameter_declaration -> declaration_specifier_list_x, declarator
#line 390 "MainParser.gppg"
                                            {
      CurrentSemanticValue.string_symbol_pair = MiddleCodeGenerator.Parameter(SpecifierStack.Pop(), ValueStack[ValueStack.Depth-1].declarator);
    }
#line default
        break;
      case 86: // parameter_declaration -> declaration_specifier_list_x, abstract_declarator
#line 393 "MainParser.gppg"
                                                     {
      CurrentSemanticValue.string_symbol_pair = MiddleCodeGenerator.Parameter(SpecifierStack.Pop(), ValueStack[ValueStack.Depth-1].declarator);
    }
#line default
        break;
      case 87: // optional_name_list -> /* empty */
#line 398 "MainParser.gppg"
                { CurrentSemanticValue.string_list = new List<string>(); }
#line default
        break;
      case 88: // optional_name_list -> name_list
#line 399 "MainParser.gppg"
                { CurrentSemanticValue.string_list = ValueStack[ValueStack.Depth-1].string_list;                 }
#line default
        break;
      case 89: // name_list -> NAME
#line 402 "MainParser.gppg"
         {
      CurrentSemanticValue.string_list = new List<string>();
      CurrentSemanticValue.string_list.Add(ValueStack[ValueStack.Depth-1].name);
    }
#line default
        break;
      case 90: // name_list -> name_list, COMMA, NAME
#line 406 "MainParser.gppg"
                         {
      ValueStack[ValueStack.Depth-3].string_list.Add(ValueStack[ValueStack.Depth-1].name); 
      CurrentSemanticValue.string_list = ValueStack[ValueStack.Depth-3].string_list;
    }
#line default
        break;
      case 91: // initializer -> assignment_expression
#line 412 "MainParser.gppg"
                          {
      CurrentSemanticValue.obj = ValueStack[ValueStack.Depth-1].expression;
    }
#line default
        break;
      case 92: // initializer -> LEFT_BLOCK, initializer_list, optional_comma, RIGHT_BLOCK
#line 415 "MainParser.gppg"
                                                           {
      CurrentSemanticValue.obj = ValueStack[ValueStack.Depth-3].object_list;
    }
#line default
        break;
      case 95: // initializer_list -> initializer
#line 424 "MainParser.gppg"
                {
      CurrentSemanticValue.object_list = new List<object>();
      CurrentSemanticValue.object_list.Add(ValueStack[ValueStack.Depth-1].obj);
    }
#line default
        break;
      case 96: // initializer_list -> initializer_list, COMMA, initializer
#line 428 "MainParser.gppg"
                                       {
      ValueStack[ValueStack.Depth-3].object_list.Add(ValueStack[ValueStack.Depth-1].obj);
      CurrentSemanticValue.object_list = ValueStack[ValueStack.Depth-3].object_list;
    }
#line default
        break;
      case 97: // abstract_declarator -> pointer_list
#line 434 "MainParser.gppg"
                 {
      CurrentSemanticValue.declarator = MiddleCodeGenerator.PointerDeclarator(ValueStack[ValueStack.Depth-1].type_list, null);
    }
#line default
        break;
      case 98: // abstract_declarator -> optional_pointer_list, direct_abstract_declarator
#line 437 "MainParser.gppg"
                                                     {
      CurrentSemanticValue.declarator = MiddleCodeGenerator.PointerDeclarator(ValueStack[ValueStack.Depth-2].type_list, ValueStack[ValueStack.Depth-1].declarator);
    }
#line default
        break;
      case 99: // direct_abstract_declarator -> LEFT_PARENTHESIS, abstract_declarator, 
               //                               RIGHT_PARENTHESIS
#line 442 "MainParser.gppg"
                                                           {
      CurrentSemanticValue.declarator = ValueStack[ValueStack.Depth-2].declarator;
    }
#line default
        break;
      case 100: // direct_abstract_declarator -> LEFT_SQUARE, 
                //                               optional_constant_integral_expression, 
                //                               RIGHT_SQUARE
#line 445 "MainParser.gppg"
                                                                   {
      CurrentSemanticValue.declarator = MiddleCodeGenerator.ArrayType(null, ValueStack[ValueStack.Depth-2].expression);
    }
#line default
        break;
      case 101: // direct_abstract_declarator -> direct_abstract_declarator, LEFT_SQUARE, 
                //                               optional_constant_integral_expression, 
                //                               RIGHT_SQUARE
#line 449 "MainParser.gppg"
                                                                   {
      CurrentSemanticValue.declarator = MiddleCodeGenerator.ArrayType(ValueStack[ValueStack.Depth-4].declarator, ValueStack[ValueStack.Depth-2].expression);
    }
#line default
        break;
      case 102: // direct_abstract_declarator -> LEFT_PARENTHESIS, optional_parameter_ellipse_list, 
                //                               RIGHT_PARENTHESIS
#line 452 "MainParser.gppg"
                                                                       {
      CurrentSemanticValue.declarator = MiddleCodeGenerator.
           NewFunctionDeclaration(null, ValueStack[ValueStack.Depth-2].parameter_pair.First, ValueStack[ValueStack.Depth-2].parameter_pair.Second);
    }
#line default
        break;
      case 103: // direct_abstract_declarator -> direct_abstract_declarator, LEFT_PARENTHESIS, 
                //                               optional_parameter_ellipse_list, 
                //                               RIGHT_PARENTHESIS
#line 457 "MainParser.gppg"
                                                                       {
      CurrentSemanticValue.declarator = MiddleCodeGenerator.
           NewFunctionDeclaration(ValueStack[ValueStack.Depth-4].declarator, ValueStack[ValueStack.Depth-2].parameter_pair.First, ValueStack[ValueStack.Depth-2].parameter_pair.Second);
    }
#line default
        break;
      case 104: // optional_statement_list -> /* empty */
#line 465 "MainParser.gppg"
                {
      CurrentSemanticValue.statement = new Statement(new List<MiddleCode>(),
                         new HashSet<MiddleCode>());
    }
#line default
        break;
      case 105: // optional_statement_list -> optional_statement_list, statement
#line 469 "MainParser.gppg"
                                      {
      MiddleCodeGenerator.Backpatch(ValueStack[ValueStack.Depth-2].statement.NextSet, ValueStack[ValueStack.Depth-1].statement.CodeList);
      List<MiddleCode> codeList = new List<MiddleCode>();
      codeList.AddRange(ValueStack[ValueStack.Depth-2].statement.CodeList);
      codeList.AddRange(ValueStack[ValueStack.Depth-1].statement.CodeList);
      CurrentSemanticValue.statement = new Statement(codeList, ValueStack[ValueStack.Depth-1].statement.NextSet);
    }
#line default
        break;
      case 106: // statement -> opened_statement
#line 478 "MainParser.gppg"
                     { CurrentSemanticValue.statement = ValueStack[ValueStack.Depth-1].statement; }
#line default
        break;
      case 107: // statement -> closed_statement
#line 479 "MainParser.gppg"
                     { CurrentSemanticValue.statement = ValueStack[ValueStack.Depth-1].statement; }
#line default
        break;
      case 108: // switch_header -> /* empty */
#line 482 "MainParser.gppg"
                 { MiddleCodeGenerator.SwitchHeader(); }
#line default
        break;
      case 109: // loop_header -> /* empty */
#line 485 "MainParser.gppg"
                 { MiddleCodeGenerator.LoopHeader(); }
#line default
        break;
      case 110: // opened_statement -> IF, LEFT_PARENTHESIS, expression, RIGHT_PARENTHESIS, 
                //                     statement
#line 488 "MainParser.gppg"
                                                               {
      CurrentSemanticValue.statement = MiddleCodeGenerator.IfStatement(ValueStack[ValueStack.Depth-3].expression, ValueStack[ValueStack.Depth-1].statement);
    }
#line default
        break;
      case 111: // opened_statement -> IF, LEFT_PARENTHESIS, expression, RIGHT_PARENTHESIS, 
                //                     closed_statement, ELSE, opened_statement
#line 492 "MainParser.gppg"
                          {
      CurrentSemanticValue.statement = MiddleCodeGenerator.IfElseStatement(ValueStack[ValueStack.Depth-5].expression, ValueStack[ValueStack.Depth-3].statement, ValueStack[ValueStack.Depth-1].statement);
    }
#line default
        break;
      case 112: // opened_statement -> SWITCH, switch_header, LEFT_PARENTHESIS, expression, 
                //                     RIGHT_PARENTHESIS, opened_statement
#line 496 "MainParser.gppg"
                     {
      CurrentSemanticValue.statement = MiddleCodeGenerator.SwitchStatement(ValueStack[ValueStack.Depth-3].expression, ValueStack[ValueStack.Depth-1].statement);
    }
#line default
        break;
      case 113: // opened_statement -> CASE, constant_integral_expression, COLON, opened_statement
#line 499 "MainParser.gppg"
                                                             {
      CurrentSemanticValue.statement = MiddleCodeGenerator.CaseStatement(ValueStack[ValueStack.Depth-3].expression, ValueStack[ValueStack.Depth-1].statement);
    }
#line default
        break;
      case 114: // opened_statement -> WHILE, loop_header, LEFT_PARENTHESIS, expression, 
                //                     RIGHT_PARENTHESIS, opened_statement
#line 503 "MainParser.gppg"
                     {
      CurrentSemanticValue.statement = MiddleCodeGenerator.WhileStatement(ValueStack[ValueStack.Depth-3].expression, ValueStack[ValueStack.Depth-1].statement);
    }
#line default
        break;
      case 115: // opened_statement -> FOR, loop_header, LEFT_PARENTHESIS, optional_expression, 
                //                     SEMICOLON, optional_expression, SEMICOLON, 
                //                     optional_expression, RIGHT_PARENTHESIS, opened_statement
#line 508 "MainParser.gppg"
                     {
      CurrentSemanticValue.statement = MiddleCodeGenerator.ForStatement(ValueStack[ValueStack.Depth-7].expression, ValueStack[ValueStack.Depth-5].expression, ValueStack[ValueStack.Depth-3].expression, ValueStack[ValueStack.Depth-1].statement);
    }
#line default
        break;
      case 116: // opened_statement -> NAME, COLON, opened_statement
#line 511 "MainParser.gppg"
                                {
      CurrentSemanticValue.statement = MiddleCodeGenerator.LabelStatement(ValueStack[ValueStack.Depth-3].name, ValueStack[ValueStack.Depth-1].statement);
    }
#line default
        break;
      case 117: // closed_statement -> IF, LEFT_PARENTHESIS, expression, RIGHT_PARENTHESIS, 
                //                     closed_statement, ELSE, closed_statement
#line 517 "MainParser.gppg"
                          {
      CurrentSemanticValue.statement = MiddleCodeGenerator.IfElseStatement(ValueStack[ValueStack.Depth-5].expression, ValueStack[ValueStack.Depth-3].statement, ValueStack[ValueStack.Depth-1].statement);
    }
#line default
        break;
      case 118: // closed_statement -> SWITCH, switch_header, LEFT_PARENTHESIS, expression, 
                //                     RIGHT_PARENTHESIS, closed_statement
#line 521 "MainParser.gppg"
                     {
      CurrentSemanticValue.statement = MiddleCodeGenerator.SwitchStatement(ValueStack[ValueStack.Depth-3].expression, ValueStack[ValueStack.Depth-1].statement);
    }
#line default
        break;
      case 119: // closed_statement -> WHILE, loop_header, LEFT_PARENTHESIS, expression, 
                //                     RIGHT_PARENTHESIS, closed_statement
#line 525 "MainParser.gppg"
                     {
      CurrentSemanticValue.statement = MiddleCodeGenerator.WhileStatement(ValueStack[ValueStack.Depth-3].expression, ValueStack[ValueStack.Depth-1].statement);
    }
#line default
        break;
      case 120: // closed_statement -> DO, loop_header, statement, WHILE, LEFT_PARENTHESIS, 
                //                     expression, RIGHT_PARENTHESIS, SEMICOLON
#line 529 "MainParser.gppg"
              {
      CurrentSemanticValue.statement = MiddleCodeGenerator.DoStatement(ValueStack[ValueStack.Depth-6].statement, ValueStack[ValueStack.Depth-3].expression);
    }
#line default
        break;
      case 121: // closed_statement -> FOR, loop_header, LEFT_PARENTHESIS, optional_expression, 
                //                     SEMICOLON, optional_expression, SEMICOLON, 
                //                     optional_expression, RIGHT_PARENTHESIS, closed_statement
#line 534 "MainParser.gppg"
                     {
      CurrentSemanticValue.statement = MiddleCodeGenerator.ForStatement(ValueStack[ValueStack.Depth-7].expression, ValueStack[ValueStack.Depth-5].expression, ValueStack[ValueStack.Depth-3].expression, ValueStack[ValueStack.Depth-1].statement);
    }
#line default
        break;
      case 122: // closed_statement -> CASE, constant_integral_expression, COLON, closed_statement
#line 537 "MainParser.gppg"
                                                             {
      CurrentSemanticValue.statement = MiddleCodeGenerator.CaseStatement(ValueStack[ValueStack.Depth-3].expression, ValueStack[ValueStack.Depth-1].statement);
    }
#line default
        break;
      case 123: // closed_statement -> DEFAULT, COLON, closed_statement
#line 540 "MainParser.gppg"
                                   {
      CurrentSemanticValue.statement = MiddleCodeGenerator.DefaultStatement(ValueStack[ValueStack.Depth-1].statement);
    }
#line default
        break;
      case 124: // closed_statement -> CONTINUE, SEMICOLON
#line 543 "MainParser.gppg"
                       {
      CurrentSemanticValue.statement = MiddleCodeGenerator.ContinueStatement();
    }
#line default
        break;
      case 125: // closed_statement -> BREAK, SEMICOLON
#line 546 "MainParser.gppg"
                    {
      CurrentSemanticValue.statement = MiddleCodeGenerator.BreakStatement();
    }
#line default
        break;
      case 126: // Anon@10 -> /* empty */
#line 549 "MainParser.gppg"
               {
      SymbolTable.CurrentTable =
        new SymbolTable(SymbolTable.CurrentTable, Scope.Block);
    }
#line default
        break;
      case 127: // closed_statement -> LEFT_BLOCK, Anon@10, optional_statement_list, RIGHT_BLOCK
#line 553 "MainParser.gppg"
                                        {
      SymbolTable.CurrentTable =
        SymbolTable.CurrentTable.ParentTable;
      CurrentSemanticValue.statement = ValueStack[ValueStack.Depth-2].statement;
    }
#line default
        break;
      case 128: // closed_statement -> GOTO, NAME, SEMICOLON
#line 558 "MainParser.gppg"
                        {
      CurrentSemanticValue.statement = MiddleCodeGenerator.GotoStatement(ValueStack[ValueStack.Depth-2].name);
    }
#line default
        break;
      case 129: // closed_statement -> RETURN, optional_expression, SEMICOLON
#line 561 "MainParser.gppg"
                                         {
      CurrentSemanticValue.statement = MiddleCodeGenerator.ReturnStatement(ValueStack[ValueStack.Depth-2].expression);
    }
#line default
        break;
      case 130: // closed_statement -> optional_expression, SEMICOLON
#line 564 "MainParser.gppg"
                                  {
      CurrentSemanticValue.statement = MiddleCodeGenerator.ExpressionStatement(ValueStack[ValueStack.Depth-2].expression);
    }
#line default
        break;
      case 131: // closed_statement -> declaration
#line 567 "MainParser.gppg"
                {
      CurrentSemanticValue.statement = new Statement(ValueStack[ValueStack.Depth-1].middle_code_list, null);
    }
#line default
        break;
      case 132: // closed_statement -> JUMP_REGISTER, LEFT_PARENTHESIS, REGISTER_NAME, 
                //                     RIGHT_PARENTHESIS, SEMICOLON
#line 570 "MainParser.gppg"
                                                                             {
      CurrentSemanticValue.statement = MiddleCodeGenerator.JumpRegisterStatement(ValueStack[ValueStack.Depth-3].register);
    }
#line default
        break;
      case 133: // closed_statement -> INTERRUPT, LEFT_PARENTHESIS, constant_integral_expression, 
                //                     RIGHT_PARENTHESIS, SEMICOLON
#line 574 "MainParser.gppg"
              {
      CurrentSemanticValue.statement = MiddleCodeGenerator.InterruptStatement(ValueStack[ValueStack.Depth-3].expression);
    }
#line default
        break;
      case 134: // closed_statement -> SYSCALL, LEFT_PARENTHESIS, RIGHT_PARENTHESIS, SEMICOLON
#line 577 "MainParser.gppg"
                                                         {
      CurrentSemanticValue.statement = MiddleCodeGenerator.SyscallStatement();
    }
#line default
        break;
      case 135: // optional_expression -> /* empty */
#line 582 "MainParser.gppg"
                { CurrentSemanticValue.expression = null; }
#line default
        break;
      case 136: // optional_expression -> expression
#line 583 "MainParser.gppg"
                { CurrentSemanticValue.expression = ValueStack[ValueStack.Depth-1].expression;   }
#line default
        break;
      case 137: // expression -> assignment_expression
#line 586 "MainParser.gppg"
                         {
      CurrentSemanticValue.expression = ValueStack[ValueStack.Depth-1].expression;
    }
#line default
        break;
      case 138: // expression -> expression, COMMA, assignment_expression
#line 589 "MainParser.gppg"
                                           {
      CurrentSemanticValue.expression = MiddleCodeGenerator.CommaExpression(ValueStack[ValueStack.Depth-3].expression, ValueStack[ValueStack.Depth-1].expression);
    }
#line default
        break;
      case 139: // assignment_expression -> condition_expression
#line 594 "MainParser.gppg"
                         {
      CurrentSemanticValue.expression = ValueStack[ValueStack.Depth-1].expression;
    }
#line default
        break;
      case 140: // assignment_expression -> prefix_expression, assignment_operator, 
                //                          assignment_expression
#line 597 "MainParser.gppg"
                                                                {
      CurrentSemanticValue.expression = MiddleCodeGenerator.AssignmentExpression(ValueStack[ValueStack.Depth-2].middleOperator, ValueStack[ValueStack.Depth-3].expression, ValueStack[ValueStack.Depth-1].expression);
    }
#line default
        break;
      case 141: // assignment_operator -> ASSIGN
#line 602 "MainParser.gppg"
                       { CurrentSemanticValue.middleOperator = MiddleOperator.Assign;         }
#line default
        break;
      case 142: // assignment_operator -> ADD_ASSIGN
#line 603 "MainParser.gppg"
                       { CurrentSemanticValue.middleOperator = MiddleOperator.BinaryAdd;      }
#line default
        break;
      case 143: // assignment_operator -> SUBTRACT_ASSIGN
#line 604 "MainParser.gppg"
                       { CurrentSemanticValue.middleOperator = MiddleOperator.BinarySubtract; }
#line default
        break;
      case 144: // assignment_operator -> MULTIPLY_ASSIGN
#line 605 "MainParser.gppg"
                       { CurrentSemanticValue.middleOperator = MiddleOperator.SignedMultiply; }
#line default
        break;
      case 145: // assignment_operator -> DIVIDE_ASSIGN
#line 606 "MainParser.gppg"
                       { CurrentSemanticValue.middleOperator = MiddleOperator.SignedDivide;   }
#line default
        break;
      case 146: // assignment_operator -> MODULO_ASSIGN
#line 607 "MainParser.gppg"
                       { CurrentSemanticValue.middleOperator = MiddleOperator.SignedModulo;   }
#line default
        break;
      case 147: // assignment_operator -> AND_ASSIGN
#line 608 "MainParser.gppg"
                       { CurrentSemanticValue.middleOperator = MiddleOperator.BitwiseAnd;     }
#line default
        break;
      case 148: // assignment_operator -> OR_ASSIGN
#line 609 "MainParser.gppg"
                      { CurrentSemanticValue.middleOperator = MiddleOperator.BitwiseOr;     }
#line default
        break;
      case 149: // assignment_operator -> XOR_ASSIGN
#line 610 "MainParser.gppg"
                       { CurrentSemanticValue.middleOperator = MiddleOperator.BitwiseXOr;     }
#line default
        break;
      case 150: // assignment_operator -> LEFT_SHIFT_ASSIGN
#line 611 "MainParser.gppg"
                       { CurrentSemanticValue.middleOperator = MiddleOperator.ShiftLeft;      }
#line default
        break;
      case 151: // assignment_operator -> RIGHT_SHIFT_ASSIGN
#line 612 "MainParser.gppg"
                       { CurrentSemanticValue.middleOperator = MiddleOperator.ShiftRight;     }
#line default
        break;
      case 152: // condition_expression -> logical_or_expression
#line 615 "MainParser.gppg"
                          {
      CurrentSemanticValue.expression = ValueStack[ValueStack.Depth-1].expression;
    }
#line default
        break;
      case 153: // condition_expression -> logical_or_expression, QUESTION_MARK, expression, COLON, 
                //                         condition_expression
#line 618 "MainParser.gppg"
                                                                             {
      CurrentSemanticValue.expression = MiddleCodeGenerator.ConditionalExpression(ValueStack[ValueStack.Depth-5].expression, ValueStack[ValueStack.Depth-3].expression, ValueStack[ValueStack.Depth-1].expression);
    }
#line default
        break;
      case 154: // optional_constant_integral_expression -> /* empty */
#line 623 "MainParser.gppg"
                                 { CurrentSemanticValue.expression = null; }
#line default
        break;
      case 155: // optional_constant_integral_expression -> constant_integral_expression
#line 624 "MainParser.gppg"
                                 { CurrentSemanticValue.expression = ValueStack[ValueStack.Depth-1].expression;   }
#line default
        break;
      case 156: // constant_integral_expression -> condition_expression
#line 627 "MainParser.gppg"
                         {
      CurrentSemanticValue.expression = MiddleCodeGenerator.ConstantIntegralExpression(ValueStack[ValueStack.Depth-1].expression);
    }
#line default
        break;
      case 157: // logical_or_expression -> logical_and_expression
#line 632 "MainParser.gppg"
                           {
      CurrentSemanticValue.expression = ValueStack[ValueStack.Depth-1].expression;
    }
#line default
        break;
      case 158: // logical_or_expression -> logical_or_expression, LOGICAL_OR, 
                //                          logical_and_expression
#line 635 "MainParser.gppg"
                                                            {
      CurrentSemanticValue.expression = MiddleCodeGenerator.LogicalOrExpression(ValueStack[ValueStack.Depth-3].expression, ValueStack[ValueStack.Depth-1].expression);
    }
#line default
        break;
      case 159: // logical_and_expression -> bitwise_or_expression
#line 640 "MainParser.gppg"
                          {
      CurrentSemanticValue.expression = ValueStack[ValueStack.Depth-1].expression;
    }
#line default
        break;
      case 160: // logical_and_expression -> logical_and_expression, LOGICAL_AND, 
                //                           bitwise_or_expression
#line 643 "MainParser.gppg"
                                                             {
      CurrentSemanticValue.expression = MiddleCodeGenerator.LogicalAndExpression(ValueStack[ValueStack.Depth-3].expression, ValueStack[ValueStack.Depth-1].expression);
    }
#line default
        break;
      case 161: // bitwise_or_expression -> bitwise_xor_expression
#line 648 "MainParser.gppg"
                           {
      CurrentSemanticValue.expression = ValueStack[ValueStack.Depth-1].expression;
    }
#line default
        break;
      case 162: // bitwise_or_expression -> bitwise_or_expression, BITWISE_OR, 
                //                          bitwise_xor_expression
#line 651 "MainParser.gppg"
                                                            {
      CurrentSemanticValue.expression = MiddleCodeGenerator.BitwiseExpression
           (MiddleOperator.BitwiseOr, ValueStack[ValueStack.Depth-3].expression, ValueStack[ValueStack.Depth-1].expression);
    }
#line default
        break;
      case 163: // bitwise_xor_expression -> bitwise_and_expression
#line 657 "MainParser.gppg"
                           {
      CurrentSemanticValue.expression = ValueStack[ValueStack.Depth-1].expression;
    }
#line default
        break;
      case 164: // bitwise_xor_expression -> bitwise_xor_expression, BITWISE_XOR, 
                //                           bitwise_and_expression
#line 660 "MainParser.gppg"
                                                              {
      CurrentSemanticValue.expression = MiddleCodeGenerator.BitwiseExpression
           (MiddleOperator.BitwiseXOr, ValueStack[ValueStack.Depth-3].expression, ValueStack[ValueStack.Depth-1].expression);
    }
#line default
        break;
      case 165: // bitwise_and_expression -> equality_expression
#line 666 "MainParser.gppg"
                        {
      CurrentSemanticValue.expression = ValueStack[ValueStack.Depth-1].expression;
    }
#line default
        break;
      case 166: // bitwise_and_expression -> bitwise_and_expression, AMPERSAND, 
                //                           equality_expression
#line 669 "MainParser.gppg"
                                                         {
      CurrentSemanticValue.expression = MiddleCodeGenerator.BitwiseExpression
           (MiddleOperator.BitwiseAnd, ValueStack[ValueStack.Depth-3].expression, ValueStack[ValueStack.Depth-1].expression);
    }
#line default
        break;
      case 167: // equality_expression -> relation_expression
#line 675 "MainParser.gppg"
                        {
      CurrentSemanticValue.expression = ValueStack[ValueStack.Depth-1].expression;
    }
#line default
        break;
      case 168: // equality_expression -> equality_expression, equality_operator, 
                //                        relation_expression
#line 678 "MainParser.gppg"
                                                              {
      CurrentSemanticValue.expression = MiddleCodeGenerator.RelationalExpression(ValueStack[ValueStack.Depth-2].middleOperator, ValueStack[ValueStack.Depth-3].expression, ValueStack[ValueStack.Depth-1].expression);
    }
#line default
        break;
      case 169: // equality_operator -> EQUAL
#line 683 "MainParser.gppg"
              { CurrentSemanticValue.middleOperator = MiddleOperator.Equal;    }
#line default
        break;
      case 170: // equality_operator -> NOT_EQUAL
#line 684 "MainParser.gppg"
              { CurrentSemanticValue.middleOperator = MiddleOperator.NotEqual; }
#line default
        break;
      case 171: // relation_expression -> shift_expression
#line 687 "MainParser.gppg"
                     {
      CurrentSemanticValue.expression = ValueStack[ValueStack.Depth-1].expression;
    }
#line default
        break;
      case 172: // relation_expression -> relation_expression, relation_operator, shift_expression
#line 690 "MainParser.gppg"
                                                           {
      CurrentSemanticValue.expression = MiddleCodeGenerator.RelationalExpression (ValueStack[ValueStack.Depth-2].middleOperator, ValueStack[ValueStack.Depth-3].expression, ValueStack[ValueStack.Depth-1].expression);
    }
#line default
        break;
      case 173: // relation_operator -> LESS_THAN
#line 695 "MainParser.gppg"
                       { CurrentSemanticValue.middleOperator = MiddleOperator.SignedLessThan;         }
#line default
        break;
      case 174: // relation_operator -> LESS_THAN_EQUAL
#line 696 "MainParser.gppg"
                       { CurrentSemanticValue.middleOperator = MiddleOperator.SignedLessThanEqual;    }
#line default
        break;
      case 175: // relation_operator -> GREATER_THAN
#line 697 "MainParser.gppg"
                       { CurrentSemanticValue.middleOperator = MiddleOperator.SignedGreaterThan;      }
#line default
        break;
      case 176: // relation_operator -> GREATER_THAN_EQUAL
#line 698 "MainParser.gppg"
                       { CurrentSemanticValue.middleOperator = MiddleOperator.SignedGreaterThanEqual; }
#line default
        break;
      case 177: // shift_expression -> add_expression
#line 701 "MainParser.gppg"
                   {
      CurrentSemanticValue.expression = ValueStack[ValueStack.Depth-1].expression;
    }
#line default
        break;
      case 178: // shift_expression -> shift_expression, shift_operator, add_expression
#line 704 "MainParser.gppg"
                                                   {
      CurrentSemanticValue.expression = MiddleCodeGenerator.ShiftExpression(ValueStack[ValueStack.Depth-2].middleOperator, ValueStack[ValueStack.Depth-3].expression, ValueStack[ValueStack.Depth-1].expression);
    }
#line default
        break;
      case 179: // shift_operator -> LEFT_SHIFT
#line 709 "MainParser.gppg"
                { CurrentSemanticValue.middleOperator = MiddleOperator.ShiftLeft;  }
#line default
        break;
      case 180: // shift_operator -> RIGHT_SHIFT
#line 710 "MainParser.gppg"
                { CurrentSemanticValue.middleOperator = MiddleOperator.ShiftRight; }
#line default
        break;
      case 181: // add_expression -> multiply_expression
#line 713 "MainParser.gppg"
                        {
      CurrentSemanticValue.expression = ValueStack[ValueStack.Depth-1].expression;
    }
#line default
        break;
      case 182: // add_expression -> add_expression, add_operator, multiply_expression
#line 716 "MainParser.gppg"
                                                    {
      CurrentSemanticValue.expression = MiddleCodeGenerator.AdditionExpression(ValueStack[ValueStack.Depth-2].middleOperator, ValueStack[ValueStack.Depth-3].expression, ValueStack[ValueStack.Depth-1].expression);
    }
#line default
        break;
      case 183: // add_operator -> PLUS
#line 721 "MainParser.gppg"
          { CurrentSemanticValue.middleOperator = MiddleOperator.BinaryAdd;      }
#line default
        break;
      case 184: // add_operator -> MINUS
#line 722 "MainParser.gppg"
          { CurrentSemanticValue.middleOperator = MiddleOperator.BinarySubtract; }
#line default
        break;
      case 185: // multiply_expression -> type_cast_expression
#line 725 "MainParser.gppg"
                         {
      CurrentSemanticValue.expression = ValueStack[ValueStack.Depth-1].expression;
    }
#line default
        break;
      case 186: // multiply_expression -> multiply_expression, multiply_operator, 
                //                        type_cast_expression
#line 728 "MainParser.gppg"
                                                               {
      CurrentSemanticValue.expression = MiddleCodeGenerator.MultiplyExpression(ValueStack[ValueStack.Depth-2].middleOperator, ValueStack[ValueStack.Depth-3].expression, ValueStack[ValueStack.Depth-1].expression);
    }
#line default
        break;
      case 187: // multiply_operator -> ASTERRISK
#line 733 "MainParser.gppg"
              { CurrentSemanticValue.middleOperator = MiddleOperator.SignedMultiply; }
#line default
        break;
      case 188: // multiply_operator -> DIVIDE
#line 734 "MainParser.gppg"
              { CurrentSemanticValue.middleOperator = MiddleOperator.SignedDivide;   }
#line default
        break;
      case 189: // multiply_operator -> MODULO
#line 735 "MainParser.gppg"
              { CurrentSemanticValue.middleOperator = MiddleOperator.SignedModulo;   }
#line default
        break;
      case 190: // type_cast_expression -> prefix_expression
#line 738 "MainParser.gppg"
                      {
      CurrentSemanticValue.expression = ValueStack[ValueStack.Depth-1].expression;
    }
#line default
        break;
      case 191: // type_cast_expression -> LEFT_PARENTHESIS, type_name, RIGHT_PARENTHESIS, 
                //                         type_cast_expression
#line 741 "MainParser.gppg"
                                                                      {
      CurrentSemanticValue.expression = MiddleCodeGenerator.CastExpression(ValueStack[ValueStack.Depth-3].type, ValueStack[ValueStack.Depth-1].expression);
    }
#line default
        break;
      case 192: // type_name -> declaration_specifier_list
#line 750 "MainParser.gppg"
                               {
      CurrentSemanticValue.type = MiddleCodeGenerator.
           TypeName(Specifier.SpecifierList(ValueStack[ValueStack.Depth-1].object_list), null);
    }
#line default
        break;
      case 193: // Anon@11 -> /* empty */
#line 754 "MainParser.gppg"
                               {
      SpecifierStack.Push(Specifier.SpecifierList(ValueStack[ValueStack.Depth-1].object_list));
    }
#line default
        break;
      case 194: // type_name -> declaration_specifier_list, Anon@11, abstract_declarator
#line 757 "MainParser.gppg"
                        {
      CurrentSemanticValue.type = MiddleCodeGenerator.
           TypeName(SpecifierStack.Pop(), ValueStack[ValueStack.Depth-1].declarator);
    }
#line default
        break;
      case 195: // prefix_expression -> postfix_expression
#line 763 "MainParser.gppg"
                       {
      CurrentSemanticValue.expression = ValueStack[ValueStack.Depth-1].expression; 
    }
#line default
        break;
      case 196: // prefix_expression -> prefix_add_operator, type_cast_expression
#line 766 "MainParser.gppg"
                                             {
      CurrentSemanticValue.expression = MiddleCodeGenerator.UnaryExpression(ValueStack[ValueStack.Depth-2].middleOperator, ValueStack[ValueStack.Depth-1].expression);
    }
#line default
        break;
      case 197: // prefix_expression -> LOGICAL_NOT, type_cast_expression
#line 769 "MainParser.gppg"
                                     {
      CurrentSemanticValue.expression = MiddleCodeGenerator.LogicalNotExpression(ValueStack[ValueStack.Depth-1].expression);
    }
#line default
        break;
      case 198: // prefix_expression -> BITWISE_NOT, type_cast_expression
#line 772 "MainParser.gppg"
                                     {
      CurrentSemanticValue.expression = MiddleCodeGenerator.BitwiseNotExpression(ValueStack[ValueStack.Depth-1].expression);
    }
#line default
        break;
      case 199: // prefix_expression -> SIZEOF, prefix_expression
#line 775 "MainParser.gppg"
                             {
      CurrentSemanticValue.expression = MiddleCodeGenerator.SizeOfExpression(ValueStack[ValueStack.Depth-1].expression);
    }
#line default
        break;
      case 200: // prefix_expression -> SIZEOF, LEFT_PARENTHESIS, type_name, RIGHT_PARENTHESIS
#line 778 "MainParser.gppg"
                                                        {
      CurrentSemanticValue.expression = MiddleCodeGenerator.SizeOfType(ValueStack[ValueStack.Depth-2].type);
    }
#line default
        break;
      case 201: // prefix_expression -> AMPERSAND, type_cast_expression
#line 781 "MainParser.gppg"
                                   {
      CurrentSemanticValue.expression = MiddleCodeGenerator.AddressExpression(ValueStack[ValueStack.Depth-1].expression);
    }
#line default
        break;
      case 202: // prefix_expression -> ASTERRISK, type_cast_expression
#line 784 "MainParser.gppg"
                                   {
      CurrentSemanticValue.expression = MiddleCodeGenerator.DereferenceExpression(ValueStack[ValueStack.Depth-1].expression);
    }
#line default
        break;
      case 203: // prefix_expression -> increment_operator, prefix_expression
#line 787 "MainParser.gppg"
                                         {
      CurrentSemanticValue.expression = MiddleCodeGenerator.PrefixIncrementExpression(ValueStack[ValueStack.Depth-2].middleOperator, ValueStack[ValueStack.Depth-1].expression);
    }
#line default
        break;
      case 204: // prefix_add_operator -> PLUS
#line 792 "MainParser.gppg"
          { CurrentSemanticValue.middleOperator = MiddleOperator.UnaryAdd;      }
#line default
        break;
      case 205: // prefix_add_operator -> MINUS
#line 793 "MainParser.gppg"
          { CurrentSemanticValue.middleOperator = MiddleOperator.UnarySubtract; }
#line default
        break;
      case 206: // increment_operator -> INCREMENT
#line 796 "MainParser.gppg"
              { CurrentSemanticValue.middleOperator = MiddleOperator.Increment; }
#line default
        break;
      case 207: // increment_operator -> DECREMENT
#line 797 "MainParser.gppg"
              { CurrentSemanticValue.middleOperator = MiddleOperator.Decrement; }
#line default
        break;
      case 208: // postfix_expression -> primary_expression
#line 800 "MainParser.gppg"
                       {
      CurrentSemanticValue.expression = ValueStack[ValueStack.Depth-1].expression; 
    }
#line default
        break;
      case 209: // postfix_expression -> postfix_expression, increment_operator
#line 803 "MainParser.gppg"
                                          {
      CurrentSemanticValue.expression = MiddleCodeGenerator.PostfixIncrementExpression(ValueStack[ValueStack.Depth-1].middleOperator, ValueStack[ValueStack.Depth-2].expression);
    }
#line default
        break;
      case 210: // postfix_expression -> postfix_expression, DOT, NAME
#line 806 "MainParser.gppg"
                                {
      CurrentSemanticValue.expression = MiddleCodeGenerator.DotExpression(ValueStack[ValueStack.Depth-3].expression, ValueStack[ValueStack.Depth-1].name);
    }
#line default
        break;
      case 211: // postfix_expression -> postfix_expression, ARROW, NAME
#line 809 "MainParser.gppg"
                                  {
      CurrentSemanticValue.expression = MiddleCodeGenerator.ArrowExpression(ValueStack[ValueStack.Depth-3].expression, ValueStack[ValueStack.Depth-1].name);
    }
#line default
        break;
      case 212: // postfix_expression -> postfix_expression, LEFT_SQUARE, expression, RIGHT_SQUARE
#line 812 "MainParser.gppg"
                                                           {
      CurrentSemanticValue.expression = MiddleCodeGenerator.IndexExpression(ValueStack[ValueStack.Depth-4].expression, ValueStack[ValueStack.Depth-2].expression);
    }
#line default
        break;
      case 213: // Anon@12 -> /* empty */
#line 815 "MainParser.gppg"
                       {
      MiddleCodeGenerator.CallHeader(ValueStack[ValueStack.Depth-1].expression);
    }
#line default
        break;
      case 214: // postfix_expression -> postfix_expression, Anon@12, LEFT_PARENTHESIS, 
                //                       optional_argument_expression_list, RIGHT_PARENTHESIS
#line 818 "MainParser.gppg"
                                                                         {
      CurrentSemanticValue.expression = MiddleCodeGenerator.CallExpression(ValueStack[ValueStack.Depth-5].expression, ValueStack[ValueStack.Depth-2].expression_list);
    }
#line default
        break;
      case 215: // optional_argument_expression_list -> /* empty */
#line 823 "MainParser.gppg"
                             { CurrentSemanticValue.expression_list = new List<Expression>(); }
#line default
        break;
      case 216: // optional_argument_expression_list -> argument_expression_list
#line 824 "MainParser.gppg"
                             { CurrentSemanticValue.expression_list = ValueStack[ValueStack.Depth-1].expression_list;                     }
#line default
        break;
      case 217: // argument_expression_list -> assignment_expression
#line 827 "MainParser.gppg"
                          {
      CurrentSemanticValue.expression_list = new List<Expression>();
      CurrentSemanticValue.expression_list.Add(MiddleCodeGenerator.ArgumentExpression(0, ValueStack[ValueStack.Depth-1].expression));
    }
#line default
        break;
      case 218: // argument_expression_list -> argument_expression_list, COMMA, 
                //                             assignment_expression
#line 831 "MainParser.gppg"
                                                         {
      ValueStack[ValueStack.Depth-3].expression_list.Add(MiddleCodeGenerator.ArgumentExpression(ValueStack[ValueStack.Depth-3].expression_list.Count, ValueStack[ValueStack.Depth-1].expression));
      CurrentSemanticValue.expression_list = ValueStack[ValueStack.Depth-3].expression_list;
    }
#line default
        break;
      case 219: // primary_expression -> VALUE
#line 837 "MainParser.gppg"
          {
      CurrentSemanticValue.expression = MiddleCodeGenerator.ValueExpression(ValueStack[ValueStack.Depth-1].symbol);
    }
#line default
        break;
      case 220: // primary_expression -> NAME
#line 840 "MainParser.gppg"
         {
      CurrentSemanticValue.expression = MiddleCodeGenerator.SymbolExpression(ValueStack[ValueStack.Depth-1].name);
    }
#line default
        break;
      case 221: // primary_expression -> REGISTER_NAME
#line 843 "MainParser.gppg"
                  {
      CurrentSemanticValue.expression = MiddleCodeGenerator.RegisterExpression(ValueStack[ValueStack.Depth-1].register);
    }
#line default
        break;
      case 222: // primary_expression -> CARRY_FLAG
#line 846 "MainParser.gppg"
               {
      CurrentSemanticValue.expression = MiddleCodeGenerator.CarryFlagExpression();
    }
#line default
        break;
      case 223: // primary_expression -> LEFT_PARENTHESIS, expression, RIGHT_PARENTHESIS
#line 849 "MainParser.gppg"
                                                  {
      CurrentSemanticValue.expression = ValueStack[ValueStack.Depth-2].expression; 
    }
#line default
        break;
    }
#pragma warning restore 162, 1522
  }

  protected override string TerminalToString(int terminal)
  {
    if (aliases != null && aliases.ContainsKey(terminal))
        return aliases[terminal];
    else if (((Tokens)terminal).ToString() != terminal.ToString(CultureInfo.InvariantCulture))
        return ((Tokens)terminal).ToString();
    else
        return CharToString((char)terminal);
  }

#line 852 "MainParser.gppg"
 #line default
}
}
