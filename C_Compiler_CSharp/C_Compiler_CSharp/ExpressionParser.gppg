%namespace CCompiler_Exp
%partial

%using CCompiler;

%{
  // Empty.
%}

%token DEFINED ADD SUBTRACT MULTIPLY DIVIDE MODULO EQUAL NOT_EQUAL LESS_THAN
       LESS_THAN_EQUAL GREATER_THAN GREATER_THAN_EQUAL LEFT_SHIFT RIGHT_SHIFT
       QUESTION_MARK COLON LEFT_PARENTHESIS RIGHT_PARENTHESIS LOGICAL_OR LOGICAL_AND
       LOGICAL_NOT BITWISE_XOR BITWISE_OR BITWISE_AND BITWISE_NOT EOL

%union {
  public string name;
  public int integer_value;
}

%token <name> NAME
%token <integer_value> VALUE

%type <integer_value> expression logical_or_expression
                      logical_and_expression bitwise_or_expression
                      bitwise_xor_expression bitwise_and_expression
                      equality_expression relation_expression
                      shift_expression add_expression
                      multiply_expression prefix_expression
                      primary_expression

%start expression

// --------------------------------------------------------------------------

%%

expression:
    logical_or_expression  {
      $$ = $1;
      Preprocessor.PreProcessorResult = $$;
    }
  | logical_or_expression QUESTION_MARK expression
                          COLON expression {
      $$ = ($1 != 0) ? $3 : $5;
      Preprocessor.PreProcessorResult = $$;
    };

logical_or_expression:
    logical_and_expression  {
      $$ = $1;
    }
  | logical_or_expression LOGICAL_OR logical_and_expression {
      $$ = (($1 != 0) || ($3 != 0)) ? 1 : 0;
    };

logical_and_expression:
    bitwise_or_expression  {
      $$ = $1;
    }
  | bitwise_and_expression LOGICAL_AND bitwise_or_expression {
      $$ = (($1 != 0) && ($3 != 0)) ? 1 : 0;
    };

bitwise_or_expression:
    bitwise_xor_expression  {
      $$ = $1;
    }
  | bitwise_or_expression BITWISE_OR bitwise_xor_expression {
      $$ = $1 | $3;
    };

bitwise_xor_expression:
    bitwise_and_expression  {
      $$ = $1;
    }
  | bitwise_xor_expression BITWISE_XOR bitwise_and_expression {
      $$ = $1 ^ $3;
    };

bitwise_and_expression:
    equality_expression {
      $$ = $1;
    }
  | bitwise_and_expression BITWISE_AND equality_expression {
      $$ = $1 & $3;
    };

equality_expression:
    relation_expression {
      $$ = $1;
    }
  | equality_expression EQUAL relation_expression {      
      $$ = ($1 == $3) ? 1 : 0;
    }
  | equality_expression NOT_EQUAL relation_expression {      
      $$ = ($1 != $3) ? 1 : 0;
    };

relation_expression:
    shift_expression  { $$ = $1; }
  | relation_expression LESS_THAN shift_expression {
      $$ = ($1 < $3) ? 1 : 0;
    }
  | relation_expression LESS_THAN_EQUAL shift_expression {
      $$ = ($1 <= $3) ? 1 : 0;
    }
  | relation_expression GREATER_THAN shift_expression {
      $$ = ($1 > $3) ? 1 : 0;
    }
  | relation_expression GREATER_THAN_EQUAL shift_expression {
      $$ = ($1 >=$3) ? 1 : 0;
    };

shift_expression:
    add_expression {
      $$ = $1;
    }
  | shift_expression LEFT_SHIFT add_expression {
      $$ = $1 << $3;
    }
  | shift_expression RIGHT_SHIFT add_expression {
      $$ = $1 >> $3;
    };

add_expression:
    multiply_expression {
      $$ = $1;
    }
  | add_expression ADD multiply_expression {
      $$ = $1 + $3;
    }
  | add_expression SUBTRACT multiply_expression {
      $$ = $1 - $3;
    };

multiply_expression:
    prefix_expression {
      $$ = $1;
    }
  | multiply_expression MULTIPLY prefix_expression {
      $$ = $1 * $3;
    }
  | multiply_expression DIVIDE prefix_expression {
      $$ = $1 / $3;
    }
  | multiply_expression MODULO prefix_expression {
      $$ = $1 % $3;
    };

prefix_expression:
    primary_expression {
      $$ = $1; 
    }
  | ADD prefix_expression {
      $$ = $2;
    }
  | SUBTRACT prefix_expression {
      $$ = -$2;
    }
  | BITWISE_NOT prefix_expression {
      $$ = ~$2;
    }
  | LOGICAL_NOT prefix_expression {
      $$ = ($2 == 0) ? 1 : 0;
    };

primary_expression:
    NAME {
      $$ = 1;
    }
  | VALUE {
      $$ = $1;
    }
  | DEFINED NAME {
      $$ = m_macroMap.ContainsKey($2) ? 1 : 0;
    }
  | DEFINED LEFT_PARENTHESIS NAME RIGHT_PARENTHESIS {
      $$ = m_macroMap.ContainsKey($3) ? 1 : 0;
    }
  | LEFT_PARENTHESIS expression RIGHT_PARENTHESIS {
      $$ = $2; 
    };
